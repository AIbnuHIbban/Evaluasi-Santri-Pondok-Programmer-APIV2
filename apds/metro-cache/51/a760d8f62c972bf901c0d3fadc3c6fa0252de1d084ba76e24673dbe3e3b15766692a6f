{"dependencies":[{"name":"../../validators/is","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.assertArrayExpression = assertArrayExpression;\n  exports.assertAssignmentExpression = assertAssignmentExpression;\n  exports.assertBinaryExpression = assertBinaryExpression;\n  exports.assertInterpreterDirective = assertInterpreterDirective;\n  exports.assertDirective = assertDirective;\n  exports.assertDirectiveLiteral = assertDirectiveLiteral;\n  exports.assertBlockStatement = assertBlockStatement;\n  exports.assertBreakStatement = assertBreakStatement;\n  exports.assertCallExpression = assertCallExpression;\n  exports.assertCatchClause = assertCatchClause;\n  exports.assertConditionalExpression = assertConditionalExpression;\n  exports.assertContinueStatement = assertContinueStatement;\n  exports.assertDebuggerStatement = assertDebuggerStatement;\n  exports.assertDoWhileStatement = assertDoWhileStatement;\n  exports.assertEmptyStatement = assertEmptyStatement;\n  exports.assertExpressionStatement = assertExpressionStatement;\n  exports.assertFile = assertFile;\n  exports.assertForInStatement = assertForInStatement;\n  exports.assertForStatement = assertForStatement;\n  exports.assertFunctionDeclaration = assertFunctionDeclaration;\n  exports.assertFunctionExpression = assertFunctionExpression;\n  exports.assertIdentifier = assertIdentifier;\n  exports.assertIfStatement = assertIfStatement;\n  exports.assertLabeledStatement = assertLabeledStatement;\n  exports.assertStringLiteral = assertStringLiteral;\n  exports.assertNumericLiteral = assertNumericLiteral;\n  exports.assertNullLiteral = assertNullLiteral;\n  exports.assertBooleanLiteral = assertBooleanLiteral;\n  exports.assertRegExpLiteral = assertRegExpLiteral;\n  exports.assertLogicalExpression = assertLogicalExpression;\n  exports.assertMemberExpression = assertMemberExpression;\n  exports.assertNewExpression = assertNewExpression;\n  exports.assertProgram = assertProgram;\n  exports.assertObjectExpression = assertObjectExpression;\n  exports.assertObjectMethod = assertObjectMethod;\n  exports.assertObjectProperty = assertObjectProperty;\n  exports.assertRestElement = assertRestElement;\n  exports.assertReturnStatement = assertReturnStatement;\n  exports.assertSequenceExpression = assertSequenceExpression;\n  exports.assertParenthesizedExpression = assertParenthesizedExpression;\n  exports.assertSwitchCase = assertSwitchCase;\n  exports.assertSwitchStatement = assertSwitchStatement;\n  exports.assertThisExpression = assertThisExpression;\n  exports.assertThrowStatement = assertThrowStatement;\n  exports.assertTryStatement = assertTryStatement;\n  exports.assertUnaryExpression = assertUnaryExpression;\n  exports.assertUpdateExpression = assertUpdateExpression;\n  exports.assertVariableDeclaration = assertVariableDeclaration;\n  exports.assertVariableDeclarator = assertVariableDeclarator;\n  exports.assertWhileStatement = assertWhileStatement;\n  exports.assertWithStatement = assertWithStatement;\n  exports.assertAssignmentPattern = assertAssignmentPattern;\n  exports.assertArrayPattern = assertArrayPattern;\n  exports.assertArrowFunctionExpression = assertArrowFunctionExpression;\n  exports.assertClassBody = assertClassBody;\n  exports.assertClassDeclaration = assertClassDeclaration;\n  exports.assertClassExpression = assertClassExpression;\n  exports.assertExportAllDeclaration = assertExportAllDeclaration;\n  exports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;\n  exports.assertExportNamedDeclaration = assertExportNamedDeclaration;\n  exports.assertExportSpecifier = assertExportSpecifier;\n  exports.assertForOfStatement = assertForOfStatement;\n  exports.assertImportDeclaration = assertImportDeclaration;\n  exports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;\n  exports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;\n  exports.assertImportSpecifier = assertImportSpecifier;\n  exports.assertMetaProperty = assertMetaProperty;\n  exports.assertClassMethod = assertClassMethod;\n  exports.assertObjectPattern = assertObjectPattern;\n  exports.assertSpreadElement = assertSpreadElement;\n  exports.assertSuper = assertSuper;\n  exports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;\n  exports.assertTemplateElement = assertTemplateElement;\n  exports.assertTemplateLiteral = assertTemplateLiteral;\n  exports.assertYieldExpression = assertYieldExpression;\n  exports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;\n  exports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;\n  exports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;\n  exports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;\n  exports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;\n  exports.assertClassImplements = assertClassImplements;\n  exports.assertDeclareClass = assertDeclareClass;\n  exports.assertDeclareFunction = assertDeclareFunction;\n  exports.assertDeclareInterface = assertDeclareInterface;\n  exports.assertDeclareModule = assertDeclareModule;\n  exports.assertDeclareModuleExports = assertDeclareModuleExports;\n  exports.assertDeclareTypeAlias = assertDeclareTypeAlias;\n  exports.assertDeclareOpaqueType = assertDeclareOpaqueType;\n  exports.assertDeclareVariable = assertDeclareVariable;\n  exports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;\n  exports.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;\n  exports.assertDeclaredPredicate = assertDeclaredPredicate;\n  exports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;\n  exports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;\n  exports.assertFunctionTypeParam = assertFunctionTypeParam;\n  exports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;\n  exports.assertInferredPredicate = assertInferredPredicate;\n  exports.assertInterfaceExtends = assertInterfaceExtends;\n  exports.assertInterfaceDeclaration = assertInterfaceDeclaration;\n  exports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;\n  exports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;\n  exports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;\n  exports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;\n  exports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;\n  exports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;\n  exports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;\n  exports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;\n  exports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;\n  exports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;\n  exports.assertObjectTypeIndexer = assertObjectTypeIndexer;\n  exports.assertObjectTypeProperty = assertObjectTypeProperty;\n  exports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;\n  exports.assertOpaqueType = assertOpaqueType;\n  exports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;\n  exports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;\n  exports.assertStringTypeAnnotation = assertStringTypeAnnotation;\n  exports.assertThisTypeAnnotation = assertThisTypeAnnotation;\n  exports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;\n  exports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;\n  exports.assertTypeAlias = assertTypeAlias;\n  exports.assertTypeAnnotation = assertTypeAnnotation;\n  exports.assertTypeCastExpression = assertTypeCastExpression;\n  exports.assertTypeParameter = assertTypeParameter;\n  exports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;\n  exports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;\n  exports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;\n  exports.assertVariance = assertVariance;\n  exports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;\n  exports.assertJSXAttribute = assertJSXAttribute;\n  exports.assertJSXClosingElement = assertJSXClosingElement;\n  exports.assertJSXElement = assertJSXElement;\n  exports.assertJSXEmptyExpression = assertJSXEmptyExpression;\n  exports.assertJSXExpressionContainer = assertJSXExpressionContainer;\n  exports.assertJSXSpreadChild = assertJSXSpreadChild;\n  exports.assertJSXIdentifier = assertJSXIdentifier;\n  exports.assertJSXMemberExpression = assertJSXMemberExpression;\n  exports.assertJSXNamespacedName = assertJSXNamespacedName;\n  exports.assertJSXOpeningElement = assertJSXOpeningElement;\n  exports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;\n  exports.assertJSXText = assertJSXText;\n  exports.assertJSXFragment = assertJSXFragment;\n  exports.assertJSXOpeningFragment = assertJSXOpeningFragment;\n  exports.assertJSXClosingFragment = assertJSXClosingFragment;\n  exports.assertNoop = assertNoop;\n  exports.assertPlaceholder = assertPlaceholder;\n  exports.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;\n  exports.assertArgumentPlaceholder = assertArgumentPlaceholder;\n  exports.assertAwaitExpression = assertAwaitExpression;\n  exports.assertBindExpression = assertBindExpression;\n  exports.assertClassProperty = assertClassProperty;\n  exports.assertOptionalMemberExpression = assertOptionalMemberExpression;\n  exports.assertPipelineTopicExpression = assertPipelineTopicExpression;\n  exports.assertPipelineBareFunction = assertPipelineBareFunction;\n  exports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;\n  exports.assertOptionalCallExpression = assertOptionalCallExpression;\n  exports.assertClassPrivateProperty = assertClassPrivateProperty;\n  exports.assertClassPrivateMethod = assertClassPrivateMethod;\n  exports.assertImport = assertImport;\n  exports.assertDecorator = assertDecorator;\n  exports.assertDoExpression = assertDoExpression;\n  exports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;\n  exports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;\n  exports.assertPrivateName = assertPrivateName;\n  exports.assertBigIntLiteral = assertBigIntLiteral;\n  exports.assertTSParameterProperty = assertTSParameterProperty;\n  exports.assertTSDeclareFunction = assertTSDeclareFunction;\n  exports.assertTSDeclareMethod = assertTSDeclareMethod;\n  exports.assertTSQualifiedName = assertTSQualifiedName;\n  exports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;\n  exports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;\n  exports.assertTSPropertySignature = assertTSPropertySignature;\n  exports.assertTSMethodSignature = assertTSMethodSignature;\n  exports.assertTSIndexSignature = assertTSIndexSignature;\n  exports.assertTSAnyKeyword = assertTSAnyKeyword;\n  exports.assertTSBooleanKeyword = assertTSBooleanKeyword;\n  exports.assertTSBigIntKeyword = assertTSBigIntKeyword;\n  exports.assertTSNeverKeyword = assertTSNeverKeyword;\n  exports.assertTSNullKeyword = assertTSNullKeyword;\n  exports.assertTSNumberKeyword = assertTSNumberKeyword;\n  exports.assertTSObjectKeyword = assertTSObjectKeyword;\n  exports.assertTSStringKeyword = assertTSStringKeyword;\n  exports.assertTSSymbolKeyword = assertTSSymbolKeyword;\n  exports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;\n  exports.assertTSUnknownKeyword = assertTSUnknownKeyword;\n  exports.assertTSVoidKeyword = assertTSVoidKeyword;\n  exports.assertTSThisType = assertTSThisType;\n  exports.assertTSFunctionType = assertTSFunctionType;\n  exports.assertTSConstructorType = assertTSConstructorType;\n  exports.assertTSTypeReference = assertTSTypeReference;\n  exports.assertTSTypePredicate = assertTSTypePredicate;\n  exports.assertTSTypeQuery = assertTSTypeQuery;\n  exports.assertTSTypeLiteral = assertTSTypeLiteral;\n  exports.assertTSArrayType = assertTSArrayType;\n  exports.assertTSTupleType = assertTSTupleType;\n  exports.assertTSOptionalType = assertTSOptionalType;\n  exports.assertTSRestType = assertTSRestType;\n  exports.assertTSUnionType = assertTSUnionType;\n  exports.assertTSIntersectionType = assertTSIntersectionType;\n  exports.assertTSConditionalType = assertTSConditionalType;\n  exports.assertTSInferType = assertTSInferType;\n  exports.assertTSParenthesizedType = assertTSParenthesizedType;\n  exports.assertTSTypeOperator = assertTSTypeOperator;\n  exports.assertTSIndexedAccessType = assertTSIndexedAccessType;\n  exports.assertTSMappedType = assertTSMappedType;\n  exports.assertTSLiteralType = assertTSLiteralType;\n  exports.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;\n  exports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;\n  exports.assertTSInterfaceBody = assertTSInterfaceBody;\n  exports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;\n  exports.assertTSAsExpression = assertTSAsExpression;\n  exports.assertTSTypeAssertion = assertTSTypeAssertion;\n  exports.assertTSEnumDeclaration = assertTSEnumDeclaration;\n  exports.assertTSEnumMember = assertTSEnumMember;\n  exports.assertTSModuleDeclaration = assertTSModuleDeclaration;\n  exports.assertTSModuleBlock = assertTSModuleBlock;\n  exports.assertTSImportType = assertTSImportType;\n  exports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;\n  exports.assertTSExternalModuleReference = assertTSExternalModuleReference;\n  exports.assertTSNonNullExpression = assertTSNonNullExpression;\n  exports.assertTSExportAssignment = assertTSExportAssignment;\n  exports.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;\n  exports.assertTSTypeAnnotation = assertTSTypeAnnotation;\n  exports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;\n  exports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;\n  exports.assertTSTypeParameter = assertTSTypeParameter;\n  exports.assertExpression = assertExpression;\n  exports.assertBinary = assertBinary;\n  exports.assertScopable = assertScopable;\n  exports.assertBlockParent = assertBlockParent;\n  exports.assertBlock = assertBlock;\n  exports.assertStatement = assertStatement;\n  exports.assertTerminatorless = assertTerminatorless;\n  exports.assertCompletionStatement = assertCompletionStatement;\n  exports.assertConditional = assertConditional;\n  exports.assertLoop = assertLoop;\n  exports.assertWhile = assertWhile;\n  exports.assertExpressionWrapper = assertExpressionWrapper;\n  exports.assertFor = assertFor;\n  exports.assertForXStatement = assertForXStatement;\n  exports.assertFunction = assertFunction;\n  exports.assertFunctionParent = assertFunctionParent;\n  exports.assertPureish = assertPureish;\n  exports.assertDeclaration = assertDeclaration;\n  exports.assertPatternLike = assertPatternLike;\n  exports.assertLVal = assertLVal;\n  exports.assertTSEntityName = assertTSEntityName;\n  exports.assertLiteral = assertLiteral;\n  exports.assertImmutable = assertImmutable;\n  exports.assertUserWhitespacable = assertUserWhitespacable;\n  exports.assertMethod = assertMethod;\n  exports.assertObjectMember = assertObjectMember;\n  exports.assertProperty = assertProperty;\n  exports.assertUnaryLike = assertUnaryLike;\n  exports.assertPattern = assertPattern;\n  exports.assertClass = assertClass;\n  exports.assertModuleDeclaration = assertModuleDeclaration;\n  exports.assertExportDeclaration = assertExportDeclaration;\n  exports.assertModuleSpecifier = assertModuleSpecifier;\n  exports.assertFlow = assertFlow;\n  exports.assertFlowType = assertFlowType;\n  exports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;\n  exports.assertFlowDeclaration = assertFlowDeclaration;\n  exports.assertFlowPredicate = assertFlowPredicate;\n  exports.assertJSX = assertJSX;\n  exports.assertPrivate = assertPrivate;\n  exports.assertTSTypeElement = assertTSTypeElement;\n  exports.assertTSType = assertTSType;\n  exports.assertNumberLiteral = assertNumberLiteral;\n  exports.assertRegexLiteral = assertRegexLiteral;\n  exports.assertRestProperty = assertRestProperty;\n  exports.assertSpreadProperty = assertSpreadProperty;\n\n  var _is = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], \"../../validators/is\"));\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function assert(type, node, opts) {\n    if (!(0, _is.default)(type, node, opts)) {\n      throw new Error(\"Expected type \\\"\" + type + \"\\\" with option \" + JSON.stringify(opts) + \", \" + (\"but instead got \\\"\" + node.type + \"\\\".\"));\n    }\n  }\n\n  function assertArrayExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArrayExpression\", node, opts);\n  }\n\n  function assertAssignmentExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"AssignmentExpression\", node, opts);\n  }\n\n  function assertBinaryExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BinaryExpression\", node, opts);\n  }\n\n  function assertInterpreterDirective(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InterpreterDirective\", node, opts);\n  }\n\n  function assertDirective(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Directive\", node, opts);\n  }\n\n  function assertDirectiveLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DirectiveLiteral\", node, opts);\n  }\n\n  function assertBlockStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BlockStatement\", node, opts);\n  }\n\n  function assertBreakStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BreakStatement\", node, opts);\n  }\n\n  function assertCallExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"CallExpression\", node, opts);\n  }\n\n  function assertCatchClause(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"CatchClause\", node, opts);\n  }\n\n  function assertConditionalExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ConditionalExpression\", node, opts);\n  }\n\n  function assertContinueStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ContinueStatement\", node, opts);\n  }\n\n  function assertDebuggerStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DebuggerStatement\", node, opts);\n  }\n\n  function assertDoWhileStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DoWhileStatement\", node, opts);\n  }\n\n  function assertEmptyStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EmptyStatement\", node, opts);\n  }\n\n  function assertExpressionStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExpressionStatement\", node, opts);\n  }\n\n  function assertFile(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"File\", node, opts);\n  }\n\n  function assertForInStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ForInStatement\", node, opts);\n  }\n\n  function assertForStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ForStatement\", node, opts);\n  }\n\n  function assertFunctionDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionDeclaration\", node, opts);\n  }\n\n  function assertFunctionExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionExpression\", node, opts);\n  }\n\n  function assertIdentifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Identifier\", node, opts);\n  }\n\n  function assertIfStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"IfStatement\", node, opts);\n  }\n\n  function assertLabeledStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"LabeledStatement\", node, opts);\n  }\n\n  function assertStringLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"StringLiteral\", node, opts);\n  }\n\n  function assertNumericLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NumericLiteral\", node, opts);\n  }\n\n  function assertNullLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NullLiteral\", node, opts);\n  }\n\n  function assertBooleanLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BooleanLiteral\", node, opts);\n  }\n\n  function assertRegExpLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"RegExpLiteral\", node, opts);\n  }\n\n  function assertLogicalExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"LogicalExpression\", node, opts);\n  }\n\n  function assertMemberExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"MemberExpression\", node, opts);\n  }\n\n  function assertNewExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NewExpression\", node, opts);\n  }\n\n  function assertProgram(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Program\", node, opts);\n  }\n\n  function assertObjectExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectExpression\", node, opts);\n  }\n\n  function assertObjectMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectMethod\", node, opts);\n  }\n\n  function assertObjectProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectProperty\", node, opts);\n  }\n\n  function assertRestElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"RestElement\", node, opts);\n  }\n\n  function assertReturnStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ReturnStatement\", node, opts);\n  }\n\n  function assertSequenceExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"SequenceExpression\", node, opts);\n  }\n\n  function assertParenthesizedExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ParenthesizedExpression\", node, opts);\n  }\n\n  function assertSwitchCase(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"SwitchCase\", node, opts);\n  }\n\n  function assertSwitchStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"SwitchStatement\", node, opts);\n  }\n\n  function assertThisExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ThisExpression\", node, opts);\n  }\n\n  function assertThrowStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ThrowStatement\", node, opts);\n  }\n\n  function assertTryStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TryStatement\", node, opts);\n  }\n\n  function assertUnaryExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UnaryExpression\", node, opts);\n  }\n\n  function assertUpdateExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UpdateExpression\", node, opts);\n  }\n\n  function assertVariableDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"VariableDeclaration\", node, opts);\n  }\n\n  function assertVariableDeclarator(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"VariableDeclarator\", node, opts);\n  }\n\n  function assertWhileStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"WhileStatement\", node, opts);\n  }\n\n  function assertWithStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"WithStatement\", node, opts);\n  }\n\n  function assertAssignmentPattern(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"AssignmentPattern\", node, opts);\n  }\n\n  function assertArrayPattern(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArrayPattern\", node, opts);\n  }\n\n  function assertArrowFunctionExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArrowFunctionExpression\", node, opts);\n  }\n\n  function assertClassBody(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassBody\", node, opts);\n  }\n\n  function assertClassDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassDeclaration\", node, opts);\n  }\n\n  function assertClassExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassExpression\", node, opts);\n  }\n\n  function assertExportAllDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportAllDeclaration\", node, opts);\n  }\n\n  function assertExportDefaultDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportDefaultDeclaration\", node, opts);\n  }\n\n  function assertExportNamedDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportNamedDeclaration\", node, opts);\n  }\n\n  function assertExportSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportSpecifier\", node, opts);\n  }\n\n  function assertForOfStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ForOfStatement\", node, opts);\n  }\n\n  function assertImportDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ImportDeclaration\", node, opts);\n  }\n\n  function assertImportDefaultSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ImportDefaultSpecifier\", node, opts);\n  }\n\n  function assertImportNamespaceSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ImportNamespaceSpecifier\", node, opts);\n  }\n\n  function assertImportSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ImportSpecifier\", node, opts);\n  }\n\n  function assertMetaProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"MetaProperty\", node, opts);\n  }\n\n  function assertClassMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassMethod\", node, opts);\n  }\n\n  function assertObjectPattern(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectPattern\", node, opts);\n  }\n\n  function assertSpreadElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"SpreadElement\", node, opts);\n  }\n\n  function assertSuper(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Super\", node, opts);\n  }\n\n  function assertTaggedTemplateExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TaggedTemplateExpression\", node, opts);\n  }\n\n  function assertTemplateElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TemplateElement\", node, opts);\n  }\n\n  function assertTemplateLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TemplateLiteral\", node, opts);\n  }\n\n  function assertYieldExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"YieldExpression\", node, opts);\n  }\n\n  function assertAnyTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"AnyTypeAnnotation\", node, opts);\n  }\n\n  function assertArrayTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArrayTypeAnnotation\", node, opts);\n  }\n\n  function assertBooleanTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BooleanTypeAnnotation\", node, opts);\n  }\n\n  function assertBooleanLiteralTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BooleanLiteralTypeAnnotation\", node, opts);\n  }\n\n  function assertNullLiteralTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NullLiteralTypeAnnotation\", node, opts);\n  }\n\n  function assertClassImplements(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassImplements\", node, opts);\n  }\n\n  function assertDeclareClass(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareClass\", node, opts);\n  }\n\n  function assertDeclareFunction(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareFunction\", node, opts);\n  }\n\n  function assertDeclareInterface(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareInterface\", node, opts);\n  }\n\n  function assertDeclareModule(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareModule\", node, opts);\n  }\n\n  function assertDeclareModuleExports(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareModuleExports\", node, opts);\n  }\n\n  function assertDeclareTypeAlias(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareTypeAlias\", node, opts);\n  }\n\n  function assertDeclareOpaqueType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareOpaqueType\", node, opts);\n  }\n\n  function assertDeclareVariable(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareVariable\", node, opts);\n  }\n\n  function assertDeclareExportDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareExportDeclaration\", node, opts);\n  }\n\n  function assertDeclareExportAllDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareExportAllDeclaration\", node, opts);\n  }\n\n  function assertDeclaredPredicate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclaredPredicate\", node, opts);\n  }\n\n  function assertExistsTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExistsTypeAnnotation\", node, opts);\n  }\n\n  function assertFunctionTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionTypeAnnotation\", node, opts);\n  }\n\n  function assertFunctionTypeParam(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionTypeParam\", node, opts);\n  }\n\n  function assertGenericTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"GenericTypeAnnotation\", node, opts);\n  }\n\n  function assertInferredPredicate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InferredPredicate\", node, opts);\n  }\n\n  function assertInterfaceExtends(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InterfaceExtends\", node, opts);\n  }\n\n  function assertInterfaceDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InterfaceDeclaration\", node, opts);\n  }\n\n  function assertInterfaceTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InterfaceTypeAnnotation\", node, opts);\n  }\n\n  function assertIntersectionTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"IntersectionTypeAnnotation\", node, opts);\n  }\n\n  function assertMixedTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"MixedTypeAnnotation\", node, opts);\n  }\n\n  function assertEmptyTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EmptyTypeAnnotation\", node, opts);\n  }\n\n  function assertNullableTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NullableTypeAnnotation\", node, opts);\n  }\n\n  function assertNumberLiteralTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NumberLiteralTypeAnnotation\", node, opts);\n  }\n\n  function assertNumberTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NumberTypeAnnotation\", node, opts);\n  }\n\n  function assertObjectTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeAnnotation\", node, opts);\n  }\n\n  function assertObjectTypeInternalSlot(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeInternalSlot\", node, opts);\n  }\n\n  function assertObjectTypeCallProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeCallProperty\", node, opts);\n  }\n\n  function assertObjectTypeIndexer(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeIndexer\", node, opts);\n  }\n\n  function assertObjectTypeProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeProperty\", node, opts);\n  }\n\n  function assertObjectTypeSpreadProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeSpreadProperty\", node, opts);\n  }\n\n  function assertOpaqueType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"OpaqueType\", node, opts);\n  }\n\n  function assertQualifiedTypeIdentifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"QualifiedTypeIdentifier\", node, opts);\n  }\n\n  function assertStringLiteralTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"StringLiteralTypeAnnotation\", node, opts);\n  }\n\n  function assertStringTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"StringTypeAnnotation\", node, opts);\n  }\n\n  function assertThisTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ThisTypeAnnotation\", node, opts);\n  }\n\n  function assertTupleTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TupleTypeAnnotation\", node, opts);\n  }\n\n  function assertTypeofTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeofTypeAnnotation\", node, opts);\n  }\n\n  function assertTypeAlias(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeAlias\", node, opts);\n  }\n\n  function assertTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeAnnotation\", node, opts);\n  }\n\n  function assertTypeCastExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeCastExpression\", node, opts);\n  }\n\n  function assertTypeParameter(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeParameter\", node, opts);\n  }\n\n  function assertTypeParameterDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeParameterDeclaration\", node, opts);\n  }\n\n  function assertTypeParameterInstantiation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeParameterInstantiation\", node, opts);\n  }\n\n  function assertUnionTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UnionTypeAnnotation\", node, opts);\n  }\n\n  function assertVariance(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Variance\", node, opts);\n  }\n\n  function assertVoidTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"VoidTypeAnnotation\", node, opts);\n  }\n\n  function assertJSXAttribute(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXAttribute\", node, opts);\n  }\n\n  function assertJSXClosingElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXClosingElement\", node, opts);\n  }\n\n  function assertJSXElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXElement\", node, opts);\n  }\n\n  function assertJSXEmptyExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXEmptyExpression\", node, opts);\n  }\n\n  function assertJSXExpressionContainer(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXExpressionContainer\", node, opts);\n  }\n\n  function assertJSXSpreadChild(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXSpreadChild\", node, opts);\n  }\n\n  function assertJSXIdentifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXIdentifier\", node, opts);\n  }\n\n  function assertJSXMemberExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXMemberExpression\", node, opts);\n  }\n\n  function assertJSXNamespacedName(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXNamespacedName\", node, opts);\n  }\n\n  function assertJSXOpeningElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXOpeningElement\", node, opts);\n  }\n\n  function assertJSXSpreadAttribute(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXSpreadAttribute\", node, opts);\n  }\n\n  function assertJSXText(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXText\", node, opts);\n  }\n\n  function assertJSXFragment(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXFragment\", node, opts);\n  }\n\n  function assertJSXOpeningFragment(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXOpeningFragment\", node, opts);\n  }\n\n  function assertJSXClosingFragment(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXClosingFragment\", node, opts);\n  }\n\n  function assertNoop(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Noop\", node, opts);\n  }\n\n  function assertPlaceholder(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Placeholder\", node, opts);\n  }\n\n  function assertV8IntrinsicIdentifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"V8IntrinsicIdentifier\", node, opts);\n  }\n\n  function assertArgumentPlaceholder(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArgumentPlaceholder\", node, opts);\n  }\n\n  function assertAwaitExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"AwaitExpression\", node, opts);\n  }\n\n  function assertBindExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BindExpression\", node, opts);\n  }\n\n  function assertClassProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassProperty\", node, opts);\n  }\n\n  function assertOptionalMemberExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"OptionalMemberExpression\", node, opts);\n  }\n\n  function assertPipelineTopicExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PipelineTopicExpression\", node, opts);\n  }\n\n  function assertPipelineBareFunction(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PipelineBareFunction\", node, opts);\n  }\n\n  function assertPipelinePrimaryTopicReference(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PipelinePrimaryTopicReference\", node, opts);\n  }\n\n  function assertOptionalCallExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"OptionalCallExpression\", node, opts);\n  }\n\n  function assertClassPrivateProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassPrivateProperty\", node, opts);\n  }\n\n  function assertClassPrivateMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassPrivateMethod\", node, opts);\n  }\n\n  function assertImport(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Import\", node, opts);\n  }\n\n  function assertDecorator(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Decorator\", node, opts);\n  }\n\n  function assertDoExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DoExpression\", node, opts);\n  }\n\n  function assertExportDefaultSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportDefaultSpecifier\", node, opts);\n  }\n\n  function assertExportNamespaceSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportNamespaceSpecifier\", node, opts);\n  }\n\n  function assertPrivateName(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PrivateName\", node, opts);\n  }\n\n  function assertBigIntLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BigIntLiteral\", node, opts);\n  }\n\n  function assertTSParameterProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSParameterProperty\", node, opts);\n  }\n\n  function assertTSDeclareFunction(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSDeclareFunction\", node, opts);\n  }\n\n  function assertTSDeclareMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSDeclareMethod\", node, opts);\n  }\n\n  function assertTSQualifiedName(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSQualifiedName\", node, opts);\n  }\n\n  function assertTSCallSignatureDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSCallSignatureDeclaration\", node, opts);\n  }\n\n  function assertTSConstructSignatureDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSConstructSignatureDeclaration\", node, opts);\n  }\n\n  function assertTSPropertySignature(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSPropertySignature\", node, opts);\n  }\n\n  function assertTSMethodSignature(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSMethodSignature\", node, opts);\n  }\n\n  function assertTSIndexSignature(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSIndexSignature\", node, opts);\n  }\n\n  function assertTSAnyKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSAnyKeyword\", node, opts);\n  }\n\n  function assertTSBooleanKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSBooleanKeyword\", node, opts);\n  }\n\n  function assertTSBigIntKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSBigIntKeyword\", node, opts);\n  }\n\n  function assertTSNeverKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNeverKeyword\", node, opts);\n  }\n\n  function assertTSNullKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNullKeyword\", node, opts);\n  }\n\n  function assertTSNumberKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNumberKeyword\", node, opts);\n  }\n\n  function assertTSObjectKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSObjectKeyword\", node, opts);\n  }\n\n  function assertTSStringKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSStringKeyword\", node, opts);\n  }\n\n  function assertTSSymbolKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSSymbolKeyword\", node, opts);\n  }\n\n  function assertTSUndefinedKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSUndefinedKeyword\", node, opts);\n  }\n\n  function assertTSUnknownKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSUnknownKeyword\", node, opts);\n  }\n\n  function assertTSVoidKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSVoidKeyword\", node, opts);\n  }\n\n  function assertTSThisType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSThisType\", node, opts);\n  }\n\n  function assertTSFunctionType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSFunctionType\", node, opts);\n  }\n\n  function assertTSConstructorType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSConstructorType\", node, opts);\n  }\n\n  function assertTSTypeReference(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeReference\", node, opts);\n  }\n\n  function assertTSTypePredicate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypePredicate\", node, opts);\n  }\n\n  function assertTSTypeQuery(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeQuery\", node, opts);\n  }\n\n  function assertTSTypeLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeLiteral\", node, opts);\n  }\n\n  function assertTSArrayType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSArrayType\", node, opts);\n  }\n\n  function assertTSTupleType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTupleType\", node, opts);\n  }\n\n  function assertTSOptionalType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSOptionalType\", node, opts);\n  }\n\n  function assertTSRestType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSRestType\", node, opts);\n  }\n\n  function assertTSUnionType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSUnionType\", node, opts);\n  }\n\n  function assertTSIntersectionType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSIntersectionType\", node, opts);\n  }\n\n  function assertTSConditionalType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSConditionalType\", node, opts);\n  }\n\n  function assertTSInferType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSInferType\", node, opts);\n  }\n\n  function assertTSParenthesizedType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSParenthesizedType\", node, opts);\n  }\n\n  function assertTSTypeOperator(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeOperator\", node, opts);\n  }\n\n  function assertTSIndexedAccessType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSIndexedAccessType\", node, opts);\n  }\n\n  function assertTSMappedType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSMappedType\", node, opts);\n  }\n\n  function assertTSLiteralType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSLiteralType\", node, opts);\n  }\n\n  function assertTSExpressionWithTypeArguments(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSExpressionWithTypeArguments\", node, opts);\n  }\n\n  function assertTSInterfaceDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSInterfaceDeclaration\", node, opts);\n  }\n\n  function assertTSInterfaceBody(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSInterfaceBody\", node, opts);\n  }\n\n  function assertTSTypeAliasDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeAliasDeclaration\", node, opts);\n  }\n\n  function assertTSAsExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSAsExpression\", node, opts);\n  }\n\n  function assertTSTypeAssertion(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeAssertion\", node, opts);\n  }\n\n  function assertTSEnumDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSEnumDeclaration\", node, opts);\n  }\n\n  function assertTSEnumMember(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSEnumMember\", node, opts);\n  }\n\n  function assertTSModuleDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSModuleDeclaration\", node, opts);\n  }\n\n  function assertTSModuleBlock(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSModuleBlock\", node, opts);\n  }\n\n  function assertTSImportType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSImportType\", node, opts);\n  }\n\n  function assertTSImportEqualsDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSImportEqualsDeclaration\", node, opts);\n  }\n\n  function assertTSExternalModuleReference(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSExternalModuleReference\", node, opts);\n  }\n\n  function assertTSNonNullExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNonNullExpression\", node, opts);\n  }\n\n  function assertTSExportAssignment(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSExportAssignment\", node, opts);\n  }\n\n  function assertTSNamespaceExportDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNamespaceExportDeclaration\", node, opts);\n  }\n\n  function assertTSTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeAnnotation\", node, opts);\n  }\n\n  function assertTSTypeParameterInstantiation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeParameterInstantiation\", node, opts);\n  }\n\n  function assertTSTypeParameterDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeParameterDeclaration\", node, opts);\n  }\n\n  function assertTSTypeParameter(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeParameter\", node, opts);\n  }\n\n  function assertExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Expression\", node, opts);\n  }\n\n  function assertBinary(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Binary\", node, opts);\n  }\n\n  function assertScopable(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Scopable\", node, opts);\n  }\n\n  function assertBlockParent(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BlockParent\", node, opts);\n  }\n\n  function assertBlock(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Block\", node, opts);\n  }\n\n  function assertStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Statement\", node, opts);\n  }\n\n  function assertTerminatorless(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Terminatorless\", node, opts);\n  }\n\n  function assertCompletionStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"CompletionStatement\", node, opts);\n  }\n\n  function assertConditional(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Conditional\", node, opts);\n  }\n\n  function assertLoop(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Loop\", node, opts);\n  }\n\n  function assertWhile(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"While\", node, opts);\n  }\n\n  function assertExpressionWrapper(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExpressionWrapper\", node, opts);\n  }\n\n  function assertFor(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"For\", node, opts);\n  }\n\n  function assertForXStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ForXStatement\", node, opts);\n  }\n\n  function assertFunction(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Function\", node, opts);\n  }\n\n  function assertFunctionParent(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionParent\", node, opts);\n  }\n\n  function assertPureish(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Pureish\", node, opts);\n  }\n\n  function assertDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Declaration\", node, opts);\n  }\n\n  function assertPatternLike(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PatternLike\", node, opts);\n  }\n\n  function assertLVal(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"LVal\", node, opts);\n  }\n\n  function assertTSEntityName(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSEntityName\", node, opts);\n  }\n\n  function assertLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Literal\", node, opts);\n  }\n\n  function assertImmutable(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Immutable\", node, opts);\n  }\n\n  function assertUserWhitespacable(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UserWhitespacable\", node, opts);\n  }\n\n  function assertMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Method\", node, opts);\n  }\n\n  function assertObjectMember(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectMember\", node, opts);\n  }\n\n  function assertProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Property\", node, opts);\n  }\n\n  function assertUnaryLike(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UnaryLike\", node, opts);\n  }\n\n  function assertPattern(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Pattern\", node, opts);\n  }\n\n  function assertClass(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Class\", node, opts);\n  }\n\n  function assertModuleDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ModuleDeclaration\", node, opts);\n  }\n\n  function assertExportDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportDeclaration\", node, opts);\n  }\n\n  function assertModuleSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ModuleSpecifier\", node, opts);\n  }\n\n  function assertFlow(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Flow\", node, opts);\n  }\n\n  function assertFlowType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FlowType\", node, opts);\n  }\n\n  function assertFlowBaseAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FlowBaseAnnotation\", node, opts);\n  }\n\n  function assertFlowDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FlowDeclaration\", node, opts);\n  }\n\n  function assertFlowPredicate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FlowPredicate\", node, opts);\n  }\n\n  function assertJSX(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSX\", node, opts);\n  }\n\n  function assertPrivate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Private\", node, opts);\n  }\n\n  function assertTSTypeElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeElement\", node, opts);\n  }\n\n  function assertTSType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSType\", node, opts);\n  }\n\n  function assertNumberLiteral(node, opts) {\n    console.trace(\"The node type NumberLiteral has been renamed to NumericLiteral\");\n    assert(\"NumberLiteral\", node, opts);\n  }\n\n  function assertRegexLiteral(node, opts) {\n    console.trace(\"The node type RegexLiteral has been renamed to RegExpLiteral\");\n    assert(\"RegexLiteral\", node, opts);\n  }\n\n  function assertRestProperty(node, opts) {\n    console.trace(\"The node type RestProperty has been renamed to RestElement\");\n    assert(\"RestProperty\", node, opts);\n  }\n\n  function assertSpreadProperty(node, opts) {\n    console.trace(\"The node type SpreadProperty has been renamed to SpreadElement\");\n    assert(\"SpreadProperty\", node, opts);\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"assertArrayExpression"],[7,31,6,0],[7,34,6,32,"assertArrayExpression"],[7,55,6,0],[8,0,7,0,"exports"],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"assertAssignmentExpression"],[8,36,7,0],[8,39,7,37,"assertAssignmentExpression"],[8,65,7,0],[9,0,8,0,"exports"],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"assertBinaryExpression"],[9,32,8,0],[9,35,8,33,"assertBinaryExpression"],[9,57,8,0],[10,0,9,0,"exports"],[10,2,9,0,"exports"],[10,9,9,7],[10,10,9,8,"assertInterpreterDirective"],[10,36,9,0],[10,39,9,37,"assertInterpreterDirective"],[10,65,9,0],[11,0,10,0,"exports"],[11,2,10,0,"exports"],[11,9,10,7],[11,10,10,8,"assertDirective"],[11,25,10,0],[11,28,10,26,"assertDirective"],[11,43,10,0],[12,0,11,0,"exports"],[12,2,11,0,"exports"],[12,9,11,7],[12,10,11,8,"assertDirectiveLiteral"],[12,32,11,0],[12,35,11,33,"assertDirectiveLiteral"],[12,57,11,0],[13,0,12,0,"exports"],[13,2,12,0,"exports"],[13,9,12,7],[13,10,12,8,"assertBlockStatement"],[13,30,12,0],[13,33,12,31,"assertBlockStatement"],[13,53,12,0],[14,0,13,0,"exports"],[14,2,13,0,"exports"],[14,9,13,7],[14,10,13,8,"assertBreakStatement"],[14,30,13,0],[14,33,13,31,"assertBreakStatement"],[14,53,13,0],[15,0,14,0,"exports"],[15,2,14,0,"exports"],[15,9,14,7],[15,10,14,8,"assertCallExpression"],[15,30,14,0],[15,33,14,31,"assertCallExpression"],[15,53,14,0],[16,0,15,0,"exports"],[16,2,15,0,"exports"],[16,9,15,7],[16,10,15,8,"assertCatchClause"],[16,27,15,0],[16,30,15,28,"assertCatchClause"],[16,47,15,0],[17,0,16,0,"exports"],[17,2,16,0,"exports"],[17,9,16,7],[17,10,16,8,"assertConditionalExpression"],[17,37,16,0],[17,40,16,38,"assertConditionalExpression"],[17,67,16,0],[18,0,17,0,"exports"],[18,2,17,0,"exports"],[18,9,17,7],[18,10,17,8,"assertContinueStatement"],[18,33,17,0],[18,36,17,34,"assertContinueStatement"],[18,59,17,0],[19,0,18,0,"exports"],[19,2,18,0,"exports"],[19,9,18,7],[19,10,18,8,"assertDebuggerStatement"],[19,33,18,0],[19,36,18,34,"assertDebuggerStatement"],[19,59,18,0],[20,0,19,0,"exports"],[20,2,19,0,"exports"],[20,9,19,7],[20,10,19,8,"assertDoWhileStatement"],[20,32,19,0],[20,35,19,33,"assertDoWhileStatement"],[20,57,19,0],[21,0,20,0,"exports"],[21,2,20,0,"exports"],[21,9,20,7],[21,10,20,8,"assertEmptyStatement"],[21,30,20,0],[21,33,20,31,"assertEmptyStatement"],[21,53,20,0],[22,0,21,0,"exports"],[22,2,21,0,"exports"],[22,9,21,7],[22,10,21,8,"assertExpressionStatement"],[22,35,21,0],[22,38,21,36,"assertExpressionStatement"],[22,63,21,0],[23,0,22,0,"exports"],[23,2,22,0,"exports"],[23,9,22,7],[23,10,22,8,"assertFile"],[23,20,22,0],[23,23,22,21,"assertFile"],[23,33,22,0],[24,0,23,0,"exports"],[24,2,23,0,"exports"],[24,9,23,7],[24,10,23,8,"assertForInStatement"],[24,30,23,0],[24,33,23,31,"assertForInStatement"],[24,53,23,0],[25,0,24,0,"exports"],[25,2,24,0,"exports"],[25,9,24,7],[25,10,24,8,"assertForStatement"],[25,28,24,0],[25,31,24,29,"assertForStatement"],[25,49,24,0],[26,0,25,0,"exports"],[26,2,25,0,"exports"],[26,9,25,7],[26,10,25,8,"assertFunctionDeclaration"],[26,35,25,0],[26,38,25,36,"assertFunctionDeclaration"],[26,63,25,0],[27,0,26,0,"exports"],[27,2,26,0,"exports"],[27,9,26,7],[27,10,26,8,"assertFunctionExpression"],[27,34,26,0],[27,37,26,35,"assertFunctionExpression"],[27,61,26,0],[28,0,27,0,"exports"],[28,2,27,0,"exports"],[28,9,27,7],[28,10,27,8,"assertIdentifier"],[28,26,27,0],[28,29,27,27,"assertIdentifier"],[28,45,27,0],[29,0,28,0,"exports"],[29,2,28,0,"exports"],[29,9,28,7],[29,10,28,8,"assertIfStatement"],[29,27,28,0],[29,30,28,28,"assertIfStatement"],[29,47,28,0],[30,0,29,0,"exports"],[30,2,29,0,"exports"],[30,9,29,7],[30,10,29,8,"assertLabeledStatement"],[30,32,29,0],[30,35,29,33,"assertLabeledStatement"],[30,57,29,0],[31,0,30,0,"exports"],[31,2,30,0,"exports"],[31,9,30,7],[31,10,30,8,"assertStringLiteral"],[31,29,30,0],[31,32,30,30,"assertStringLiteral"],[31,51,30,0],[32,0,31,0,"exports"],[32,2,31,0,"exports"],[32,9,31,7],[32,10,31,8,"assertNumericLiteral"],[32,30,31,0],[32,33,31,31,"assertNumericLiteral"],[32,53,31,0],[33,0,32,0,"exports"],[33,2,32,0,"exports"],[33,9,32,7],[33,10,32,8,"assertNullLiteral"],[33,27,32,0],[33,30,32,28,"assertNullLiteral"],[33,47,32,0],[34,0,33,0,"exports"],[34,2,33,0,"exports"],[34,9,33,7],[34,10,33,8,"assertBooleanLiteral"],[34,30,33,0],[34,33,33,31,"assertBooleanLiteral"],[34,53,33,0],[35,0,34,0,"exports"],[35,2,34,0,"exports"],[35,9,34,7],[35,10,34,8,"assertRegExpLiteral"],[35,29,34,0],[35,32,34,30,"assertRegExpLiteral"],[35,51,34,0],[36,0,35,0,"exports"],[36,2,35,0,"exports"],[36,9,35,7],[36,10,35,8,"assertLogicalExpression"],[36,33,35,0],[36,36,35,34,"assertLogicalExpression"],[36,59,35,0],[37,0,36,0,"exports"],[37,2,36,0,"exports"],[37,9,36,7],[37,10,36,8,"assertMemberExpression"],[37,32,36,0],[37,35,36,33,"assertMemberExpression"],[37,57,36,0],[38,0,37,0,"exports"],[38,2,37,0,"exports"],[38,9,37,7],[38,10,37,8,"assertNewExpression"],[38,29,37,0],[38,32,37,30,"assertNewExpression"],[38,51,37,0],[39,0,38,0,"exports"],[39,2,38,0,"exports"],[39,9,38,7],[39,10,38,8,"assertProgram"],[39,23,38,0],[39,26,38,24,"assertProgram"],[39,39,38,0],[40,0,39,0,"exports"],[40,2,39,0,"exports"],[40,9,39,7],[40,10,39,8,"assertObjectExpression"],[40,32,39,0],[40,35,39,33,"assertObjectExpression"],[40,57,39,0],[41,0,40,0,"exports"],[41,2,40,0,"exports"],[41,9,40,7],[41,10,40,8,"assertObjectMethod"],[41,28,40,0],[41,31,40,29,"assertObjectMethod"],[41,49,40,0],[42,0,41,0,"exports"],[42,2,41,0,"exports"],[42,9,41,7],[42,10,41,8,"assertObjectProperty"],[42,30,41,0],[42,33,41,31,"assertObjectProperty"],[42,53,41,0],[43,0,42,0,"exports"],[43,2,42,0,"exports"],[43,9,42,7],[43,10,42,8,"assertRestElement"],[43,27,42,0],[43,30,42,28,"assertRestElement"],[43,47,42,0],[44,0,43,0,"exports"],[44,2,43,0,"exports"],[44,9,43,7],[44,10,43,8,"assertReturnStatement"],[44,31,43,0],[44,34,43,32,"assertReturnStatement"],[44,55,43,0],[45,0,44,0,"exports"],[45,2,44,0,"exports"],[45,9,44,7],[45,10,44,8,"assertSequenceExpression"],[45,34,44,0],[45,37,44,35,"assertSequenceExpression"],[45,61,44,0],[46,0,45,0,"exports"],[46,2,45,0,"exports"],[46,9,45,7],[46,10,45,8,"assertParenthesizedExpression"],[46,39,45,0],[46,42,45,40,"assertParenthesizedExpression"],[46,71,45,0],[47,0,46,0,"exports"],[47,2,46,0,"exports"],[47,9,46,7],[47,10,46,8,"assertSwitchCase"],[47,26,46,0],[47,29,46,27,"assertSwitchCase"],[47,45,46,0],[48,0,47,0,"exports"],[48,2,47,0,"exports"],[48,9,47,7],[48,10,47,8,"assertSwitchStatement"],[48,31,47,0],[48,34,47,32,"assertSwitchStatement"],[48,55,47,0],[49,0,48,0,"exports"],[49,2,48,0,"exports"],[49,9,48,7],[49,10,48,8,"assertThisExpression"],[49,30,48,0],[49,33,48,31,"assertThisExpression"],[49,53,48,0],[50,0,49,0,"exports"],[50,2,49,0,"exports"],[50,9,49,7],[50,10,49,8,"assertThrowStatement"],[50,30,49,0],[50,33,49,31,"assertThrowStatement"],[50,53,49,0],[51,0,50,0,"exports"],[51,2,50,0,"exports"],[51,9,50,7],[51,10,50,8,"assertTryStatement"],[51,28,50,0],[51,31,50,29,"assertTryStatement"],[51,49,50,0],[52,0,51,0,"exports"],[52,2,51,0,"exports"],[52,9,51,7],[52,10,51,8,"assertUnaryExpression"],[52,31,51,0],[52,34,51,32,"assertUnaryExpression"],[52,55,51,0],[53,0,52,0,"exports"],[53,2,52,0,"exports"],[53,9,52,7],[53,10,52,8,"assertUpdateExpression"],[53,32,52,0],[53,35,52,33,"assertUpdateExpression"],[53,57,52,0],[54,0,53,0,"exports"],[54,2,53,0,"exports"],[54,9,53,7],[54,10,53,8,"assertVariableDeclaration"],[54,35,53,0],[54,38,53,36,"assertVariableDeclaration"],[54,63,53,0],[55,0,54,0,"exports"],[55,2,54,0,"exports"],[55,9,54,7],[55,10,54,8,"assertVariableDeclarator"],[55,34,54,0],[55,37,54,35,"assertVariableDeclarator"],[55,61,54,0],[56,0,55,0,"exports"],[56,2,55,0,"exports"],[56,9,55,7],[56,10,55,8,"assertWhileStatement"],[56,30,55,0],[56,33,55,31,"assertWhileStatement"],[56,53,55,0],[57,0,56,0,"exports"],[57,2,56,0,"exports"],[57,9,56,7],[57,10,56,8,"assertWithStatement"],[57,29,56,0],[57,32,56,30,"assertWithStatement"],[57,51,56,0],[58,0,57,0,"exports"],[58,2,57,0,"exports"],[58,9,57,7],[58,10,57,8,"assertAssignmentPattern"],[58,33,57,0],[58,36,57,34,"assertAssignmentPattern"],[58,59,57,0],[59,0,58,0,"exports"],[59,2,58,0,"exports"],[59,9,58,7],[59,10,58,8,"assertArrayPattern"],[59,28,58,0],[59,31,58,29,"assertArrayPattern"],[59,49,58,0],[60,0,59,0,"exports"],[60,2,59,0,"exports"],[60,9,59,7],[60,10,59,8,"assertArrowFunctionExpression"],[60,39,59,0],[60,42,59,40,"assertArrowFunctionExpression"],[60,71,59,0],[61,0,60,0,"exports"],[61,2,60,0,"exports"],[61,9,60,7],[61,10,60,8,"assertClassBody"],[61,25,60,0],[61,28,60,26,"assertClassBody"],[61,43,60,0],[62,0,61,0,"exports"],[62,2,61,0,"exports"],[62,9,61,7],[62,10,61,8,"assertClassDeclaration"],[62,32,61,0],[62,35,61,33,"assertClassDeclaration"],[62,57,61,0],[63,0,62,0,"exports"],[63,2,62,0,"exports"],[63,9,62,7],[63,10,62,8,"assertClassExpression"],[63,31,62,0],[63,34,62,32,"assertClassExpression"],[63,55,62,0],[64,0,63,0,"exports"],[64,2,63,0,"exports"],[64,9,63,7],[64,10,63,8,"assertExportAllDeclaration"],[64,36,63,0],[64,39,63,37,"assertExportAllDeclaration"],[64,65,63,0],[65,0,64,0,"exports"],[65,2,64,0,"exports"],[65,9,64,7],[65,10,64,8,"assertExportDefaultDeclaration"],[65,40,64,0],[65,43,64,41,"assertExportDefaultDeclaration"],[65,73,64,0],[66,0,65,0,"exports"],[66,2,65,0,"exports"],[66,9,65,7],[66,10,65,8,"assertExportNamedDeclaration"],[66,38,65,0],[66,41,65,39,"assertExportNamedDeclaration"],[66,69,65,0],[67,0,66,0,"exports"],[67,2,66,0,"exports"],[67,9,66,7],[67,10,66,8,"assertExportSpecifier"],[67,31,66,0],[67,34,66,32,"assertExportSpecifier"],[67,55,66,0],[68,0,67,0,"exports"],[68,2,67,0,"exports"],[68,9,67,7],[68,10,67,8,"assertForOfStatement"],[68,30,67,0],[68,33,67,31,"assertForOfStatement"],[68,53,67,0],[69,0,68,0,"exports"],[69,2,68,0,"exports"],[69,9,68,7],[69,10,68,8,"assertImportDeclaration"],[69,33,68,0],[69,36,68,34,"assertImportDeclaration"],[69,59,68,0],[70,0,69,0,"exports"],[70,2,69,0,"exports"],[70,9,69,7],[70,10,69,8,"assertImportDefaultSpecifier"],[70,38,69,0],[70,41,69,39,"assertImportDefaultSpecifier"],[70,69,69,0],[71,0,70,0,"exports"],[71,2,70,0,"exports"],[71,9,70,7],[71,10,70,8,"assertImportNamespaceSpecifier"],[71,40,70,0],[71,43,70,41,"assertImportNamespaceSpecifier"],[71,73,70,0],[72,0,71,0,"exports"],[72,2,71,0,"exports"],[72,9,71,7],[72,10,71,8,"assertImportSpecifier"],[72,31,71,0],[72,34,71,32,"assertImportSpecifier"],[72,55,71,0],[73,0,72,0,"exports"],[73,2,72,0,"exports"],[73,9,72,7],[73,10,72,8,"assertMetaProperty"],[73,28,72,0],[73,31,72,29,"assertMetaProperty"],[73,49,72,0],[74,0,73,0,"exports"],[74,2,73,0,"exports"],[74,9,73,7],[74,10,73,8,"assertClassMethod"],[74,27,73,0],[74,30,73,28,"assertClassMethod"],[74,47,73,0],[75,0,74,0,"exports"],[75,2,74,0,"exports"],[75,9,74,7],[75,10,74,8,"assertObjectPattern"],[75,29,74,0],[75,32,74,30,"assertObjectPattern"],[75,51,74,0],[76,0,75,0,"exports"],[76,2,75,0,"exports"],[76,9,75,7],[76,10,75,8,"assertSpreadElement"],[76,29,75,0],[76,32,75,30,"assertSpreadElement"],[76,51,75,0],[77,0,76,0,"exports"],[77,2,76,0,"exports"],[77,9,76,7],[77,10,76,8,"assertSuper"],[77,21,76,0],[77,24,76,22,"assertSuper"],[77,35,76,0],[78,0,77,0,"exports"],[78,2,77,0,"exports"],[78,9,77,7],[78,10,77,8,"assertTaggedTemplateExpression"],[78,40,77,0],[78,43,77,41,"assertTaggedTemplateExpression"],[78,73,77,0],[79,0,78,0,"exports"],[79,2,78,0,"exports"],[79,9,78,7],[79,10,78,8,"assertTemplateElement"],[79,31,78,0],[79,34,78,32,"assertTemplateElement"],[79,55,78,0],[80,0,79,0,"exports"],[80,2,79,0,"exports"],[80,9,79,7],[80,10,79,8,"assertTemplateLiteral"],[80,31,79,0],[80,34,79,32,"assertTemplateLiteral"],[80,55,79,0],[81,0,80,0,"exports"],[81,2,80,0,"exports"],[81,9,80,7],[81,10,80,8,"assertYieldExpression"],[81,31,80,0],[81,34,80,32,"assertYieldExpression"],[81,55,80,0],[82,0,81,0,"exports"],[82,2,81,0,"exports"],[82,9,81,7],[82,10,81,8,"assertAnyTypeAnnotation"],[82,33,81,0],[82,36,81,34,"assertAnyTypeAnnotation"],[82,59,81,0],[83,0,82,0,"exports"],[83,2,82,0,"exports"],[83,9,82,7],[83,10,82,8,"assertArrayTypeAnnotation"],[83,35,82,0],[83,38,82,36,"assertArrayTypeAnnotation"],[83,63,82,0],[84,0,83,0,"exports"],[84,2,83,0,"exports"],[84,9,83,7],[84,10,83,8,"assertBooleanTypeAnnotation"],[84,37,83,0],[84,40,83,38,"assertBooleanTypeAnnotation"],[84,67,83,0],[85,0,84,0,"exports"],[85,2,84,0,"exports"],[85,9,84,7],[85,10,84,8,"assertBooleanLiteralTypeAnnotation"],[85,44,84,0],[85,47,84,45,"assertBooleanLiteralTypeAnnotation"],[85,81,84,0],[86,0,85,0,"exports"],[86,2,85,0,"exports"],[86,9,85,7],[86,10,85,8,"assertNullLiteralTypeAnnotation"],[86,41,85,0],[86,44,85,42,"assertNullLiteralTypeAnnotation"],[86,75,85,0],[87,0,86,0,"exports"],[87,2,86,0,"exports"],[87,9,86,7],[87,10,86,8,"assertClassImplements"],[87,31,86,0],[87,34,86,32,"assertClassImplements"],[87,55,86,0],[88,0,87,0,"exports"],[88,2,87,0,"exports"],[88,9,87,7],[88,10,87,8,"assertDeclareClass"],[88,28,87,0],[88,31,87,29,"assertDeclareClass"],[88,49,87,0],[89,0,88,0,"exports"],[89,2,88,0,"exports"],[89,9,88,7],[89,10,88,8,"assertDeclareFunction"],[89,31,88,0],[89,34,88,32,"assertDeclareFunction"],[89,55,88,0],[90,0,89,0,"exports"],[90,2,89,0,"exports"],[90,9,89,7],[90,10,89,8,"assertDeclareInterface"],[90,32,89,0],[90,35,89,33,"assertDeclareInterface"],[90,57,89,0],[91,0,90,0,"exports"],[91,2,90,0,"exports"],[91,9,90,7],[91,10,90,8,"assertDeclareModule"],[91,29,90,0],[91,32,90,30,"assertDeclareModule"],[91,51,90,0],[92,0,91,0,"exports"],[92,2,91,0,"exports"],[92,9,91,7],[92,10,91,8,"assertDeclareModuleExports"],[92,36,91,0],[92,39,91,37,"assertDeclareModuleExports"],[92,65,91,0],[93,0,92,0,"exports"],[93,2,92,0,"exports"],[93,9,92,7],[93,10,92,8,"assertDeclareTypeAlias"],[93,32,92,0],[93,35,92,33,"assertDeclareTypeAlias"],[93,57,92,0],[94,0,93,0,"exports"],[94,2,93,0,"exports"],[94,9,93,7],[94,10,93,8,"assertDeclareOpaqueType"],[94,33,93,0],[94,36,93,34,"assertDeclareOpaqueType"],[94,59,93,0],[95,0,94,0,"exports"],[95,2,94,0,"exports"],[95,9,94,7],[95,10,94,8,"assertDeclareVariable"],[95,31,94,0],[95,34,94,32,"assertDeclareVariable"],[95,55,94,0],[96,0,95,0,"exports"],[96,2,95,0,"exports"],[96,9,95,7],[96,10,95,8,"assertDeclareExportDeclaration"],[96,40,95,0],[96,43,95,41,"assertDeclareExportDeclaration"],[96,73,95,0],[97,0,96,0,"exports"],[97,2,96,0,"exports"],[97,9,96,7],[97,10,96,8,"assertDeclareExportAllDeclaration"],[97,43,96,0],[97,46,96,44,"assertDeclareExportAllDeclaration"],[97,79,96,0],[98,0,97,0,"exports"],[98,2,97,0,"exports"],[98,9,97,7],[98,10,97,8,"assertDeclaredPredicate"],[98,33,97,0],[98,36,97,34,"assertDeclaredPredicate"],[98,59,97,0],[99,0,98,0,"exports"],[99,2,98,0,"exports"],[99,9,98,7],[99,10,98,8,"assertExistsTypeAnnotation"],[99,36,98,0],[99,39,98,37,"assertExistsTypeAnnotation"],[99,65,98,0],[100,0,99,0,"exports"],[100,2,99,0,"exports"],[100,9,99,7],[100,10,99,8,"assertFunctionTypeAnnotation"],[100,38,99,0],[100,41,99,39,"assertFunctionTypeAnnotation"],[100,69,99,0],[101,0,100,0,"exports"],[101,2,100,0,"exports"],[101,9,100,7],[101,10,100,8,"assertFunctionTypeParam"],[101,33,100,0],[101,36,100,34,"assertFunctionTypeParam"],[101,59,100,0],[102,0,101,0,"exports"],[102,2,101,0,"exports"],[102,9,101,7],[102,10,101,8,"assertGenericTypeAnnotation"],[102,37,101,0],[102,40,101,38,"assertGenericTypeAnnotation"],[102,67,101,0],[103,0,102,0,"exports"],[103,2,102,0,"exports"],[103,9,102,7],[103,10,102,8,"assertInferredPredicate"],[103,33,102,0],[103,36,102,34,"assertInferredPredicate"],[103,59,102,0],[104,0,103,0,"exports"],[104,2,103,0,"exports"],[104,9,103,7],[104,10,103,8,"assertInterfaceExtends"],[104,32,103,0],[104,35,103,33,"assertInterfaceExtends"],[104,57,103,0],[105,0,104,0,"exports"],[105,2,104,0,"exports"],[105,9,104,7],[105,10,104,8,"assertInterfaceDeclaration"],[105,36,104,0],[105,39,104,37,"assertInterfaceDeclaration"],[105,65,104,0],[106,0,105,0,"exports"],[106,2,105,0,"exports"],[106,9,105,7],[106,10,105,8,"assertInterfaceTypeAnnotation"],[106,39,105,0],[106,42,105,40,"assertInterfaceTypeAnnotation"],[106,71,105,0],[107,0,106,0,"exports"],[107,2,106,0,"exports"],[107,9,106,7],[107,10,106,8,"assertIntersectionTypeAnnotation"],[107,42,106,0],[107,45,106,43,"assertIntersectionTypeAnnotation"],[107,77,106,0],[108,0,107,0,"exports"],[108,2,107,0,"exports"],[108,9,107,7],[108,10,107,8,"assertMixedTypeAnnotation"],[108,35,107,0],[108,38,107,36,"assertMixedTypeAnnotation"],[108,63,107,0],[109,0,108,0,"exports"],[109,2,108,0,"exports"],[109,9,108,7],[109,10,108,8,"assertEmptyTypeAnnotation"],[109,35,108,0],[109,38,108,36,"assertEmptyTypeAnnotation"],[109,63,108,0],[110,0,109,0,"exports"],[110,2,109,0,"exports"],[110,9,109,7],[110,10,109,8,"assertNullableTypeAnnotation"],[110,38,109,0],[110,41,109,39,"assertNullableTypeAnnotation"],[110,69,109,0],[111,0,110,0,"exports"],[111,2,110,0,"exports"],[111,9,110,7],[111,10,110,8,"assertNumberLiteralTypeAnnotation"],[111,43,110,0],[111,46,110,44,"assertNumberLiteralTypeAnnotation"],[111,79,110,0],[112,0,111,0,"exports"],[112,2,111,0,"exports"],[112,9,111,7],[112,10,111,8,"assertNumberTypeAnnotation"],[112,36,111,0],[112,39,111,37,"assertNumberTypeAnnotation"],[112,65,111,0],[113,0,112,0,"exports"],[113,2,112,0,"exports"],[113,9,112,7],[113,10,112,8,"assertObjectTypeAnnotation"],[113,36,112,0],[113,39,112,37,"assertObjectTypeAnnotation"],[113,65,112,0],[114,0,113,0,"exports"],[114,2,113,0,"exports"],[114,9,113,7],[114,10,113,8,"assertObjectTypeInternalSlot"],[114,38,113,0],[114,41,113,39,"assertObjectTypeInternalSlot"],[114,69,113,0],[115,0,114,0,"exports"],[115,2,114,0,"exports"],[115,9,114,7],[115,10,114,8,"assertObjectTypeCallProperty"],[115,38,114,0],[115,41,114,39,"assertObjectTypeCallProperty"],[115,69,114,0],[116,0,115,0,"exports"],[116,2,115,0,"exports"],[116,9,115,7],[116,10,115,8,"assertObjectTypeIndexer"],[116,33,115,0],[116,36,115,34,"assertObjectTypeIndexer"],[116,59,115,0],[117,0,116,0,"exports"],[117,2,116,0,"exports"],[117,9,116,7],[117,10,116,8,"assertObjectTypeProperty"],[117,34,116,0],[117,37,116,35,"assertObjectTypeProperty"],[117,61,116,0],[118,0,117,0,"exports"],[118,2,117,0,"exports"],[118,9,117,7],[118,10,117,8,"assertObjectTypeSpreadProperty"],[118,40,117,0],[118,43,117,41,"assertObjectTypeSpreadProperty"],[118,73,117,0],[119,0,118,0,"exports"],[119,2,118,0,"exports"],[119,9,118,7],[119,10,118,8,"assertOpaqueType"],[119,26,118,0],[119,29,118,27,"assertOpaqueType"],[119,45,118,0],[120,0,119,0,"exports"],[120,2,119,0,"exports"],[120,9,119,7],[120,10,119,8,"assertQualifiedTypeIdentifier"],[120,39,119,0],[120,42,119,40,"assertQualifiedTypeIdentifier"],[120,71,119,0],[121,0,120,0,"exports"],[121,2,120,0,"exports"],[121,9,120,7],[121,10,120,8,"assertStringLiteralTypeAnnotation"],[121,43,120,0],[121,46,120,44,"assertStringLiteralTypeAnnotation"],[121,79,120,0],[122,0,121,0,"exports"],[122,2,121,0,"exports"],[122,9,121,7],[122,10,121,8,"assertStringTypeAnnotation"],[122,36,121,0],[122,39,121,37,"assertStringTypeAnnotation"],[122,65,121,0],[123,0,122,0,"exports"],[123,2,122,0,"exports"],[123,9,122,7],[123,10,122,8,"assertThisTypeAnnotation"],[123,34,122,0],[123,37,122,35,"assertThisTypeAnnotation"],[123,61,122,0],[124,0,123,0,"exports"],[124,2,123,0,"exports"],[124,9,123,7],[124,10,123,8,"assertTupleTypeAnnotation"],[124,35,123,0],[124,38,123,36,"assertTupleTypeAnnotation"],[124,63,123,0],[125,0,124,0,"exports"],[125,2,124,0,"exports"],[125,9,124,7],[125,10,124,8,"assertTypeofTypeAnnotation"],[125,36,124,0],[125,39,124,37,"assertTypeofTypeAnnotation"],[125,65,124,0],[126,0,125,0,"exports"],[126,2,125,0,"exports"],[126,9,125,7],[126,10,125,8,"assertTypeAlias"],[126,25,125,0],[126,28,125,26,"assertTypeAlias"],[126,43,125,0],[127,0,126,0,"exports"],[127,2,126,0,"exports"],[127,9,126,7],[127,10,126,8,"assertTypeAnnotation"],[127,30,126,0],[127,33,126,31,"assertTypeAnnotation"],[127,53,126,0],[128,0,127,0,"exports"],[128,2,127,0,"exports"],[128,9,127,7],[128,10,127,8,"assertTypeCastExpression"],[128,34,127,0],[128,37,127,35,"assertTypeCastExpression"],[128,61,127,0],[129,0,128,0,"exports"],[129,2,128,0,"exports"],[129,9,128,7],[129,10,128,8,"assertTypeParameter"],[129,29,128,0],[129,32,128,30,"assertTypeParameter"],[129,51,128,0],[130,0,129,0,"exports"],[130,2,129,0,"exports"],[130,9,129,7],[130,10,129,8,"assertTypeParameterDeclaration"],[130,40,129,0],[130,43,129,41,"assertTypeParameterDeclaration"],[130,73,129,0],[131,0,130,0,"exports"],[131,2,130,0,"exports"],[131,9,130,7],[131,10,130,8,"assertTypeParameterInstantiation"],[131,42,130,0],[131,45,130,43,"assertTypeParameterInstantiation"],[131,77,130,0],[132,0,131,0,"exports"],[132,2,131,0,"exports"],[132,9,131,7],[132,10,131,8,"assertUnionTypeAnnotation"],[132,35,131,0],[132,38,131,36,"assertUnionTypeAnnotation"],[132,63,131,0],[133,0,132,0,"exports"],[133,2,132,0,"exports"],[133,9,132,7],[133,10,132,8,"assertVariance"],[133,24,132,0],[133,27,132,25,"assertVariance"],[133,41,132,0],[134,0,133,0,"exports"],[134,2,133,0,"exports"],[134,9,133,7],[134,10,133,8,"assertVoidTypeAnnotation"],[134,34,133,0],[134,37,133,35,"assertVoidTypeAnnotation"],[134,61,133,0],[135,0,134,0,"exports"],[135,2,134,0,"exports"],[135,9,134,7],[135,10,134,8,"assertJSXAttribute"],[135,28,134,0],[135,31,134,29,"assertJSXAttribute"],[135,49,134,0],[136,0,135,0,"exports"],[136,2,135,0,"exports"],[136,9,135,7],[136,10,135,8,"assertJSXClosingElement"],[136,33,135,0],[136,36,135,34,"assertJSXClosingElement"],[136,59,135,0],[137,0,136,0,"exports"],[137,2,136,0,"exports"],[137,9,136,7],[137,10,136,8,"assertJSXElement"],[137,26,136,0],[137,29,136,27,"assertJSXElement"],[137,45,136,0],[138,0,137,0,"exports"],[138,2,137,0,"exports"],[138,9,137,7],[138,10,137,8,"assertJSXEmptyExpression"],[138,34,137,0],[138,37,137,35,"assertJSXEmptyExpression"],[138,61,137,0],[139,0,138,0,"exports"],[139,2,138,0,"exports"],[139,9,138,7],[139,10,138,8,"assertJSXExpressionContainer"],[139,38,138,0],[139,41,138,39,"assertJSXExpressionContainer"],[139,69,138,0],[140,0,139,0,"exports"],[140,2,139,0,"exports"],[140,9,139,7],[140,10,139,8,"assertJSXSpreadChild"],[140,30,139,0],[140,33,139,31,"assertJSXSpreadChild"],[140,53,139,0],[141,0,140,0,"exports"],[141,2,140,0,"exports"],[141,9,140,7],[141,10,140,8,"assertJSXIdentifier"],[141,29,140,0],[141,32,140,30,"assertJSXIdentifier"],[141,51,140,0],[142,0,141,0,"exports"],[142,2,141,0,"exports"],[142,9,141,7],[142,10,141,8,"assertJSXMemberExpression"],[142,35,141,0],[142,38,141,36,"assertJSXMemberExpression"],[142,63,141,0],[143,0,142,0,"exports"],[143,2,142,0,"exports"],[143,9,142,7],[143,10,142,8,"assertJSXNamespacedName"],[143,33,142,0],[143,36,142,34,"assertJSXNamespacedName"],[143,59,142,0],[144,0,143,0,"exports"],[144,2,143,0,"exports"],[144,9,143,7],[144,10,143,8,"assertJSXOpeningElement"],[144,33,143,0],[144,36,143,34,"assertJSXOpeningElement"],[144,59,143,0],[145,0,144,0,"exports"],[145,2,144,0,"exports"],[145,9,144,7],[145,10,144,8,"assertJSXSpreadAttribute"],[145,34,144,0],[145,37,144,35,"assertJSXSpreadAttribute"],[145,61,144,0],[146,0,145,0,"exports"],[146,2,145,0,"exports"],[146,9,145,7],[146,10,145,8,"assertJSXText"],[146,23,145,0],[146,26,145,24,"assertJSXText"],[146,39,145,0],[147,0,146,0,"exports"],[147,2,146,0,"exports"],[147,9,146,7],[147,10,146,8,"assertJSXFragment"],[147,27,146,0],[147,30,146,28,"assertJSXFragment"],[147,47,146,0],[148,0,147,0,"exports"],[148,2,147,0,"exports"],[148,9,147,7],[148,10,147,8,"assertJSXOpeningFragment"],[148,34,147,0],[148,37,147,35,"assertJSXOpeningFragment"],[148,61,147,0],[149,0,148,0,"exports"],[149,2,148,0,"exports"],[149,9,148,7],[149,10,148,8,"assertJSXClosingFragment"],[149,34,148,0],[149,37,148,35,"assertJSXClosingFragment"],[149,61,148,0],[150,0,149,0,"exports"],[150,2,149,0,"exports"],[150,9,149,7],[150,10,149,8,"assertNoop"],[150,20,149,0],[150,23,149,21,"assertNoop"],[150,33,149,0],[151,0,150,0,"exports"],[151,2,150,0,"exports"],[151,9,150,7],[151,10,150,8,"assertPlaceholder"],[151,27,150,0],[151,30,150,28,"assertPlaceholder"],[151,47,150,0],[152,0,151,0,"exports"],[152,2,151,0,"exports"],[152,9,151,7],[152,10,151,8,"assertV8IntrinsicIdentifier"],[152,37,151,0],[152,40,151,38,"assertV8IntrinsicIdentifier"],[152,67,151,0],[153,0,152,0,"exports"],[153,2,152,0,"exports"],[153,9,152,7],[153,10,152,8,"assertArgumentPlaceholder"],[153,35,152,0],[153,38,152,36,"assertArgumentPlaceholder"],[153,63,152,0],[154,0,153,0,"exports"],[154,2,153,0,"exports"],[154,9,153,7],[154,10,153,8,"assertAwaitExpression"],[154,31,153,0],[154,34,153,32,"assertAwaitExpression"],[154,55,153,0],[155,0,154,0,"exports"],[155,2,154,0,"exports"],[155,9,154,7],[155,10,154,8,"assertBindExpression"],[155,30,154,0],[155,33,154,31,"assertBindExpression"],[155,53,154,0],[156,0,155,0,"exports"],[156,2,155,0,"exports"],[156,9,155,7],[156,10,155,8,"assertClassProperty"],[156,29,155,0],[156,32,155,30,"assertClassProperty"],[156,51,155,0],[157,0,156,0,"exports"],[157,2,156,0,"exports"],[157,9,156,7],[157,10,156,8,"assertOptionalMemberExpression"],[157,40,156,0],[157,43,156,41,"assertOptionalMemberExpression"],[157,73,156,0],[158,0,157,0,"exports"],[158,2,157,0,"exports"],[158,9,157,7],[158,10,157,8,"assertPipelineTopicExpression"],[158,39,157,0],[158,42,157,40,"assertPipelineTopicExpression"],[158,71,157,0],[159,0,158,0,"exports"],[159,2,158,0,"exports"],[159,9,158,7],[159,10,158,8,"assertPipelineBareFunction"],[159,36,158,0],[159,39,158,37,"assertPipelineBareFunction"],[159,65,158,0],[160,0,159,0,"exports"],[160,2,159,0,"exports"],[160,9,159,7],[160,10,159,8,"assertPipelinePrimaryTopicReference"],[160,45,159,0],[160,48,159,46,"assertPipelinePrimaryTopicReference"],[160,83,159,0],[161,0,160,0,"exports"],[161,2,160,0,"exports"],[161,9,160,7],[161,10,160,8,"assertOptionalCallExpression"],[161,38,160,0],[161,41,160,39,"assertOptionalCallExpression"],[161,69,160,0],[162,0,161,0,"exports"],[162,2,161,0,"exports"],[162,9,161,7],[162,10,161,8,"assertClassPrivateProperty"],[162,36,161,0],[162,39,161,37,"assertClassPrivateProperty"],[162,65,161,0],[163,0,162,0,"exports"],[163,2,162,0,"exports"],[163,9,162,7],[163,10,162,8,"assertClassPrivateMethod"],[163,34,162,0],[163,37,162,35,"assertClassPrivateMethod"],[163,61,162,0],[164,0,163,0,"exports"],[164,2,163,0,"exports"],[164,9,163,7],[164,10,163,8,"assertImport"],[164,22,163,0],[164,25,163,23,"assertImport"],[164,37,163,0],[165,0,164,0,"exports"],[165,2,164,0,"exports"],[165,9,164,7],[165,10,164,8,"assertDecorator"],[165,25,164,0],[165,28,164,26,"assertDecorator"],[165,43,164,0],[166,0,165,0,"exports"],[166,2,165,0,"exports"],[166,9,165,7],[166,10,165,8,"assertDoExpression"],[166,28,165,0],[166,31,165,29,"assertDoExpression"],[166,49,165,0],[167,0,166,0,"exports"],[167,2,166,0,"exports"],[167,9,166,7],[167,10,166,8,"assertExportDefaultSpecifier"],[167,38,166,0],[167,41,166,39,"assertExportDefaultSpecifier"],[167,69,166,0],[168,0,167,0,"exports"],[168,2,167,0,"exports"],[168,9,167,7],[168,10,167,8,"assertExportNamespaceSpecifier"],[168,40,167,0],[168,43,167,41,"assertExportNamespaceSpecifier"],[168,73,167,0],[169,0,168,0,"exports"],[169,2,168,0,"exports"],[169,9,168,7],[169,10,168,8,"assertPrivateName"],[169,27,168,0],[169,30,168,28,"assertPrivateName"],[169,47,168,0],[170,0,169,0,"exports"],[170,2,169,0,"exports"],[170,9,169,7],[170,10,169,8,"assertBigIntLiteral"],[170,29,169,0],[170,32,169,30,"assertBigIntLiteral"],[170,51,169,0],[171,0,170,0,"exports"],[171,2,170,0,"exports"],[171,9,170,7],[171,10,170,8,"assertTSParameterProperty"],[171,35,170,0],[171,38,170,36,"assertTSParameterProperty"],[171,63,170,0],[172,0,171,0,"exports"],[172,2,171,0,"exports"],[172,9,171,7],[172,10,171,8,"assertTSDeclareFunction"],[172,33,171,0],[172,36,171,34,"assertTSDeclareFunction"],[172,59,171,0],[173,0,172,0,"exports"],[173,2,172,0,"exports"],[173,9,172,7],[173,10,172,8,"assertTSDeclareMethod"],[173,31,172,0],[173,34,172,32,"assertTSDeclareMethod"],[173,55,172,0],[174,0,173,0,"exports"],[174,2,173,0,"exports"],[174,9,173,7],[174,10,173,8,"assertTSQualifiedName"],[174,31,173,0],[174,34,173,32,"assertTSQualifiedName"],[174,55,173,0],[175,0,174,0,"exports"],[175,2,174,0,"exports"],[175,9,174,7],[175,10,174,8,"assertTSCallSignatureDeclaration"],[175,42,174,0],[175,45,174,43,"assertTSCallSignatureDeclaration"],[175,77,174,0],[176,0,175,0,"exports"],[176,2,175,0,"exports"],[176,9,175,7],[176,10,175,8,"assertTSConstructSignatureDeclaration"],[176,47,175,0],[176,50,175,48,"assertTSConstructSignatureDeclaration"],[176,87,175,0],[177,0,176,0,"exports"],[177,2,176,0,"exports"],[177,9,176,7],[177,10,176,8,"assertTSPropertySignature"],[177,35,176,0],[177,38,176,36,"assertTSPropertySignature"],[177,63,176,0],[178,0,177,0,"exports"],[178,2,177,0,"exports"],[178,9,177,7],[178,10,177,8,"assertTSMethodSignature"],[178,33,177,0],[178,36,177,34,"assertTSMethodSignature"],[178,59,177,0],[179,0,178,0,"exports"],[179,2,178,0,"exports"],[179,9,178,7],[179,10,178,8,"assertTSIndexSignature"],[179,32,178,0],[179,35,178,33,"assertTSIndexSignature"],[179,57,178,0],[180,0,179,0,"exports"],[180,2,179,0,"exports"],[180,9,179,7],[180,10,179,8,"assertTSAnyKeyword"],[180,28,179,0],[180,31,179,29,"assertTSAnyKeyword"],[180,49,179,0],[181,0,180,0,"exports"],[181,2,180,0,"exports"],[181,9,180,7],[181,10,180,8,"assertTSBooleanKeyword"],[181,32,180,0],[181,35,180,33,"assertTSBooleanKeyword"],[181,57,180,0],[182,0,181,0,"exports"],[182,2,181,0,"exports"],[182,9,181,7],[182,10,181,8,"assertTSBigIntKeyword"],[182,31,181,0],[182,34,181,32,"assertTSBigIntKeyword"],[182,55,181,0],[183,0,182,0,"exports"],[183,2,182,0,"exports"],[183,9,182,7],[183,10,182,8,"assertTSNeverKeyword"],[183,30,182,0],[183,33,182,31,"assertTSNeverKeyword"],[183,53,182,0],[184,0,183,0,"exports"],[184,2,183,0,"exports"],[184,9,183,7],[184,10,183,8,"assertTSNullKeyword"],[184,29,183,0],[184,32,183,30,"assertTSNullKeyword"],[184,51,183,0],[185,0,184,0,"exports"],[185,2,184,0,"exports"],[185,9,184,7],[185,10,184,8,"assertTSNumberKeyword"],[185,31,184,0],[185,34,184,32,"assertTSNumberKeyword"],[185,55,184,0],[186,0,185,0,"exports"],[186,2,185,0,"exports"],[186,9,185,7],[186,10,185,8,"assertTSObjectKeyword"],[186,31,185,0],[186,34,185,32,"assertTSObjectKeyword"],[186,55,185,0],[187,0,186,0,"exports"],[187,2,186,0,"exports"],[187,9,186,7],[187,10,186,8,"assertTSStringKeyword"],[187,31,186,0],[187,34,186,32,"assertTSStringKeyword"],[187,55,186,0],[188,0,187,0,"exports"],[188,2,187,0,"exports"],[188,9,187,7],[188,10,187,8,"assertTSSymbolKeyword"],[188,31,187,0],[188,34,187,32,"assertTSSymbolKeyword"],[188,55,187,0],[189,0,188,0,"exports"],[189,2,188,0,"exports"],[189,9,188,7],[189,10,188,8,"assertTSUndefinedKeyword"],[189,34,188,0],[189,37,188,35,"assertTSUndefinedKeyword"],[189,61,188,0],[190,0,189,0,"exports"],[190,2,189,0,"exports"],[190,9,189,7],[190,10,189,8,"assertTSUnknownKeyword"],[190,32,189,0],[190,35,189,33,"assertTSUnknownKeyword"],[190,57,189,0],[191,0,190,0,"exports"],[191,2,190,0,"exports"],[191,9,190,7],[191,10,190,8,"assertTSVoidKeyword"],[191,29,190,0],[191,32,190,30,"assertTSVoidKeyword"],[191,51,190,0],[192,0,191,0,"exports"],[192,2,191,0,"exports"],[192,9,191,7],[192,10,191,8,"assertTSThisType"],[192,26,191,0],[192,29,191,27,"assertTSThisType"],[192,45,191,0],[193,0,192,0,"exports"],[193,2,192,0,"exports"],[193,9,192,7],[193,10,192,8,"assertTSFunctionType"],[193,30,192,0],[193,33,192,31,"assertTSFunctionType"],[193,53,192,0],[194,0,193,0,"exports"],[194,2,193,0,"exports"],[194,9,193,7],[194,10,193,8,"assertTSConstructorType"],[194,33,193,0],[194,36,193,34,"assertTSConstructorType"],[194,59,193,0],[195,0,194,0,"exports"],[195,2,194,0,"exports"],[195,9,194,7],[195,10,194,8,"assertTSTypeReference"],[195,31,194,0],[195,34,194,32,"assertTSTypeReference"],[195,55,194,0],[196,0,195,0,"exports"],[196,2,195,0,"exports"],[196,9,195,7],[196,10,195,8,"assertTSTypePredicate"],[196,31,195,0],[196,34,195,32,"assertTSTypePredicate"],[196,55,195,0],[197,0,196,0,"exports"],[197,2,196,0,"exports"],[197,9,196,7],[197,10,196,8,"assertTSTypeQuery"],[197,27,196,0],[197,30,196,28,"assertTSTypeQuery"],[197,47,196,0],[198,0,197,0,"exports"],[198,2,197,0,"exports"],[198,9,197,7],[198,10,197,8,"assertTSTypeLiteral"],[198,29,197,0],[198,32,197,30,"assertTSTypeLiteral"],[198,51,197,0],[199,0,198,0,"exports"],[199,2,198,0,"exports"],[199,9,198,7],[199,10,198,8,"assertTSArrayType"],[199,27,198,0],[199,30,198,28,"assertTSArrayType"],[199,47,198,0],[200,0,199,0,"exports"],[200,2,199,0,"exports"],[200,9,199,7],[200,10,199,8,"assertTSTupleType"],[200,27,199,0],[200,30,199,28,"assertTSTupleType"],[200,47,199,0],[201,0,200,0,"exports"],[201,2,200,0,"exports"],[201,9,200,7],[201,10,200,8,"assertTSOptionalType"],[201,30,200,0],[201,33,200,31,"assertTSOptionalType"],[201,53,200,0],[202,0,201,0,"exports"],[202,2,201,0,"exports"],[202,9,201,7],[202,10,201,8,"assertTSRestType"],[202,26,201,0],[202,29,201,27,"assertTSRestType"],[202,45,201,0],[203,0,202,0,"exports"],[203,2,202,0,"exports"],[203,9,202,7],[203,10,202,8,"assertTSUnionType"],[203,27,202,0],[203,30,202,28,"assertTSUnionType"],[203,47,202,0],[204,0,203,0,"exports"],[204,2,203,0,"exports"],[204,9,203,7],[204,10,203,8,"assertTSIntersectionType"],[204,34,203,0],[204,37,203,35,"assertTSIntersectionType"],[204,61,203,0],[205,0,204,0,"exports"],[205,2,204,0,"exports"],[205,9,204,7],[205,10,204,8,"assertTSConditionalType"],[205,33,204,0],[205,36,204,34,"assertTSConditionalType"],[205,59,204,0],[206,0,205,0,"exports"],[206,2,205,0,"exports"],[206,9,205,7],[206,10,205,8,"assertTSInferType"],[206,27,205,0],[206,30,205,28,"assertTSInferType"],[206,47,205,0],[207,0,206,0,"exports"],[207,2,206,0,"exports"],[207,9,206,7],[207,10,206,8,"assertTSParenthesizedType"],[207,35,206,0],[207,38,206,36,"assertTSParenthesizedType"],[207,63,206,0],[208,0,207,0,"exports"],[208,2,207,0,"exports"],[208,9,207,7],[208,10,207,8,"assertTSTypeOperator"],[208,30,207,0],[208,33,207,31,"assertTSTypeOperator"],[208,53,207,0],[209,0,208,0,"exports"],[209,2,208,0,"exports"],[209,9,208,7],[209,10,208,8,"assertTSIndexedAccessType"],[209,35,208,0],[209,38,208,36,"assertTSIndexedAccessType"],[209,63,208,0],[210,0,209,0,"exports"],[210,2,209,0,"exports"],[210,9,209,7],[210,10,209,8,"assertTSMappedType"],[210,28,209,0],[210,31,209,29,"assertTSMappedType"],[210,49,209,0],[211,0,210,0,"exports"],[211,2,210,0,"exports"],[211,9,210,7],[211,10,210,8,"assertTSLiteralType"],[211,29,210,0],[211,32,210,30,"assertTSLiteralType"],[211,51,210,0],[212,0,211,0,"exports"],[212,2,211,0,"exports"],[212,9,211,7],[212,10,211,8,"assertTSExpressionWithTypeArguments"],[212,45,211,0],[212,48,211,46,"assertTSExpressionWithTypeArguments"],[212,83,211,0],[213,0,212,0,"exports"],[213,2,212,0,"exports"],[213,9,212,7],[213,10,212,8,"assertTSInterfaceDeclaration"],[213,38,212,0],[213,41,212,39,"assertTSInterfaceDeclaration"],[213,69,212,0],[214,0,213,0,"exports"],[214,2,213,0,"exports"],[214,9,213,7],[214,10,213,8,"assertTSInterfaceBody"],[214,31,213,0],[214,34,213,32,"assertTSInterfaceBody"],[214,55,213,0],[215,0,214,0,"exports"],[215,2,214,0,"exports"],[215,9,214,7],[215,10,214,8,"assertTSTypeAliasDeclaration"],[215,38,214,0],[215,41,214,39,"assertTSTypeAliasDeclaration"],[215,69,214,0],[216,0,215,0,"exports"],[216,2,215,0,"exports"],[216,9,215,7],[216,10,215,8,"assertTSAsExpression"],[216,30,215,0],[216,33,215,31,"assertTSAsExpression"],[216,53,215,0],[217,0,216,0,"exports"],[217,2,216,0,"exports"],[217,9,216,7],[217,10,216,8,"assertTSTypeAssertion"],[217,31,216,0],[217,34,216,32,"assertTSTypeAssertion"],[217,55,216,0],[218,0,217,0,"exports"],[218,2,217,0,"exports"],[218,9,217,7],[218,10,217,8,"assertTSEnumDeclaration"],[218,33,217,0],[218,36,217,34,"assertTSEnumDeclaration"],[218,59,217,0],[219,0,218,0,"exports"],[219,2,218,0,"exports"],[219,9,218,7],[219,10,218,8,"assertTSEnumMember"],[219,28,218,0],[219,31,218,29,"assertTSEnumMember"],[219,49,218,0],[220,0,219,0,"exports"],[220,2,219,0,"exports"],[220,9,219,7],[220,10,219,8,"assertTSModuleDeclaration"],[220,35,219,0],[220,38,219,36,"assertTSModuleDeclaration"],[220,63,219,0],[221,0,220,0,"exports"],[221,2,220,0,"exports"],[221,9,220,7],[221,10,220,8,"assertTSModuleBlock"],[221,29,220,0],[221,32,220,30,"assertTSModuleBlock"],[221,51,220,0],[222,0,221,0,"exports"],[222,2,221,0,"exports"],[222,9,221,7],[222,10,221,8,"assertTSImportType"],[222,28,221,0],[222,31,221,29,"assertTSImportType"],[222,49,221,0],[223,0,222,0,"exports"],[223,2,222,0,"exports"],[223,9,222,7],[223,10,222,8,"assertTSImportEqualsDeclaration"],[223,41,222,0],[223,44,222,42,"assertTSImportEqualsDeclaration"],[223,75,222,0],[224,0,223,0,"exports"],[224,2,223,0,"exports"],[224,9,223,7],[224,10,223,8,"assertTSExternalModuleReference"],[224,41,223,0],[224,44,223,42,"assertTSExternalModuleReference"],[224,75,223,0],[225,0,224,0,"exports"],[225,2,224,0,"exports"],[225,9,224,7],[225,10,224,8,"assertTSNonNullExpression"],[225,35,224,0],[225,38,224,36,"assertTSNonNullExpression"],[225,63,224,0],[226,0,225,0,"exports"],[226,2,225,0,"exports"],[226,9,225,7],[226,10,225,8,"assertTSExportAssignment"],[226,34,225,0],[226,37,225,35,"assertTSExportAssignment"],[226,61,225,0],[227,0,226,0,"exports"],[227,2,226,0,"exports"],[227,9,226,7],[227,10,226,8,"assertTSNamespaceExportDeclaration"],[227,44,226,0],[227,47,226,45,"assertTSNamespaceExportDeclaration"],[227,81,226,0],[228,0,227,0,"exports"],[228,2,227,0,"exports"],[228,9,227,7],[228,10,227,8,"assertTSTypeAnnotation"],[228,32,227,0],[228,35,227,33,"assertTSTypeAnnotation"],[228,57,227,0],[229,0,228,0,"exports"],[229,2,228,0,"exports"],[229,9,228,7],[229,10,228,8,"assertTSTypeParameterInstantiation"],[229,44,228,0],[229,47,228,45,"assertTSTypeParameterInstantiation"],[229,81,228,0],[230,0,229,0,"exports"],[230,2,229,0,"exports"],[230,9,229,7],[230,10,229,8,"assertTSTypeParameterDeclaration"],[230,42,229,0],[230,45,229,43,"assertTSTypeParameterDeclaration"],[230,77,229,0],[231,0,230,0,"exports"],[231,2,230,0,"exports"],[231,9,230,7],[231,10,230,8,"assertTSTypeParameter"],[231,31,230,0],[231,34,230,32,"assertTSTypeParameter"],[231,55,230,0],[232,0,231,0,"exports"],[232,2,231,0,"exports"],[232,9,231,7],[232,10,231,8,"assertExpression"],[232,26,231,0],[232,29,231,27,"assertExpression"],[232,45,231,0],[233,0,232,0,"exports"],[233,2,232,0,"exports"],[233,9,232,7],[233,10,232,8,"assertBinary"],[233,22,232,0],[233,25,232,23,"assertBinary"],[233,37,232,0],[234,0,233,0,"exports"],[234,2,233,0,"exports"],[234,9,233,7],[234,10,233,8,"assertScopable"],[234,24,233,0],[234,27,233,25,"assertScopable"],[234,41,233,0],[235,0,234,0,"exports"],[235,2,234,0,"exports"],[235,9,234,7],[235,10,234,8,"assertBlockParent"],[235,27,234,0],[235,30,234,28,"assertBlockParent"],[235,47,234,0],[236,0,235,0,"exports"],[236,2,235,0,"exports"],[236,9,235,7],[236,10,235,8,"assertBlock"],[236,21,235,0],[236,24,235,22,"assertBlock"],[236,35,235,0],[237,0,236,0,"exports"],[237,2,236,0,"exports"],[237,9,236,7],[237,10,236,8,"assertStatement"],[237,25,236,0],[237,28,236,26,"assertStatement"],[237,43,236,0],[238,0,237,0,"exports"],[238,2,237,0,"exports"],[238,9,237,7],[238,10,237,8,"assertTerminatorless"],[238,30,237,0],[238,33,237,31,"assertTerminatorless"],[238,53,237,0],[239,0,238,0,"exports"],[239,2,238,0,"exports"],[239,9,238,7],[239,10,238,8,"assertCompletionStatement"],[239,35,238,0],[239,38,238,36,"assertCompletionStatement"],[239,63,238,0],[240,0,239,0,"exports"],[240,2,239,0,"exports"],[240,9,239,7],[240,10,239,8,"assertConditional"],[240,27,239,0],[240,30,239,28,"assertConditional"],[240,47,239,0],[241,0,240,0,"exports"],[241,2,240,0,"exports"],[241,9,240,7],[241,10,240,8,"assertLoop"],[241,20,240,0],[241,23,240,21,"assertLoop"],[241,33,240,0],[242,0,241,0,"exports"],[242,2,241,0,"exports"],[242,9,241,7],[242,10,241,8,"assertWhile"],[242,21,241,0],[242,24,241,22,"assertWhile"],[242,35,241,0],[243,0,242,0,"exports"],[243,2,242,0,"exports"],[243,9,242,7],[243,10,242,8,"assertExpressionWrapper"],[243,33,242,0],[243,36,242,34,"assertExpressionWrapper"],[243,59,242,0],[244,0,243,0,"exports"],[244,2,243,0,"exports"],[244,9,243,7],[244,10,243,8,"assertFor"],[244,19,243,0],[244,22,243,20,"assertFor"],[244,31,243,0],[245,0,244,0,"exports"],[245,2,244,0,"exports"],[245,9,244,7],[245,10,244,8,"assertForXStatement"],[245,29,244,0],[245,32,244,30,"assertForXStatement"],[245,51,244,0],[246,0,245,0,"exports"],[246,2,245,0,"exports"],[246,9,245,7],[246,10,245,8,"assertFunction"],[246,24,245,0],[246,27,245,25,"assertFunction"],[246,41,245,0],[247,0,246,0,"exports"],[247,2,246,0,"exports"],[247,9,246,7],[247,10,246,8,"assertFunctionParent"],[247,30,246,0],[247,33,246,31,"assertFunctionParent"],[247,53,246,0],[248,0,247,0,"exports"],[248,2,247,0,"exports"],[248,9,247,7],[248,10,247,8,"assertPureish"],[248,23,247,0],[248,26,247,24,"assertPureish"],[248,39,247,0],[249,0,248,0,"exports"],[249,2,248,0,"exports"],[249,9,248,7],[249,10,248,8,"assertDeclaration"],[249,27,248,0],[249,30,248,28,"assertDeclaration"],[249,47,248,0],[250,0,249,0,"exports"],[250,2,249,0,"exports"],[250,9,249,7],[250,10,249,8,"assertPatternLike"],[250,27,249,0],[250,30,249,28,"assertPatternLike"],[250,47,249,0],[251,0,250,0,"exports"],[251,2,250,0,"exports"],[251,9,250,7],[251,10,250,8,"assertLVal"],[251,20,250,0],[251,23,250,21,"assertLVal"],[251,33,250,0],[252,0,251,0,"exports"],[252,2,251,0,"exports"],[252,9,251,7],[252,10,251,8,"assertTSEntityName"],[252,28,251,0],[252,31,251,29,"assertTSEntityName"],[252,49,251,0],[253,0,252,0,"exports"],[253,2,252,0,"exports"],[253,9,252,7],[253,10,252,8,"assertLiteral"],[253,23,252,0],[253,26,252,24,"assertLiteral"],[253,39,252,0],[254,0,253,0,"exports"],[254,2,253,0,"exports"],[254,9,253,7],[254,10,253,8,"assertImmutable"],[254,25,253,0],[254,28,253,26,"assertImmutable"],[254,43,253,0],[255,0,254,0,"exports"],[255,2,254,0,"exports"],[255,9,254,7],[255,10,254,8,"assertUserWhitespacable"],[255,33,254,0],[255,36,254,34,"assertUserWhitespacable"],[255,59,254,0],[256,0,255,0,"exports"],[256,2,255,0,"exports"],[256,9,255,7],[256,10,255,8,"assertMethod"],[256,22,255,0],[256,25,255,23,"assertMethod"],[256,37,255,0],[257,0,256,0,"exports"],[257,2,256,0,"exports"],[257,9,256,7],[257,10,256,8,"assertObjectMember"],[257,28,256,0],[257,31,256,29,"assertObjectMember"],[257,49,256,0],[258,0,257,0,"exports"],[258,2,257,0,"exports"],[258,9,257,7],[258,10,257,8,"assertProperty"],[258,24,257,0],[258,27,257,25,"assertProperty"],[258,41,257,0],[259,0,258,0,"exports"],[259,2,258,0,"exports"],[259,9,258,7],[259,10,258,8,"assertUnaryLike"],[259,25,258,0],[259,28,258,26,"assertUnaryLike"],[259,43,258,0],[260,0,259,0,"exports"],[260,2,259,0,"exports"],[260,9,259,7],[260,10,259,8,"assertPattern"],[260,23,259,0],[260,26,259,24,"assertPattern"],[260,39,259,0],[261,0,260,0,"exports"],[261,2,260,0,"exports"],[261,9,260,7],[261,10,260,8,"assertClass"],[261,21,260,0],[261,24,260,22,"assertClass"],[261,35,260,0],[262,0,261,0,"exports"],[262,2,261,0,"exports"],[262,9,261,7],[262,10,261,8,"assertModuleDeclaration"],[262,33,261,0],[262,36,261,34,"assertModuleDeclaration"],[262,59,261,0],[263,0,262,0,"exports"],[263,2,262,0,"exports"],[263,9,262,7],[263,10,262,8,"assertExportDeclaration"],[263,33,262,0],[263,36,262,34,"assertExportDeclaration"],[263,59,262,0],[264,0,263,0,"exports"],[264,2,263,0,"exports"],[264,9,263,7],[264,10,263,8,"assertModuleSpecifier"],[264,31,263,0],[264,34,263,32,"assertModuleSpecifier"],[264,55,263,0],[265,0,264,0,"exports"],[265,2,264,0,"exports"],[265,9,264,7],[265,10,264,8,"assertFlow"],[265,20,264,0],[265,23,264,21,"assertFlow"],[265,33,264,0],[266,0,265,0,"exports"],[266,2,265,0,"exports"],[266,9,265,7],[266,10,265,8,"assertFlowType"],[266,24,265,0],[266,27,265,25,"assertFlowType"],[266,41,265,0],[267,0,266,0,"exports"],[267,2,266,0,"exports"],[267,9,266,7],[267,10,266,8,"assertFlowBaseAnnotation"],[267,34,266,0],[267,37,266,35,"assertFlowBaseAnnotation"],[267,61,266,0],[268,0,267,0,"exports"],[268,2,267,0,"exports"],[268,9,267,7],[268,10,267,8,"assertFlowDeclaration"],[268,31,267,0],[268,34,267,32,"assertFlowDeclaration"],[268,55,267,0],[269,0,268,0,"exports"],[269,2,268,0,"exports"],[269,9,268,7],[269,10,268,8,"assertFlowPredicate"],[269,29,268,0],[269,32,268,30,"assertFlowPredicate"],[269,51,268,0],[270,0,269,0,"exports"],[270,2,269,0,"exports"],[270,9,269,7],[270,10,269,8,"assertJSX"],[270,19,269,0],[270,22,269,20,"assertJSX"],[270,31,269,0],[271,0,270,0,"exports"],[271,2,270,0,"exports"],[271,9,270,7],[271,10,270,8,"assertPrivate"],[271,23,270,0],[271,26,270,24,"assertPrivate"],[271,39,270,0],[272,0,271,0,"exports"],[272,2,271,0,"exports"],[272,9,271,7],[272,10,271,8,"assertTSTypeElement"],[272,29,271,0],[272,32,271,30,"assertTSTypeElement"],[272,51,271,0],[273,0,272,0,"exports"],[273,2,272,0,"exports"],[273,9,272,7],[273,10,272,8,"assertTSType"],[273,22,272,0],[273,25,272,23,"assertTSType"],[273,37,272,0],[274,0,273,0,"exports"],[274,2,273,0,"exports"],[274,9,273,7],[274,10,273,8,"assertNumberLiteral"],[274,29,273,0],[274,32,273,30,"assertNumberLiteral"],[274,51,273,0],[275,0,274,0,"exports"],[275,2,274,0,"exports"],[275,9,274,7],[275,10,274,8,"assertRegexLiteral"],[275,28,274,0],[275,31,274,29,"assertRegexLiteral"],[275,49,274,0],[276,0,275,0,"exports"],[276,2,275,0,"exports"],[276,9,275,7],[276,10,275,8,"assertRestProperty"],[276,28,275,0],[276,31,275,29,"assertRestProperty"],[276,49,275,0],[277,0,276,0,"exports"],[277,2,276,0,"exports"],[277,9,276,7],[277,10,276,8,"assertSpreadProperty"],[277,30,276,0],[277,33,276,31,"assertSpreadProperty"],[277,53,276,0],[279,0,278,0],[279,6,278,4,"_is"],[279,9,278,7],[279,12,278,10,"_interopRequireDefault"],[279,34,278,32],[279,35,278,33,"require"],[279,46,278,40],[279,88,278,32],[279,89,278,0],[281,0,280,0],[281,11,280,9,"_interopRequireDefault"],[281,33,280,0],[281,34,280,32,"obj"],[281,37,280,0],[281,39,280,37],[282,0,280,39],[282,11,280,46,"obj"],[282,14,280,49],[282,18,280,53,"obj"],[282,21,280,56],[282,22,280,57,"__esModule"],[282,32,280,46],[282,35,280,70,"obj"],[282,38,280,46],[282,41,280,76],[283,0,280,78,"default"],[283,6,280,78,"default"],[283,13,280,85],[283,15,280,87,"obj"],[284,0,280,76],[284,5,280,39],[285,0,280,95],[287,0,282,0],[287,11,282,9,"assert"],[287,17,282,0],[287,18,282,16,"type"],[287,22,282,0],[287,24,282,22,"node"],[287,28,282,0],[287,30,282,28,"opts"],[287,34,282,0],[287,36,282,34],[288,0,283,2],[288,8,283,6],[288,9,283,7],[288,10,283,8],[288,13,283,11,"_is"],[288,16,283,14],[288,17,283,15,"default"],[288,24,283,7],[288,26,283,24,"type"],[288,30,283,7],[288,32,283,30,"node"],[288,36,283,7],[288,38,283,36,"opts"],[288,42,283,7],[288,43,283,2],[288,45,283,43],[289,0,284,4],[289,12,284,10],[289,16,284,14,"Error"],[289,21,284,10],[289,22,284,20],[289,43,284,38,"type"],[289,47,284,20],[289,70,284,59,"JSON"],[289,74,284,63],[289,75,284,64,"stringify"],[289,84,284,59],[289,85,284,74,"opts"],[289,89,284,59],[289,90,284,20],[289,124,284,106,"node"],[289,128,284,110],[289,129,284,111,"type"],[289,133,284,20],[289,142,284,10],[289,143,284,4],[290,0,285,3],[291,0,286,1],[293,0,288,0],[293,11,288,9,"assertArrayExpression"],[293,32,288,0],[293,33,288,31,"node"],[293,37,288,0],[293,39,288,48],[294,0,288,48],[294,8,288,37,"opts"],[294,12,288,48],[294,83,288,44],[294,85,288,48],[295,0,289,2,"assert"],[295,4,289,2,"assert"],[295,10,289,8],[295,11,289,9],[295,28,289,8],[295,30,289,28,"node"],[295,34,289,8],[295,36,289,34,"opts"],[295,40,289,8],[295,41,289,2],[296,0,290,1],[298,0,292,0],[298,11,292,9,"assertAssignmentExpression"],[298,37,292,0],[298,38,292,36,"node"],[298,42,292,0],[298,44,292,53],[299,0,292,53],[299,8,292,42,"opts"],[299,12,292,53],[299,83,292,49],[299,85,292,53],[300,0,293,2,"assert"],[300,4,293,2,"assert"],[300,10,293,8],[300,11,293,9],[300,33,293,8],[300,35,293,33,"node"],[300,39,293,8],[300,41,293,39,"opts"],[300,45,293,8],[300,46,293,2],[301,0,294,1],[303,0,296,0],[303,11,296,9,"assertBinaryExpression"],[303,33,296,0],[303,34,296,32,"node"],[303,38,296,0],[303,40,296,49],[304,0,296,49],[304,8,296,38,"opts"],[304,12,296,49],[304,83,296,45],[304,85,296,49],[305,0,297,2,"assert"],[305,4,297,2,"assert"],[305,10,297,8],[305,11,297,9],[305,29,297,8],[305,31,297,29,"node"],[305,35,297,8],[305,37,297,35,"opts"],[305,41,297,8],[305,42,297,2],[306,0,298,1],[308,0,300,0],[308,11,300,9,"assertInterpreterDirective"],[308,37,300,0],[308,38,300,36,"node"],[308,42,300,0],[308,44,300,53],[309,0,300,53],[309,8,300,42,"opts"],[309,12,300,53],[309,83,300,49],[309,85,300,53],[310,0,301,2,"assert"],[310,4,301,2,"assert"],[310,10,301,8],[310,11,301,9],[310,33,301,8],[310,35,301,33,"node"],[310,39,301,8],[310,41,301,39,"opts"],[310,45,301,8],[310,46,301,2],[311,0,302,1],[313,0,304,0],[313,11,304,9,"assertDirective"],[313,26,304,0],[313,27,304,25,"node"],[313,31,304,0],[313,33,304,42],[314,0,304,42],[314,8,304,31,"opts"],[314,12,304,42],[314,83,304,38],[314,85,304,42],[315,0,305,2,"assert"],[315,4,305,2,"assert"],[315,10,305,8],[315,11,305,9],[315,22,305,8],[315,24,305,22,"node"],[315,28,305,8],[315,30,305,28,"opts"],[315,34,305,8],[315,35,305,2],[316,0,306,1],[318,0,308,0],[318,11,308,9,"assertDirectiveLiteral"],[318,33,308,0],[318,34,308,32,"node"],[318,38,308,0],[318,40,308,49],[319,0,308,49],[319,8,308,38,"opts"],[319,12,308,49],[319,83,308,45],[319,85,308,49],[320,0,309,2,"assert"],[320,4,309,2,"assert"],[320,10,309,8],[320,11,309,9],[320,29,309,8],[320,31,309,29,"node"],[320,35,309,8],[320,37,309,35,"opts"],[320,41,309,8],[320,42,309,2],[321,0,310,1],[323,0,312,0],[323,11,312,9,"assertBlockStatement"],[323,31,312,0],[323,32,312,30,"node"],[323,36,312,0],[323,38,312,47],[324,0,312,47],[324,8,312,36,"opts"],[324,12,312,47],[324,83,312,43],[324,85,312,47],[325,0,313,2,"assert"],[325,4,313,2,"assert"],[325,10,313,8],[325,11,313,9],[325,27,313,8],[325,29,313,27,"node"],[325,33,313,8],[325,35,313,33,"opts"],[325,39,313,8],[325,40,313,2],[326,0,314,1],[328,0,316,0],[328,11,316,9,"assertBreakStatement"],[328,31,316,0],[328,32,316,30,"node"],[328,36,316,0],[328,38,316,47],[329,0,316,47],[329,8,316,36,"opts"],[329,12,316,47],[329,83,316,43],[329,85,316,47],[330,0,317,2,"assert"],[330,4,317,2,"assert"],[330,10,317,8],[330,11,317,9],[330,27,317,8],[330,29,317,27,"node"],[330,33,317,8],[330,35,317,33,"opts"],[330,39,317,8],[330,40,317,2],[331,0,318,1],[333,0,320,0],[333,11,320,9,"assertCallExpression"],[333,31,320,0],[333,32,320,30,"node"],[333,36,320,0],[333,38,320,47],[334,0,320,47],[334,8,320,36,"opts"],[334,12,320,47],[334,83,320,43],[334,85,320,47],[335,0,321,2,"assert"],[335,4,321,2,"assert"],[335,10,321,8],[335,11,321,9],[335,27,321,8],[335,29,321,27,"node"],[335,33,321,8],[335,35,321,33,"opts"],[335,39,321,8],[335,40,321,2],[336,0,322,1],[338,0,324,0],[338,11,324,9,"assertCatchClause"],[338,28,324,0],[338,29,324,27,"node"],[338,33,324,0],[338,35,324,44],[339,0,324,44],[339,8,324,33,"opts"],[339,12,324,44],[339,83,324,40],[339,85,324,44],[340,0,325,2,"assert"],[340,4,325,2,"assert"],[340,10,325,8],[340,11,325,9],[340,24,325,8],[340,26,325,24,"node"],[340,30,325,8],[340,32,325,30,"opts"],[340,36,325,8],[340,37,325,2],[341,0,326,1],[343,0,328,0],[343,11,328,9,"assertConditionalExpression"],[343,38,328,0],[343,39,328,37,"node"],[343,43,328,0],[343,45,328,54],[344,0,328,54],[344,8,328,43,"opts"],[344,12,328,54],[344,83,328,50],[344,85,328,54],[345,0,329,2,"assert"],[345,4,329,2,"assert"],[345,10,329,8],[345,11,329,9],[345,34,329,8],[345,36,329,34,"node"],[345,40,329,8],[345,42,329,40,"opts"],[345,46,329,8],[345,47,329,2],[346,0,330,1],[348,0,332,0],[348,11,332,9,"assertContinueStatement"],[348,34,332,0],[348,35,332,33,"node"],[348,39,332,0],[348,41,332,50],[349,0,332,50],[349,8,332,39,"opts"],[349,12,332,50],[349,83,332,46],[349,85,332,50],[350,0,333,2,"assert"],[350,4,333,2,"assert"],[350,10,333,8],[350,11,333,9],[350,30,333,8],[350,32,333,30,"node"],[350,36,333,8],[350,38,333,36,"opts"],[350,42,333,8],[350,43,333,2],[351,0,334,1],[353,0,336,0],[353,11,336,9,"assertDebuggerStatement"],[353,34,336,0],[353,35,336,33,"node"],[353,39,336,0],[353,41,336,50],[354,0,336,50],[354,8,336,39,"opts"],[354,12,336,50],[354,83,336,46],[354,85,336,50],[355,0,337,2,"assert"],[355,4,337,2,"assert"],[355,10,337,8],[355,11,337,9],[355,30,337,8],[355,32,337,30,"node"],[355,36,337,8],[355,38,337,36,"opts"],[355,42,337,8],[355,43,337,2],[356,0,338,1],[358,0,340,0],[358,11,340,9,"assertDoWhileStatement"],[358,33,340,0],[358,34,340,32,"node"],[358,38,340,0],[358,40,340,49],[359,0,340,49],[359,8,340,38,"opts"],[359,12,340,49],[359,83,340,45],[359,85,340,49],[360,0,341,2,"assert"],[360,4,341,2,"assert"],[360,10,341,8],[360,11,341,9],[360,29,341,8],[360,31,341,29,"node"],[360,35,341,8],[360,37,341,35,"opts"],[360,41,341,8],[360,42,341,2],[361,0,342,1],[363,0,344,0],[363,11,344,9,"assertEmptyStatement"],[363,31,344,0],[363,32,344,30,"node"],[363,36,344,0],[363,38,344,47],[364,0,344,47],[364,8,344,36,"opts"],[364,12,344,47],[364,83,344,43],[364,85,344,47],[365,0,345,2,"assert"],[365,4,345,2,"assert"],[365,10,345,8],[365,11,345,9],[365,27,345,8],[365,29,345,27,"node"],[365,33,345,8],[365,35,345,33,"opts"],[365,39,345,8],[365,40,345,2],[366,0,346,1],[368,0,348,0],[368,11,348,9,"assertExpressionStatement"],[368,36,348,0],[368,37,348,35,"node"],[368,41,348,0],[368,43,348,52],[369,0,348,52],[369,8,348,41,"opts"],[369,12,348,52],[369,83,348,48],[369,85,348,52],[370,0,349,2,"assert"],[370,4,349,2,"assert"],[370,10,349,8],[370,11,349,9],[370,32,349,8],[370,34,349,32,"node"],[370,38,349,8],[370,40,349,38,"opts"],[370,44,349,8],[370,45,349,2],[371,0,350,1],[373,0,352,0],[373,11,352,9,"assertFile"],[373,21,352,0],[373,22,352,20,"node"],[373,26,352,0],[373,28,352,37],[374,0,352,37],[374,8,352,26,"opts"],[374,12,352,37],[374,83,352,33],[374,85,352,37],[375,0,353,2,"assert"],[375,4,353,2,"assert"],[375,10,353,8],[375,11,353,9],[375,17,353,8],[375,19,353,17,"node"],[375,23,353,8],[375,25,353,23,"opts"],[375,29,353,8],[375,30,353,2],[376,0,354,1],[378,0,356,0],[378,11,356,9,"assertForInStatement"],[378,31,356,0],[378,32,356,30,"node"],[378,36,356,0],[378,38,356,47],[379,0,356,47],[379,8,356,36,"opts"],[379,12,356,47],[379,83,356,43],[379,85,356,47],[380,0,357,2,"assert"],[380,4,357,2,"assert"],[380,10,357,8],[380,11,357,9],[380,27,357,8],[380,29,357,27,"node"],[380,33,357,8],[380,35,357,33,"opts"],[380,39,357,8],[380,40,357,2],[381,0,358,1],[383,0,360,0],[383,11,360,9,"assertForStatement"],[383,29,360,0],[383,30,360,28,"node"],[383,34,360,0],[383,36,360,45],[384,0,360,45],[384,8,360,34,"opts"],[384,12,360,45],[384,83,360,41],[384,85,360,45],[385,0,361,2,"assert"],[385,4,361,2,"assert"],[385,10,361,8],[385,11,361,9],[385,25,361,8],[385,27,361,25,"node"],[385,31,361,8],[385,33,361,31,"opts"],[385,37,361,8],[385,38,361,2],[386,0,362,1],[388,0,364,0],[388,11,364,9,"assertFunctionDeclaration"],[388,36,364,0],[388,37,364,35,"node"],[388,41,364,0],[388,43,364,52],[389,0,364,52],[389,8,364,41,"opts"],[389,12,364,52],[389,83,364,48],[389,85,364,52],[390,0,365,2,"assert"],[390,4,365,2,"assert"],[390,10,365,8],[390,11,365,9],[390,32,365,8],[390,34,365,32,"node"],[390,38,365,8],[390,40,365,38,"opts"],[390,44,365,8],[390,45,365,2],[391,0,366,1],[393,0,368,0],[393,11,368,9,"assertFunctionExpression"],[393,35,368,0],[393,36,368,34,"node"],[393,40,368,0],[393,42,368,51],[394,0,368,51],[394,8,368,40,"opts"],[394,12,368,51],[394,83,368,47],[394,85,368,51],[395,0,369,2,"assert"],[395,4,369,2,"assert"],[395,10,369,8],[395,11,369,9],[395,31,369,8],[395,33,369,31,"node"],[395,37,369,8],[395,39,369,37,"opts"],[395,43,369,8],[395,44,369,2],[396,0,370,1],[398,0,372,0],[398,11,372,9,"assertIdentifier"],[398,27,372,0],[398,28,372,26,"node"],[398,32,372,0],[398,34,372,43],[399,0,372,43],[399,8,372,32,"opts"],[399,12,372,43],[399,83,372,39],[399,85,372,43],[400,0,373,2,"assert"],[400,4,373,2,"assert"],[400,10,373,8],[400,11,373,9],[400,23,373,8],[400,25,373,23,"node"],[400,29,373,8],[400,31,373,29,"opts"],[400,35,373,8],[400,36,373,2],[401,0,374,1],[403,0,376,0],[403,11,376,9,"assertIfStatement"],[403,28,376,0],[403,29,376,27,"node"],[403,33,376,0],[403,35,376,44],[404,0,376,44],[404,8,376,33,"opts"],[404,12,376,44],[404,83,376,40],[404,85,376,44],[405,0,377,2,"assert"],[405,4,377,2,"assert"],[405,10,377,8],[405,11,377,9],[405,24,377,8],[405,26,377,24,"node"],[405,30,377,8],[405,32,377,30,"opts"],[405,36,377,8],[405,37,377,2],[406,0,378,1],[408,0,380,0],[408,11,380,9,"assertLabeledStatement"],[408,33,380,0],[408,34,380,32,"node"],[408,38,380,0],[408,40,380,49],[409,0,380,49],[409,8,380,38,"opts"],[409,12,380,49],[409,83,380,45],[409,85,380,49],[410,0,381,2,"assert"],[410,4,381,2,"assert"],[410,10,381,8],[410,11,381,9],[410,29,381,8],[410,31,381,29,"node"],[410,35,381,8],[410,37,381,35,"opts"],[410,41,381,8],[410,42,381,2],[411,0,382,1],[413,0,384,0],[413,11,384,9,"assertStringLiteral"],[413,30,384,0],[413,31,384,29,"node"],[413,35,384,0],[413,37,384,46],[414,0,384,46],[414,8,384,35,"opts"],[414,12,384,46],[414,83,384,42],[414,85,384,46],[415,0,385,2,"assert"],[415,4,385,2,"assert"],[415,10,385,8],[415,11,385,9],[415,26,385,8],[415,28,385,26,"node"],[415,32,385,8],[415,34,385,32,"opts"],[415,38,385,8],[415,39,385,2],[416,0,386,1],[418,0,388,0],[418,11,388,9,"assertNumericLiteral"],[418,31,388,0],[418,32,388,30,"node"],[418,36,388,0],[418,38,388,47],[419,0,388,47],[419,8,388,36,"opts"],[419,12,388,47],[419,83,388,43],[419,85,388,47],[420,0,389,2,"assert"],[420,4,389,2,"assert"],[420,10,389,8],[420,11,389,9],[420,27,389,8],[420,29,389,27,"node"],[420,33,389,8],[420,35,389,33,"opts"],[420,39,389,8],[420,40,389,2],[421,0,390,1],[423,0,392,0],[423,11,392,9,"assertNullLiteral"],[423,28,392,0],[423,29,392,27,"node"],[423,33,392,0],[423,35,392,44],[424,0,392,44],[424,8,392,33,"opts"],[424,12,392,44],[424,83,392,40],[424,85,392,44],[425,0,393,2,"assert"],[425,4,393,2,"assert"],[425,10,393,8],[425,11,393,9],[425,24,393,8],[425,26,393,24,"node"],[425,30,393,8],[425,32,393,30,"opts"],[425,36,393,8],[425,37,393,2],[426,0,394,1],[428,0,396,0],[428,11,396,9,"assertBooleanLiteral"],[428,31,396,0],[428,32,396,30,"node"],[428,36,396,0],[428,38,396,47],[429,0,396,47],[429,8,396,36,"opts"],[429,12,396,47],[429,83,396,43],[429,85,396,47],[430,0,397,2,"assert"],[430,4,397,2,"assert"],[430,10,397,8],[430,11,397,9],[430,27,397,8],[430,29,397,27,"node"],[430,33,397,8],[430,35,397,33,"opts"],[430,39,397,8],[430,40,397,2],[431,0,398,1],[433,0,400,0],[433,11,400,9,"assertRegExpLiteral"],[433,30,400,0],[433,31,400,29,"node"],[433,35,400,0],[433,37,400,46],[434,0,400,46],[434,8,400,35,"opts"],[434,12,400,46],[434,83,400,42],[434,85,400,46],[435,0,401,2,"assert"],[435,4,401,2,"assert"],[435,10,401,8],[435,11,401,9],[435,26,401,8],[435,28,401,26,"node"],[435,32,401,8],[435,34,401,32,"opts"],[435,38,401,8],[435,39,401,2],[436,0,402,1],[438,0,404,0],[438,11,404,9,"assertLogicalExpression"],[438,34,404,0],[438,35,404,33,"node"],[438,39,404,0],[438,41,404,50],[439,0,404,50],[439,8,404,39,"opts"],[439,12,404,50],[439,83,404,46],[439,85,404,50],[440,0,405,2,"assert"],[440,4,405,2,"assert"],[440,10,405,8],[440,11,405,9],[440,30,405,8],[440,32,405,30,"node"],[440,36,405,8],[440,38,405,36,"opts"],[440,42,405,8],[440,43,405,2],[441,0,406,1],[443,0,408,0],[443,11,408,9,"assertMemberExpression"],[443,33,408,0],[443,34,408,32,"node"],[443,38,408,0],[443,40,408,49],[444,0,408,49],[444,8,408,38,"opts"],[444,12,408,49],[444,83,408,45],[444,85,408,49],[445,0,409,2,"assert"],[445,4,409,2,"assert"],[445,10,409,8],[445,11,409,9],[445,29,409,8],[445,31,409,29,"node"],[445,35,409,8],[445,37,409,35,"opts"],[445,41,409,8],[445,42,409,2],[446,0,410,1],[448,0,412,0],[448,11,412,9,"assertNewExpression"],[448,30,412,0],[448,31,412,29,"node"],[448,35,412,0],[448,37,412,46],[449,0,412,46],[449,8,412,35,"opts"],[449,12,412,46],[449,83,412,42],[449,85,412,46],[450,0,413,2,"assert"],[450,4,413,2,"assert"],[450,10,413,8],[450,11,413,9],[450,26,413,8],[450,28,413,26,"node"],[450,32,413,8],[450,34,413,32,"opts"],[450,38,413,8],[450,39,413,2],[451,0,414,1],[453,0,416,0],[453,11,416,9,"assertProgram"],[453,24,416,0],[453,25,416,23,"node"],[453,29,416,0],[453,31,416,40],[454,0,416,40],[454,8,416,29,"opts"],[454,12,416,40],[454,83,416,36],[454,85,416,40],[455,0,417,2,"assert"],[455,4,417,2,"assert"],[455,10,417,8],[455,11,417,9],[455,20,417,8],[455,22,417,20,"node"],[455,26,417,8],[455,28,417,26,"opts"],[455,32,417,8],[455,33,417,2],[456,0,418,1],[458,0,420,0],[458,11,420,9,"assertObjectExpression"],[458,33,420,0],[458,34,420,32,"node"],[458,38,420,0],[458,40,420,49],[459,0,420,49],[459,8,420,38,"opts"],[459,12,420,49],[459,83,420,45],[459,85,420,49],[460,0,421,2,"assert"],[460,4,421,2,"assert"],[460,10,421,8],[460,11,421,9],[460,29,421,8],[460,31,421,29,"node"],[460,35,421,8],[460,37,421,35,"opts"],[460,41,421,8],[460,42,421,2],[461,0,422,1],[463,0,424,0],[463,11,424,9,"assertObjectMethod"],[463,29,424,0],[463,30,424,28,"node"],[463,34,424,0],[463,36,424,45],[464,0,424,45],[464,8,424,34,"opts"],[464,12,424,45],[464,83,424,41],[464,85,424,45],[465,0,425,2,"assert"],[465,4,425,2,"assert"],[465,10,425,8],[465,11,425,9],[465,25,425,8],[465,27,425,25,"node"],[465,31,425,8],[465,33,425,31,"opts"],[465,37,425,8],[465,38,425,2],[466,0,426,1],[468,0,428,0],[468,11,428,9,"assertObjectProperty"],[468,31,428,0],[468,32,428,30,"node"],[468,36,428,0],[468,38,428,47],[469,0,428,47],[469,8,428,36,"opts"],[469,12,428,47],[469,83,428,43],[469,85,428,47],[470,0,429,2,"assert"],[470,4,429,2,"assert"],[470,10,429,8],[470,11,429,9],[470,27,429,8],[470,29,429,27,"node"],[470,33,429,8],[470,35,429,33,"opts"],[470,39,429,8],[470,40,429,2],[471,0,430,1],[473,0,432,0],[473,11,432,9,"assertRestElement"],[473,28,432,0],[473,29,432,27,"node"],[473,33,432,0],[473,35,432,44],[474,0,432,44],[474,8,432,33,"opts"],[474,12,432,44],[474,83,432,40],[474,85,432,44],[475,0,433,2,"assert"],[475,4,433,2,"assert"],[475,10,433,8],[475,11,433,9],[475,24,433,8],[475,26,433,24,"node"],[475,30,433,8],[475,32,433,30,"opts"],[475,36,433,8],[475,37,433,2],[476,0,434,1],[478,0,436,0],[478,11,436,9,"assertReturnStatement"],[478,32,436,0],[478,33,436,31,"node"],[478,37,436,0],[478,39,436,48],[479,0,436,48],[479,8,436,37,"opts"],[479,12,436,48],[479,83,436,44],[479,85,436,48],[480,0,437,2,"assert"],[480,4,437,2,"assert"],[480,10,437,8],[480,11,437,9],[480,28,437,8],[480,30,437,28,"node"],[480,34,437,8],[480,36,437,34,"opts"],[480,40,437,8],[480,41,437,2],[481,0,438,1],[483,0,440,0],[483,11,440,9,"assertSequenceExpression"],[483,35,440,0],[483,36,440,34,"node"],[483,40,440,0],[483,42,440,51],[484,0,440,51],[484,8,440,40,"opts"],[484,12,440,51],[484,83,440,47],[484,85,440,51],[485,0,441,2,"assert"],[485,4,441,2,"assert"],[485,10,441,8],[485,11,441,9],[485,31,441,8],[485,33,441,31,"node"],[485,37,441,8],[485,39,441,37,"opts"],[485,43,441,8],[485,44,441,2],[486,0,442,1],[488,0,444,0],[488,11,444,9,"assertParenthesizedExpression"],[488,40,444,0],[488,41,444,39,"node"],[488,45,444,0],[488,47,444,56],[489,0,444,56],[489,8,444,45,"opts"],[489,12,444,56],[489,83,444,52],[489,85,444,56],[490,0,445,2,"assert"],[490,4,445,2,"assert"],[490,10,445,8],[490,11,445,9],[490,36,445,8],[490,38,445,36,"node"],[490,42,445,8],[490,44,445,42,"opts"],[490,48,445,8],[490,49,445,2],[491,0,446,1],[493,0,448,0],[493,11,448,9,"assertSwitchCase"],[493,27,448,0],[493,28,448,26,"node"],[493,32,448,0],[493,34,448,43],[494,0,448,43],[494,8,448,32,"opts"],[494,12,448,43],[494,83,448,39],[494,85,448,43],[495,0,449,2,"assert"],[495,4,449,2,"assert"],[495,10,449,8],[495,11,449,9],[495,23,449,8],[495,25,449,23,"node"],[495,29,449,8],[495,31,449,29,"opts"],[495,35,449,8],[495,36,449,2],[496,0,450,1],[498,0,452,0],[498,11,452,9,"assertSwitchStatement"],[498,32,452,0],[498,33,452,31,"node"],[498,37,452,0],[498,39,452,48],[499,0,452,48],[499,8,452,37,"opts"],[499,12,452,48],[499,83,452,44],[499,85,452,48],[500,0,453,2,"assert"],[500,4,453,2,"assert"],[500,10,453,8],[500,11,453,9],[500,28,453,8],[500,30,453,28,"node"],[500,34,453,8],[500,36,453,34,"opts"],[500,40,453,8],[500,41,453,2],[501,0,454,1],[503,0,456,0],[503,11,456,9,"assertThisExpression"],[503,31,456,0],[503,32,456,30,"node"],[503,36,456,0],[503,38,456,47],[504,0,456,47],[504,8,456,36,"opts"],[504,12,456,47],[504,83,456,43],[504,85,456,47],[505,0,457,2,"assert"],[505,4,457,2,"assert"],[505,10,457,8],[505,11,457,9],[505,27,457,8],[505,29,457,27,"node"],[505,33,457,8],[505,35,457,33,"opts"],[505,39,457,8],[505,40,457,2],[506,0,458,1],[508,0,460,0],[508,11,460,9,"assertThrowStatement"],[508,31,460,0],[508,32,460,30,"node"],[508,36,460,0],[508,38,460,47],[509,0,460,47],[509,8,460,36,"opts"],[509,12,460,47],[509,83,460,43],[509,85,460,47],[510,0,461,2,"assert"],[510,4,461,2,"assert"],[510,10,461,8],[510,11,461,9],[510,27,461,8],[510,29,461,27,"node"],[510,33,461,8],[510,35,461,33,"opts"],[510,39,461,8],[510,40,461,2],[511,0,462,1],[513,0,464,0],[513,11,464,9,"assertTryStatement"],[513,29,464,0],[513,30,464,28,"node"],[513,34,464,0],[513,36,464,45],[514,0,464,45],[514,8,464,34,"opts"],[514,12,464,45],[514,83,464,41],[514,85,464,45],[515,0,465,2,"assert"],[515,4,465,2,"assert"],[515,10,465,8],[515,11,465,9],[515,25,465,8],[515,27,465,25,"node"],[515,31,465,8],[515,33,465,31,"opts"],[515,37,465,8],[515,38,465,2],[516,0,466,1],[518,0,468,0],[518,11,468,9,"assertUnaryExpression"],[518,32,468,0],[518,33,468,31,"node"],[518,37,468,0],[518,39,468,48],[519,0,468,48],[519,8,468,37,"opts"],[519,12,468,48],[519,83,468,44],[519,85,468,48],[520,0,469,2,"assert"],[520,4,469,2,"assert"],[520,10,469,8],[520,11,469,9],[520,28,469,8],[520,30,469,28,"node"],[520,34,469,8],[520,36,469,34,"opts"],[520,40,469,8],[520,41,469,2],[521,0,470,1],[523,0,472,0],[523,11,472,9,"assertUpdateExpression"],[523,33,472,0],[523,34,472,32,"node"],[523,38,472,0],[523,40,472,49],[524,0,472,49],[524,8,472,38,"opts"],[524,12,472,49],[524,83,472,45],[524,85,472,49],[525,0,473,2,"assert"],[525,4,473,2,"assert"],[525,10,473,8],[525,11,473,9],[525,29,473,8],[525,31,473,29,"node"],[525,35,473,8],[525,37,473,35,"opts"],[525,41,473,8],[525,42,473,2],[526,0,474,1],[528,0,476,0],[528,11,476,9,"assertVariableDeclaration"],[528,36,476,0],[528,37,476,35,"node"],[528,41,476,0],[528,43,476,52],[529,0,476,52],[529,8,476,41,"opts"],[529,12,476,52],[529,83,476,48],[529,85,476,52],[530,0,477,2,"assert"],[530,4,477,2,"assert"],[530,10,477,8],[530,11,477,9],[530,32,477,8],[530,34,477,32,"node"],[530,38,477,8],[530,40,477,38,"opts"],[530,44,477,8],[530,45,477,2],[531,0,478,1],[533,0,480,0],[533,11,480,9,"assertVariableDeclarator"],[533,35,480,0],[533,36,480,34,"node"],[533,40,480,0],[533,42,480,51],[534,0,480,51],[534,8,480,40,"opts"],[534,12,480,51],[534,83,480,47],[534,85,480,51],[535,0,481,2,"assert"],[535,4,481,2,"assert"],[535,10,481,8],[535,11,481,9],[535,31,481,8],[535,33,481,31,"node"],[535,37,481,8],[535,39,481,37,"opts"],[535,43,481,8],[535,44,481,2],[536,0,482,1],[538,0,484,0],[538,11,484,9,"assertWhileStatement"],[538,31,484,0],[538,32,484,30,"node"],[538,36,484,0],[538,38,484,47],[539,0,484,47],[539,8,484,36,"opts"],[539,12,484,47],[539,83,484,43],[539,85,484,47],[540,0,485,2,"assert"],[540,4,485,2,"assert"],[540,10,485,8],[540,11,485,9],[540,27,485,8],[540,29,485,27,"node"],[540,33,485,8],[540,35,485,33,"opts"],[540,39,485,8],[540,40,485,2],[541,0,486,1],[543,0,488,0],[543,11,488,9,"assertWithStatement"],[543,30,488,0],[543,31,488,29,"node"],[543,35,488,0],[543,37,488,46],[544,0,488,46],[544,8,488,35,"opts"],[544,12,488,46],[544,83,488,42],[544,85,488,46],[545,0,489,2,"assert"],[545,4,489,2,"assert"],[545,10,489,8],[545,11,489,9],[545,26,489,8],[545,28,489,26,"node"],[545,32,489,8],[545,34,489,32,"opts"],[545,38,489,8],[545,39,489,2],[546,0,490,1],[548,0,492,0],[548,11,492,9,"assertAssignmentPattern"],[548,34,492,0],[548,35,492,33,"node"],[548,39,492,0],[548,41,492,50],[549,0,492,50],[549,8,492,39,"opts"],[549,12,492,50],[549,83,492,46],[549,85,492,50],[550,0,493,2,"assert"],[550,4,493,2,"assert"],[550,10,493,8],[550,11,493,9],[550,30,493,8],[550,32,493,30,"node"],[550,36,493,8],[550,38,493,36,"opts"],[550,42,493,8],[550,43,493,2],[551,0,494,1],[553,0,496,0],[553,11,496,9,"assertArrayPattern"],[553,29,496,0],[553,30,496,28,"node"],[553,34,496,0],[553,36,496,45],[554,0,496,45],[554,8,496,34,"opts"],[554,12,496,45],[554,83,496,41],[554,85,496,45],[555,0,497,2,"assert"],[555,4,497,2,"assert"],[555,10,497,8],[555,11,497,9],[555,25,497,8],[555,27,497,25,"node"],[555,31,497,8],[555,33,497,31,"opts"],[555,37,497,8],[555,38,497,2],[556,0,498,1],[558,0,500,0],[558,11,500,9,"assertArrowFunctionExpression"],[558,40,500,0],[558,41,500,39,"node"],[558,45,500,0],[558,47,500,56],[559,0,500,56],[559,8,500,45,"opts"],[559,12,500,56],[559,83,500,52],[559,85,500,56],[560,0,501,2,"assert"],[560,4,501,2,"assert"],[560,10,501,8],[560,11,501,9],[560,36,501,8],[560,38,501,36,"node"],[560,42,501,8],[560,44,501,42,"opts"],[560,48,501,8],[560,49,501,2],[561,0,502,1],[563,0,504,0],[563,11,504,9,"assertClassBody"],[563,26,504,0],[563,27,504,25,"node"],[563,31,504,0],[563,33,504,42],[564,0,504,42],[564,8,504,31,"opts"],[564,12,504,42],[564,83,504,38],[564,85,504,42],[565,0,505,2,"assert"],[565,4,505,2,"assert"],[565,10,505,8],[565,11,505,9],[565,22,505,8],[565,24,505,22,"node"],[565,28,505,8],[565,30,505,28,"opts"],[565,34,505,8],[565,35,505,2],[566,0,506,1],[568,0,508,0],[568,11,508,9,"assertClassDeclaration"],[568,33,508,0],[568,34,508,32,"node"],[568,38,508,0],[568,40,508,49],[569,0,508,49],[569,8,508,38,"opts"],[569,12,508,49],[569,83,508,45],[569,85,508,49],[570,0,509,2,"assert"],[570,4,509,2,"assert"],[570,10,509,8],[570,11,509,9],[570,29,509,8],[570,31,509,29,"node"],[570,35,509,8],[570,37,509,35,"opts"],[570,41,509,8],[570,42,509,2],[571,0,510,1],[573,0,512,0],[573,11,512,9,"assertClassExpression"],[573,32,512,0],[573,33,512,31,"node"],[573,37,512,0],[573,39,512,48],[574,0,512,48],[574,8,512,37,"opts"],[574,12,512,48],[574,83,512,44],[574,85,512,48],[575,0,513,2,"assert"],[575,4,513,2,"assert"],[575,10,513,8],[575,11,513,9],[575,28,513,8],[575,30,513,28,"node"],[575,34,513,8],[575,36,513,34,"opts"],[575,40,513,8],[575,41,513,2],[576,0,514,1],[578,0,516,0],[578,11,516,9,"assertExportAllDeclaration"],[578,37,516,0],[578,38,516,36,"node"],[578,42,516,0],[578,44,516,53],[579,0,516,53],[579,8,516,42,"opts"],[579,12,516,53],[579,83,516,49],[579,85,516,53],[580,0,517,2,"assert"],[580,4,517,2,"assert"],[580,10,517,8],[580,11,517,9],[580,33,517,8],[580,35,517,33,"node"],[580,39,517,8],[580,41,517,39,"opts"],[580,45,517,8],[580,46,517,2],[581,0,518,1],[583,0,520,0],[583,11,520,9,"assertExportDefaultDeclaration"],[583,41,520,0],[583,42,520,40,"node"],[583,46,520,0],[583,48,520,57],[584,0,520,57],[584,8,520,46,"opts"],[584,12,520,57],[584,83,520,53],[584,85,520,57],[585,0,521,2,"assert"],[585,4,521,2,"assert"],[585,10,521,8],[585,11,521,9],[585,37,521,8],[585,39,521,37,"node"],[585,43,521,8],[585,45,521,43,"opts"],[585,49,521,8],[585,50,521,2],[586,0,522,1],[588,0,524,0],[588,11,524,9,"assertExportNamedDeclaration"],[588,39,524,0],[588,40,524,38,"node"],[588,44,524,0],[588,46,524,55],[589,0,524,55],[589,8,524,44,"opts"],[589,12,524,55],[589,83,524,51],[589,85,524,55],[590,0,525,2,"assert"],[590,4,525,2,"assert"],[590,10,525,8],[590,11,525,9],[590,35,525,8],[590,37,525,35,"node"],[590,41,525,8],[590,43,525,41,"opts"],[590,47,525,8],[590,48,525,2],[591,0,526,1],[593,0,528,0],[593,11,528,9,"assertExportSpecifier"],[593,32,528,0],[593,33,528,31,"node"],[593,37,528,0],[593,39,528,48],[594,0,528,48],[594,8,528,37,"opts"],[594,12,528,48],[594,83,528,44],[594,85,528,48],[595,0,529,2,"assert"],[595,4,529,2,"assert"],[595,10,529,8],[595,11,529,9],[595,28,529,8],[595,30,529,28,"node"],[595,34,529,8],[595,36,529,34,"opts"],[595,40,529,8],[595,41,529,2],[596,0,530,1],[598,0,532,0],[598,11,532,9,"assertForOfStatement"],[598,31,532,0],[598,32,532,30,"node"],[598,36,532,0],[598,38,532,47],[599,0,532,47],[599,8,532,36,"opts"],[599,12,532,47],[599,83,532,43],[599,85,532,47],[600,0,533,2,"assert"],[600,4,533,2,"assert"],[600,10,533,8],[600,11,533,9],[600,27,533,8],[600,29,533,27,"node"],[600,33,533,8],[600,35,533,33,"opts"],[600,39,533,8],[600,40,533,2],[601,0,534,1],[603,0,536,0],[603,11,536,9,"assertImportDeclaration"],[603,34,536,0],[603,35,536,33,"node"],[603,39,536,0],[603,41,536,50],[604,0,536,50],[604,8,536,39,"opts"],[604,12,536,50],[604,83,536,46],[604,85,536,50],[605,0,537,2,"assert"],[605,4,537,2,"assert"],[605,10,537,8],[605,11,537,9],[605,30,537,8],[605,32,537,30,"node"],[605,36,537,8],[605,38,537,36,"opts"],[605,42,537,8],[605,43,537,2],[606,0,538,1],[608,0,540,0],[608,11,540,9,"assertImportDefaultSpecifier"],[608,39,540,0],[608,40,540,38,"node"],[608,44,540,0],[608,46,540,55],[609,0,540,55],[609,8,540,44,"opts"],[609,12,540,55],[609,83,540,51],[609,85,540,55],[610,0,541,2,"assert"],[610,4,541,2,"assert"],[610,10,541,8],[610,11,541,9],[610,35,541,8],[610,37,541,35,"node"],[610,41,541,8],[610,43,541,41,"opts"],[610,47,541,8],[610,48,541,2],[611,0,542,1],[613,0,544,0],[613,11,544,9,"assertImportNamespaceSpecifier"],[613,41,544,0],[613,42,544,40,"node"],[613,46,544,0],[613,48,544,57],[614,0,544,57],[614,8,544,46,"opts"],[614,12,544,57],[614,83,544,53],[614,85,544,57],[615,0,545,2,"assert"],[615,4,545,2,"assert"],[615,10,545,8],[615,11,545,9],[615,37,545,8],[615,39,545,37,"node"],[615,43,545,8],[615,45,545,43,"opts"],[615,49,545,8],[615,50,545,2],[616,0,546,1],[618,0,548,0],[618,11,548,9,"assertImportSpecifier"],[618,32,548,0],[618,33,548,31,"node"],[618,37,548,0],[618,39,548,48],[619,0,548,48],[619,8,548,37,"opts"],[619,12,548,48],[619,83,548,44],[619,85,548,48],[620,0,549,2,"assert"],[620,4,549,2,"assert"],[620,10,549,8],[620,11,549,9],[620,28,549,8],[620,30,549,28,"node"],[620,34,549,8],[620,36,549,34,"opts"],[620,40,549,8],[620,41,549,2],[621,0,550,1],[623,0,552,0],[623,11,552,9,"assertMetaProperty"],[623,29,552,0],[623,30,552,28,"node"],[623,34,552,0],[623,36,552,45],[624,0,552,45],[624,8,552,34,"opts"],[624,12,552,45],[624,83,552,41],[624,85,552,45],[625,0,553,2,"assert"],[625,4,553,2,"assert"],[625,10,553,8],[625,11,553,9],[625,25,553,8],[625,27,553,25,"node"],[625,31,553,8],[625,33,553,31,"opts"],[625,37,553,8],[625,38,553,2],[626,0,554,1],[628,0,556,0],[628,11,556,9,"assertClassMethod"],[628,28,556,0],[628,29,556,27,"node"],[628,33,556,0],[628,35,556,44],[629,0,556,44],[629,8,556,33,"opts"],[629,12,556,44],[629,83,556,40],[629,85,556,44],[630,0,557,2,"assert"],[630,4,557,2,"assert"],[630,10,557,8],[630,11,557,9],[630,24,557,8],[630,26,557,24,"node"],[630,30,557,8],[630,32,557,30,"opts"],[630,36,557,8],[630,37,557,2],[631,0,558,1],[633,0,560,0],[633,11,560,9,"assertObjectPattern"],[633,30,560,0],[633,31,560,29,"node"],[633,35,560,0],[633,37,560,46],[634,0,560,46],[634,8,560,35,"opts"],[634,12,560,46],[634,83,560,42],[634,85,560,46],[635,0,561,2,"assert"],[635,4,561,2,"assert"],[635,10,561,8],[635,11,561,9],[635,26,561,8],[635,28,561,26,"node"],[635,32,561,8],[635,34,561,32,"opts"],[635,38,561,8],[635,39,561,2],[636,0,562,1],[638,0,564,0],[638,11,564,9,"assertSpreadElement"],[638,30,564,0],[638,31,564,29,"node"],[638,35,564,0],[638,37,564,46],[639,0,564,46],[639,8,564,35,"opts"],[639,12,564,46],[639,83,564,42],[639,85,564,46],[640,0,565,2,"assert"],[640,4,565,2,"assert"],[640,10,565,8],[640,11,565,9],[640,26,565,8],[640,28,565,26,"node"],[640,32,565,8],[640,34,565,32,"opts"],[640,38,565,8],[640,39,565,2],[641,0,566,1],[643,0,568,0],[643,11,568,9,"assertSuper"],[643,22,568,0],[643,23,568,21,"node"],[643,27,568,0],[643,29,568,38],[644,0,568,38],[644,8,568,27,"opts"],[644,12,568,38],[644,83,568,34],[644,85,568,38],[645,0,569,2,"assert"],[645,4,569,2,"assert"],[645,10,569,8],[645,11,569,9],[645,18,569,8],[645,20,569,18,"node"],[645,24,569,8],[645,26,569,24,"opts"],[645,30,569,8],[645,31,569,2],[646,0,570,1],[648,0,572,0],[648,11,572,9,"assertTaggedTemplateExpression"],[648,41,572,0],[648,42,572,40,"node"],[648,46,572,0],[648,48,572,57],[649,0,572,57],[649,8,572,46,"opts"],[649,12,572,57],[649,83,572,53],[649,85,572,57],[650,0,573,2,"assert"],[650,4,573,2,"assert"],[650,10,573,8],[650,11,573,9],[650,37,573,8],[650,39,573,37,"node"],[650,43,573,8],[650,45,573,43,"opts"],[650,49,573,8],[650,50,573,2],[651,0,574,1],[653,0,576,0],[653,11,576,9,"assertTemplateElement"],[653,32,576,0],[653,33,576,31,"node"],[653,37,576,0],[653,39,576,48],[654,0,576,48],[654,8,576,37,"opts"],[654,12,576,48],[654,83,576,44],[654,85,576,48],[655,0,577,2,"assert"],[655,4,577,2,"assert"],[655,10,577,8],[655,11,577,9],[655,28,577,8],[655,30,577,28,"node"],[655,34,577,8],[655,36,577,34,"opts"],[655,40,577,8],[655,41,577,2],[656,0,578,1],[658,0,580,0],[658,11,580,9,"assertTemplateLiteral"],[658,32,580,0],[658,33,580,31,"node"],[658,37,580,0],[658,39,580,48],[659,0,580,48],[659,8,580,37,"opts"],[659,12,580,48],[659,83,580,44],[659,85,580,48],[660,0,581,2,"assert"],[660,4,581,2,"assert"],[660,10,581,8],[660,11,581,9],[660,28,581,8],[660,30,581,28,"node"],[660,34,581,8],[660,36,581,34,"opts"],[660,40,581,8],[660,41,581,2],[661,0,582,1],[663,0,584,0],[663,11,584,9,"assertYieldExpression"],[663,32,584,0],[663,33,584,31,"node"],[663,37,584,0],[663,39,584,48],[664,0,584,48],[664,8,584,37,"opts"],[664,12,584,48],[664,83,584,44],[664,85,584,48],[665,0,585,2,"assert"],[665,4,585,2,"assert"],[665,10,585,8],[665,11,585,9],[665,28,585,8],[665,30,585,28,"node"],[665,34,585,8],[665,36,585,34,"opts"],[665,40,585,8],[665,41,585,2],[666,0,586,1],[668,0,588,0],[668,11,588,9,"assertAnyTypeAnnotation"],[668,34,588,0],[668,35,588,33,"node"],[668,39,588,0],[668,41,588,50],[669,0,588,50],[669,8,588,39,"opts"],[669,12,588,50],[669,83,588,46],[669,85,588,50],[670,0,589,2,"assert"],[670,4,589,2,"assert"],[670,10,589,8],[670,11,589,9],[670,30,589,8],[670,32,589,30,"node"],[670,36,589,8],[670,38,589,36,"opts"],[670,42,589,8],[670,43,589,2],[671,0,590,1],[673,0,592,0],[673,11,592,9,"assertArrayTypeAnnotation"],[673,36,592,0],[673,37,592,35,"node"],[673,41,592,0],[673,43,592,52],[674,0,592,52],[674,8,592,41,"opts"],[674,12,592,52],[674,83,592,48],[674,85,592,52],[675,0,593,2,"assert"],[675,4,593,2,"assert"],[675,10,593,8],[675,11,593,9],[675,32,593,8],[675,34,593,32,"node"],[675,38,593,8],[675,40,593,38,"opts"],[675,44,593,8],[675,45,593,2],[676,0,594,1],[678,0,596,0],[678,11,596,9,"assertBooleanTypeAnnotation"],[678,38,596,0],[678,39,596,37,"node"],[678,43,596,0],[678,45,596,54],[679,0,596,54],[679,8,596,43,"opts"],[679,12,596,54],[679,83,596,50],[679,85,596,54],[680,0,597,2,"assert"],[680,4,597,2,"assert"],[680,10,597,8],[680,11,597,9],[680,34,597,8],[680,36,597,34,"node"],[680,40,597,8],[680,42,597,40,"opts"],[680,46,597,8],[680,47,597,2],[681,0,598,1],[683,0,600,0],[683,11,600,9,"assertBooleanLiteralTypeAnnotation"],[683,45,600,0],[683,46,600,44,"node"],[683,50,600,0],[683,52,600,61],[684,0,600,61],[684,8,600,50,"opts"],[684,12,600,61],[684,83,600,57],[684,85,600,61],[685,0,601,2,"assert"],[685,4,601,2,"assert"],[685,10,601,8],[685,11,601,9],[685,41,601,8],[685,43,601,41,"node"],[685,47,601,8],[685,49,601,47,"opts"],[685,53,601,8],[685,54,601,2],[686,0,602,1],[688,0,604,0],[688,11,604,9,"assertNullLiteralTypeAnnotation"],[688,42,604,0],[688,43,604,41,"node"],[688,47,604,0],[688,49,604,58],[689,0,604,58],[689,8,604,47,"opts"],[689,12,604,58],[689,83,604,54],[689,85,604,58],[690,0,605,2,"assert"],[690,4,605,2,"assert"],[690,10,605,8],[690,11,605,9],[690,38,605,8],[690,40,605,38,"node"],[690,44,605,8],[690,46,605,44,"opts"],[690,50,605,8],[690,51,605,2],[691,0,606,1],[693,0,608,0],[693,11,608,9,"assertClassImplements"],[693,32,608,0],[693,33,608,31,"node"],[693,37,608,0],[693,39,608,48],[694,0,608,48],[694,8,608,37,"opts"],[694,12,608,48],[694,83,608,44],[694,85,608,48],[695,0,609,2,"assert"],[695,4,609,2,"assert"],[695,10,609,8],[695,11,609,9],[695,28,609,8],[695,30,609,28,"node"],[695,34,609,8],[695,36,609,34,"opts"],[695,40,609,8],[695,41,609,2],[696,0,610,1],[698,0,612,0],[698,11,612,9,"assertDeclareClass"],[698,29,612,0],[698,30,612,28,"node"],[698,34,612,0],[698,36,612,45],[699,0,612,45],[699,8,612,34,"opts"],[699,12,612,45],[699,83,612,41],[699,85,612,45],[700,0,613,2,"assert"],[700,4,613,2,"assert"],[700,10,613,8],[700,11,613,9],[700,25,613,8],[700,27,613,25,"node"],[700,31,613,8],[700,33,613,31,"opts"],[700,37,613,8],[700,38,613,2],[701,0,614,1],[703,0,616,0],[703,11,616,9,"assertDeclareFunction"],[703,32,616,0],[703,33,616,31,"node"],[703,37,616,0],[703,39,616,48],[704,0,616,48],[704,8,616,37,"opts"],[704,12,616,48],[704,83,616,44],[704,85,616,48],[705,0,617,2,"assert"],[705,4,617,2,"assert"],[705,10,617,8],[705,11,617,9],[705,28,617,8],[705,30,617,28,"node"],[705,34,617,8],[705,36,617,34,"opts"],[705,40,617,8],[705,41,617,2],[706,0,618,1],[708,0,620,0],[708,11,620,9,"assertDeclareInterface"],[708,33,620,0],[708,34,620,32,"node"],[708,38,620,0],[708,40,620,49],[709,0,620,49],[709,8,620,38,"opts"],[709,12,620,49],[709,83,620,45],[709,85,620,49],[710,0,621,2,"assert"],[710,4,621,2,"assert"],[710,10,621,8],[710,11,621,9],[710,29,621,8],[710,31,621,29,"node"],[710,35,621,8],[710,37,621,35,"opts"],[710,41,621,8],[710,42,621,2],[711,0,622,1],[713,0,624,0],[713,11,624,9,"assertDeclareModule"],[713,30,624,0],[713,31,624,29,"node"],[713,35,624,0],[713,37,624,46],[714,0,624,46],[714,8,624,35,"opts"],[714,12,624,46],[714,83,624,42],[714,85,624,46],[715,0,625,2,"assert"],[715,4,625,2,"assert"],[715,10,625,8],[715,11,625,9],[715,26,625,8],[715,28,625,26,"node"],[715,32,625,8],[715,34,625,32,"opts"],[715,38,625,8],[715,39,625,2],[716,0,626,1],[718,0,628,0],[718,11,628,9,"assertDeclareModuleExports"],[718,37,628,0],[718,38,628,36,"node"],[718,42,628,0],[718,44,628,53],[719,0,628,53],[719,8,628,42,"opts"],[719,12,628,53],[719,83,628,49],[719,85,628,53],[720,0,629,2,"assert"],[720,4,629,2,"assert"],[720,10,629,8],[720,11,629,9],[720,33,629,8],[720,35,629,33,"node"],[720,39,629,8],[720,41,629,39,"opts"],[720,45,629,8],[720,46,629,2],[721,0,630,1],[723,0,632,0],[723,11,632,9,"assertDeclareTypeAlias"],[723,33,632,0],[723,34,632,32,"node"],[723,38,632,0],[723,40,632,49],[724,0,632,49],[724,8,632,38,"opts"],[724,12,632,49],[724,83,632,45],[724,85,632,49],[725,0,633,2,"assert"],[725,4,633,2,"assert"],[725,10,633,8],[725,11,633,9],[725,29,633,8],[725,31,633,29,"node"],[725,35,633,8],[725,37,633,35,"opts"],[725,41,633,8],[725,42,633,2],[726,0,634,1],[728,0,636,0],[728,11,636,9,"assertDeclareOpaqueType"],[728,34,636,0],[728,35,636,33,"node"],[728,39,636,0],[728,41,636,50],[729,0,636,50],[729,8,636,39,"opts"],[729,12,636,50],[729,83,636,46],[729,85,636,50],[730,0,637,2,"assert"],[730,4,637,2,"assert"],[730,10,637,8],[730,11,637,9],[730,30,637,8],[730,32,637,30,"node"],[730,36,637,8],[730,38,637,36,"opts"],[730,42,637,8],[730,43,637,2],[731,0,638,1],[733,0,640,0],[733,11,640,9,"assertDeclareVariable"],[733,32,640,0],[733,33,640,31,"node"],[733,37,640,0],[733,39,640,48],[734,0,640,48],[734,8,640,37,"opts"],[734,12,640,48],[734,83,640,44],[734,85,640,48],[735,0,641,2,"assert"],[735,4,641,2,"assert"],[735,10,641,8],[735,11,641,9],[735,28,641,8],[735,30,641,28,"node"],[735,34,641,8],[735,36,641,34,"opts"],[735,40,641,8],[735,41,641,2],[736,0,642,1],[738,0,644,0],[738,11,644,9,"assertDeclareExportDeclaration"],[738,41,644,0],[738,42,644,40,"node"],[738,46,644,0],[738,48,644,57],[739,0,644,57],[739,8,644,46,"opts"],[739,12,644,57],[739,83,644,53],[739,85,644,57],[740,0,645,2,"assert"],[740,4,645,2,"assert"],[740,10,645,8],[740,11,645,9],[740,37,645,8],[740,39,645,37,"node"],[740,43,645,8],[740,45,645,43,"opts"],[740,49,645,8],[740,50,645,2],[741,0,646,1],[743,0,648,0],[743,11,648,9,"assertDeclareExportAllDeclaration"],[743,44,648,0],[743,45,648,43,"node"],[743,49,648,0],[743,51,648,60],[744,0,648,60],[744,8,648,49,"opts"],[744,12,648,60],[744,83,648,56],[744,85,648,60],[745,0,649,2,"assert"],[745,4,649,2,"assert"],[745,10,649,8],[745,11,649,9],[745,40,649,8],[745,42,649,40,"node"],[745,46,649,8],[745,48,649,46,"opts"],[745,52,649,8],[745,53,649,2],[746,0,650,1],[748,0,652,0],[748,11,652,9,"assertDeclaredPredicate"],[748,34,652,0],[748,35,652,33,"node"],[748,39,652,0],[748,41,652,50],[749,0,652,50],[749,8,652,39,"opts"],[749,12,652,50],[749,83,652,46],[749,85,652,50],[750,0,653,2,"assert"],[750,4,653,2,"assert"],[750,10,653,8],[750,11,653,9],[750,30,653,8],[750,32,653,30,"node"],[750,36,653,8],[750,38,653,36,"opts"],[750,42,653,8],[750,43,653,2],[751,0,654,1],[753,0,656,0],[753,11,656,9,"assertExistsTypeAnnotation"],[753,37,656,0],[753,38,656,36,"node"],[753,42,656,0],[753,44,656,53],[754,0,656,53],[754,8,656,42,"opts"],[754,12,656,53],[754,83,656,49],[754,85,656,53],[755,0,657,2,"assert"],[755,4,657,2,"assert"],[755,10,657,8],[755,11,657,9],[755,33,657,8],[755,35,657,33,"node"],[755,39,657,8],[755,41,657,39,"opts"],[755,45,657,8],[755,46,657,2],[756,0,658,1],[758,0,660,0],[758,11,660,9,"assertFunctionTypeAnnotation"],[758,39,660,0],[758,40,660,38,"node"],[758,44,660,0],[758,46,660,55],[759,0,660,55],[759,8,660,44,"opts"],[759,12,660,55],[759,83,660,51],[759,85,660,55],[760,0,661,2,"assert"],[760,4,661,2,"assert"],[760,10,661,8],[760,11,661,9],[760,35,661,8],[760,37,661,35,"node"],[760,41,661,8],[760,43,661,41,"opts"],[760,47,661,8],[760,48,661,2],[761,0,662,1],[763,0,664,0],[763,11,664,9,"assertFunctionTypeParam"],[763,34,664,0],[763,35,664,33,"node"],[763,39,664,0],[763,41,664,50],[764,0,664,50],[764,8,664,39,"opts"],[764,12,664,50],[764,83,664,46],[764,85,664,50],[765,0,665,2,"assert"],[765,4,665,2,"assert"],[765,10,665,8],[765,11,665,9],[765,30,665,8],[765,32,665,30,"node"],[765,36,665,8],[765,38,665,36,"opts"],[765,42,665,8],[765,43,665,2],[766,0,666,1],[768,0,668,0],[768,11,668,9,"assertGenericTypeAnnotation"],[768,38,668,0],[768,39,668,37,"node"],[768,43,668,0],[768,45,668,54],[769,0,668,54],[769,8,668,43,"opts"],[769,12,668,54],[769,83,668,50],[769,85,668,54],[770,0,669,2,"assert"],[770,4,669,2,"assert"],[770,10,669,8],[770,11,669,9],[770,34,669,8],[770,36,669,34,"node"],[770,40,669,8],[770,42,669,40,"opts"],[770,46,669,8],[770,47,669,2],[771,0,670,1],[773,0,672,0],[773,11,672,9,"assertInferredPredicate"],[773,34,672,0],[773,35,672,33,"node"],[773,39,672,0],[773,41,672,50],[774,0,672,50],[774,8,672,39,"opts"],[774,12,672,50],[774,83,672,46],[774,85,672,50],[775,0,673,2,"assert"],[775,4,673,2,"assert"],[775,10,673,8],[775,11,673,9],[775,30,673,8],[775,32,673,30,"node"],[775,36,673,8],[775,38,673,36,"opts"],[775,42,673,8],[775,43,673,2],[776,0,674,1],[778,0,676,0],[778,11,676,9,"assertInterfaceExtends"],[778,33,676,0],[778,34,676,32,"node"],[778,38,676,0],[778,40,676,49],[779,0,676,49],[779,8,676,38,"opts"],[779,12,676,49],[779,83,676,45],[779,85,676,49],[780,0,677,2,"assert"],[780,4,677,2,"assert"],[780,10,677,8],[780,11,677,9],[780,29,677,8],[780,31,677,29,"node"],[780,35,677,8],[780,37,677,35,"opts"],[780,41,677,8],[780,42,677,2],[781,0,678,1],[783,0,680,0],[783,11,680,9,"assertInterfaceDeclaration"],[783,37,680,0],[783,38,680,36,"node"],[783,42,680,0],[783,44,680,53],[784,0,680,53],[784,8,680,42,"opts"],[784,12,680,53],[784,83,680,49],[784,85,680,53],[785,0,681,2,"assert"],[785,4,681,2,"assert"],[785,10,681,8],[785,11,681,9],[785,33,681,8],[785,35,681,33,"node"],[785,39,681,8],[785,41,681,39,"opts"],[785,45,681,8],[785,46,681,2],[786,0,682,1],[788,0,684,0],[788,11,684,9,"assertInterfaceTypeAnnotation"],[788,40,684,0],[788,41,684,39,"node"],[788,45,684,0],[788,47,684,56],[789,0,684,56],[789,8,684,45,"opts"],[789,12,684,56],[789,83,684,52],[789,85,684,56],[790,0,685,2,"assert"],[790,4,685,2,"assert"],[790,10,685,8],[790,11,685,9],[790,36,685,8],[790,38,685,36,"node"],[790,42,685,8],[790,44,685,42,"opts"],[790,48,685,8],[790,49,685,2],[791,0,686,1],[793,0,688,0],[793,11,688,9,"assertIntersectionTypeAnnotation"],[793,43,688,0],[793,44,688,42,"node"],[793,48,688,0],[793,50,688,59],[794,0,688,59],[794,8,688,48,"opts"],[794,12,688,59],[794,83,688,55],[794,85,688,59],[795,0,689,2,"assert"],[795,4,689,2,"assert"],[795,10,689,8],[795,11,689,9],[795,39,689,8],[795,41,689,39,"node"],[795,45,689,8],[795,47,689,45,"opts"],[795,51,689,8],[795,52,689,2],[796,0,690,1],[798,0,692,0],[798,11,692,9,"assertMixedTypeAnnotation"],[798,36,692,0],[798,37,692,35,"node"],[798,41,692,0],[798,43,692,52],[799,0,692,52],[799,8,692,41,"opts"],[799,12,692,52],[799,83,692,48],[799,85,692,52],[800,0,693,2,"assert"],[800,4,693,2,"assert"],[800,10,693,8],[800,11,693,9],[800,32,693,8],[800,34,693,32,"node"],[800,38,693,8],[800,40,693,38,"opts"],[800,44,693,8],[800,45,693,2],[801,0,694,1],[803,0,696,0],[803,11,696,9,"assertEmptyTypeAnnotation"],[803,36,696,0],[803,37,696,35,"node"],[803,41,696,0],[803,43,696,52],[804,0,696,52],[804,8,696,41,"opts"],[804,12,696,52],[804,83,696,48],[804,85,696,52],[805,0,697,2,"assert"],[805,4,697,2,"assert"],[805,10,697,8],[805,11,697,9],[805,32,697,8],[805,34,697,32,"node"],[805,38,697,8],[805,40,697,38,"opts"],[805,44,697,8],[805,45,697,2],[806,0,698,1],[808,0,700,0],[808,11,700,9,"assertNullableTypeAnnotation"],[808,39,700,0],[808,40,700,38,"node"],[808,44,700,0],[808,46,700,55],[809,0,700,55],[809,8,700,44,"opts"],[809,12,700,55],[809,83,700,51],[809,85,700,55],[810,0,701,2,"assert"],[810,4,701,2,"assert"],[810,10,701,8],[810,11,701,9],[810,35,701,8],[810,37,701,35,"node"],[810,41,701,8],[810,43,701,41,"opts"],[810,47,701,8],[810,48,701,2],[811,0,702,1],[813,0,704,0],[813,11,704,9,"assertNumberLiteralTypeAnnotation"],[813,44,704,0],[813,45,704,43,"node"],[813,49,704,0],[813,51,704,60],[814,0,704,60],[814,8,704,49,"opts"],[814,12,704,60],[814,83,704,56],[814,85,704,60],[815,0,705,2,"assert"],[815,4,705,2,"assert"],[815,10,705,8],[815,11,705,9],[815,40,705,8],[815,42,705,40,"node"],[815,46,705,8],[815,48,705,46,"opts"],[815,52,705,8],[815,53,705,2],[816,0,706,1],[818,0,708,0],[818,11,708,9,"assertNumberTypeAnnotation"],[818,37,708,0],[818,38,708,36,"node"],[818,42,708,0],[818,44,708,53],[819,0,708,53],[819,8,708,42,"opts"],[819,12,708,53],[819,83,708,49],[819,85,708,53],[820,0,709,2,"assert"],[820,4,709,2,"assert"],[820,10,709,8],[820,11,709,9],[820,33,709,8],[820,35,709,33,"node"],[820,39,709,8],[820,41,709,39,"opts"],[820,45,709,8],[820,46,709,2],[821,0,710,1],[823,0,712,0],[823,11,712,9,"assertObjectTypeAnnotation"],[823,37,712,0],[823,38,712,36,"node"],[823,42,712,0],[823,44,712,53],[824,0,712,53],[824,8,712,42,"opts"],[824,12,712,53],[824,83,712,49],[824,85,712,53],[825,0,713,2,"assert"],[825,4,713,2,"assert"],[825,10,713,8],[825,11,713,9],[825,33,713,8],[825,35,713,33,"node"],[825,39,713,8],[825,41,713,39,"opts"],[825,45,713,8],[825,46,713,2],[826,0,714,1],[828,0,716,0],[828,11,716,9,"assertObjectTypeInternalSlot"],[828,39,716,0],[828,40,716,38,"node"],[828,44,716,0],[828,46,716,55],[829,0,716,55],[829,8,716,44,"opts"],[829,12,716,55],[829,83,716,51],[829,85,716,55],[830,0,717,2,"assert"],[830,4,717,2,"assert"],[830,10,717,8],[830,11,717,9],[830,35,717,8],[830,37,717,35,"node"],[830,41,717,8],[830,43,717,41,"opts"],[830,47,717,8],[830,48,717,2],[831,0,718,1],[833,0,720,0],[833,11,720,9,"assertObjectTypeCallProperty"],[833,39,720,0],[833,40,720,38,"node"],[833,44,720,0],[833,46,720,55],[834,0,720,55],[834,8,720,44,"opts"],[834,12,720,55],[834,83,720,51],[834,85,720,55],[835,0,721,2,"assert"],[835,4,721,2,"assert"],[835,10,721,8],[835,11,721,9],[835,35,721,8],[835,37,721,35,"node"],[835,41,721,8],[835,43,721,41,"opts"],[835,47,721,8],[835,48,721,2],[836,0,722,1],[838,0,724,0],[838,11,724,9,"assertObjectTypeIndexer"],[838,34,724,0],[838,35,724,33,"node"],[838,39,724,0],[838,41,724,50],[839,0,724,50],[839,8,724,39,"opts"],[839,12,724,50],[839,83,724,46],[839,85,724,50],[840,0,725,2,"assert"],[840,4,725,2,"assert"],[840,10,725,8],[840,11,725,9],[840,30,725,8],[840,32,725,30,"node"],[840,36,725,8],[840,38,725,36,"opts"],[840,42,725,8],[840,43,725,2],[841,0,726,1],[843,0,728,0],[843,11,728,9,"assertObjectTypeProperty"],[843,35,728,0],[843,36,728,34,"node"],[843,40,728,0],[843,42,728,51],[844,0,728,51],[844,8,728,40,"opts"],[844,12,728,51],[844,83,728,47],[844,85,728,51],[845,0,729,2,"assert"],[845,4,729,2,"assert"],[845,10,729,8],[845,11,729,9],[845,31,729,8],[845,33,729,31,"node"],[845,37,729,8],[845,39,729,37,"opts"],[845,43,729,8],[845,44,729,2],[846,0,730,1],[848,0,732,0],[848,11,732,9,"assertObjectTypeSpreadProperty"],[848,41,732,0],[848,42,732,40,"node"],[848,46,732,0],[848,48,732,57],[849,0,732,57],[849,8,732,46,"opts"],[849,12,732,57],[849,83,732,53],[849,85,732,57],[850,0,733,2,"assert"],[850,4,733,2,"assert"],[850,10,733,8],[850,11,733,9],[850,37,733,8],[850,39,733,37,"node"],[850,43,733,8],[850,45,733,43,"opts"],[850,49,733,8],[850,50,733,2],[851,0,734,1],[853,0,736,0],[853,11,736,9,"assertOpaqueType"],[853,27,736,0],[853,28,736,26,"node"],[853,32,736,0],[853,34,736,43],[854,0,736,43],[854,8,736,32,"opts"],[854,12,736,43],[854,83,736,39],[854,85,736,43],[855,0,737,2,"assert"],[855,4,737,2,"assert"],[855,10,737,8],[855,11,737,9],[855,23,737,8],[855,25,737,23,"node"],[855,29,737,8],[855,31,737,29,"opts"],[855,35,737,8],[855,36,737,2],[856,0,738,1],[858,0,740,0],[858,11,740,9,"assertQualifiedTypeIdentifier"],[858,40,740,0],[858,41,740,39,"node"],[858,45,740,0],[858,47,740,56],[859,0,740,56],[859,8,740,45,"opts"],[859,12,740,56],[859,83,740,52],[859,85,740,56],[860,0,741,2,"assert"],[860,4,741,2,"assert"],[860,10,741,8],[860,11,741,9],[860,36,741,8],[860,38,741,36,"node"],[860,42,741,8],[860,44,741,42,"opts"],[860,48,741,8],[860,49,741,2],[861,0,742,1],[863,0,744,0],[863,11,744,9,"assertStringLiteralTypeAnnotation"],[863,44,744,0],[863,45,744,43,"node"],[863,49,744,0],[863,51,744,60],[864,0,744,60],[864,8,744,49,"opts"],[864,12,744,60],[864,83,744,56],[864,85,744,60],[865,0,745,2,"assert"],[865,4,745,2,"assert"],[865,10,745,8],[865,11,745,9],[865,40,745,8],[865,42,745,40,"node"],[865,46,745,8],[865,48,745,46,"opts"],[865,52,745,8],[865,53,745,2],[866,0,746,1],[868,0,748,0],[868,11,748,9,"assertStringTypeAnnotation"],[868,37,748,0],[868,38,748,36,"node"],[868,42,748,0],[868,44,748,53],[869,0,748,53],[869,8,748,42,"opts"],[869,12,748,53],[869,83,748,49],[869,85,748,53],[870,0,749,2,"assert"],[870,4,749,2,"assert"],[870,10,749,8],[870,11,749,9],[870,33,749,8],[870,35,749,33,"node"],[870,39,749,8],[870,41,749,39,"opts"],[870,45,749,8],[870,46,749,2],[871,0,750,1],[873,0,752,0],[873,11,752,9,"assertThisTypeAnnotation"],[873,35,752,0],[873,36,752,34,"node"],[873,40,752,0],[873,42,752,51],[874,0,752,51],[874,8,752,40,"opts"],[874,12,752,51],[874,83,752,47],[874,85,752,51],[875,0,753,2,"assert"],[875,4,753,2,"assert"],[875,10,753,8],[875,11,753,9],[875,31,753,8],[875,33,753,31,"node"],[875,37,753,8],[875,39,753,37,"opts"],[875,43,753,8],[875,44,753,2],[876,0,754,1],[878,0,756,0],[878,11,756,9,"assertTupleTypeAnnotation"],[878,36,756,0],[878,37,756,35,"node"],[878,41,756,0],[878,43,756,52],[879,0,756,52],[879,8,756,41,"opts"],[879,12,756,52],[879,83,756,48],[879,85,756,52],[880,0,757,2,"assert"],[880,4,757,2,"assert"],[880,10,757,8],[880,11,757,9],[880,32,757,8],[880,34,757,32,"node"],[880,38,757,8],[880,40,757,38,"opts"],[880,44,757,8],[880,45,757,2],[881,0,758,1],[883,0,760,0],[883,11,760,9,"assertTypeofTypeAnnotation"],[883,37,760,0],[883,38,760,36,"node"],[883,42,760,0],[883,44,760,53],[884,0,760,53],[884,8,760,42,"opts"],[884,12,760,53],[884,83,760,49],[884,85,760,53],[885,0,761,2,"assert"],[885,4,761,2,"assert"],[885,10,761,8],[885,11,761,9],[885,33,761,8],[885,35,761,33,"node"],[885,39,761,8],[885,41,761,39,"opts"],[885,45,761,8],[885,46,761,2],[886,0,762,1],[888,0,764,0],[888,11,764,9,"assertTypeAlias"],[888,26,764,0],[888,27,764,25,"node"],[888,31,764,0],[888,33,764,42],[889,0,764,42],[889,8,764,31,"opts"],[889,12,764,42],[889,83,764,38],[889,85,764,42],[890,0,765,2,"assert"],[890,4,765,2,"assert"],[890,10,765,8],[890,11,765,9],[890,22,765,8],[890,24,765,22,"node"],[890,28,765,8],[890,30,765,28,"opts"],[890,34,765,8],[890,35,765,2],[891,0,766,1],[893,0,768,0],[893,11,768,9,"assertTypeAnnotation"],[893,31,768,0],[893,32,768,30,"node"],[893,36,768,0],[893,38,768,47],[894,0,768,47],[894,8,768,36,"opts"],[894,12,768,47],[894,83,768,43],[894,85,768,47],[895,0,769,2,"assert"],[895,4,769,2,"assert"],[895,10,769,8],[895,11,769,9],[895,27,769,8],[895,29,769,27,"node"],[895,33,769,8],[895,35,769,33,"opts"],[895,39,769,8],[895,40,769,2],[896,0,770,1],[898,0,772,0],[898,11,772,9,"assertTypeCastExpression"],[898,35,772,0],[898,36,772,34,"node"],[898,40,772,0],[898,42,772,51],[899,0,772,51],[899,8,772,40,"opts"],[899,12,772,51],[899,83,772,47],[899,85,772,51],[900,0,773,2,"assert"],[900,4,773,2,"assert"],[900,10,773,8],[900,11,773,9],[900,31,773,8],[900,33,773,31,"node"],[900,37,773,8],[900,39,773,37,"opts"],[900,43,773,8],[900,44,773,2],[901,0,774,1],[903,0,776,0],[903,11,776,9,"assertTypeParameter"],[903,30,776,0],[903,31,776,29,"node"],[903,35,776,0],[903,37,776,46],[904,0,776,46],[904,8,776,35,"opts"],[904,12,776,46],[904,83,776,42],[904,85,776,46],[905,0,777,2,"assert"],[905,4,777,2,"assert"],[905,10,777,8],[905,11,777,9],[905,26,777,8],[905,28,777,26,"node"],[905,32,777,8],[905,34,777,32,"opts"],[905,38,777,8],[905,39,777,2],[906,0,778,1],[908,0,780,0],[908,11,780,9,"assertTypeParameterDeclaration"],[908,41,780,0],[908,42,780,40,"node"],[908,46,780,0],[908,48,780,57],[909,0,780,57],[909,8,780,46,"opts"],[909,12,780,57],[909,83,780,53],[909,85,780,57],[910,0,781,2,"assert"],[910,4,781,2,"assert"],[910,10,781,8],[910,11,781,9],[910,37,781,8],[910,39,781,37,"node"],[910,43,781,8],[910,45,781,43,"opts"],[910,49,781,8],[910,50,781,2],[911,0,782,1],[913,0,784,0],[913,11,784,9,"assertTypeParameterInstantiation"],[913,43,784,0],[913,44,784,42,"node"],[913,48,784,0],[913,50,784,59],[914,0,784,59],[914,8,784,48,"opts"],[914,12,784,59],[914,83,784,55],[914,85,784,59],[915,0,785,2,"assert"],[915,4,785,2,"assert"],[915,10,785,8],[915,11,785,9],[915,39,785,8],[915,41,785,39,"node"],[915,45,785,8],[915,47,785,45,"opts"],[915,51,785,8],[915,52,785,2],[916,0,786,1],[918,0,788,0],[918,11,788,9,"assertUnionTypeAnnotation"],[918,36,788,0],[918,37,788,35,"node"],[918,41,788,0],[918,43,788,52],[919,0,788,52],[919,8,788,41,"opts"],[919,12,788,52],[919,83,788,48],[919,85,788,52],[920,0,789,2,"assert"],[920,4,789,2,"assert"],[920,10,789,8],[920,11,789,9],[920,32,789,8],[920,34,789,32,"node"],[920,38,789,8],[920,40,789,38,"opts"],[920,44,789,8],[920,45,789,2],[921,0,790,1],[923,0,792,0],[923,11,792,9,"assertVariance"],[923,25,792,0],[923,26,792,24,"node"],[923,30,792,0],[923,32,792,41],[924,0,792,41],[924,8,792,30,"opts"],[924,12,792,41],[924,83,792,37],[924,85,792,41],[925,0,793,2,"assert"],[925,4,793,2,"assert"],[925,10,793,8],[925,11,793,9],[925,21,793,8],[925,23,793,21,"node"],[925,27,793,8],[925,29,793,27,"opts"],[925,33,793,8],[925,34,793,2],[926,0,794,1],[928,0,796,0],[928,11,796,9,"assertVoidTypeAnnotation"],[928,35,796,0],[928,36,796,34,"node"],[928,40,796,0],[928,42,796,51],[929,0,796,51],[929,8,796,40,"opts"],[929,12,796,51],[929,83,796,47],[929,85,796,51],[930,0,797,2,"assert"],[930,4,797,2,"assert"],[930,10,797,8],[930,11,797,9],[930,31,797,8],[930,33,797,31,"node"],[930,37,797,8],[930,39,797,37,"opts"],[930,43,797,8],[930,44,797,2],[931,0,798,1],[933,0,800,0],[933,11,800,9,"assertJSXAttribute"],[933,29,800,0],[933,30,800,28,"node"],[933,34,800,0],[933,36,800,45],[934,0,800,45],[934,8,800,34,"opts"],[934,12,800,45],[934,83,800,41],[934,85,800,45],[935,0,801,2,"assert"],[935,4,801,2,"assert"],[935,10,801,8],[935,11,801,9],[935,25,801,8],[935,27,801,25,"node"],[935,31,801,8],[935,33,801,31,"opts"],[935,37,801,8],[935,38,801,2],[936,0,802,1],[938,0,804,0],[938,11,804,9,"assertJSXClosingElement"],[938,34,804,0],[938,35,804,33,"node"],[938,39,804,0],[938,41,804,50],[939,0,804,50],[939,8,804,39,"opts"],[939,12,804,50],[939,83,804,46],[939,85,804,50],[940,0,805,2,"assert"],[940,4,805,2,"assert"],[940,10,805,8],[940,11,805,9],[940,30,805,8],[940,32,805,30,"node"],[940,36,805,8],[940,38,805,36,"opts"],[940,42,805,8],[940,43,805,2],[941,0,806,1],[943,0,808,0],[943,11,808,9,"assertJSXElement"],[943,27,808,0],[943,28,808,26,"node"],[943,32,808,0],[943,34,808,43],[944,0,808,43],[944,8,808,32,"opts"],[944,12,808,43],[944,83,808,39],[944,85,808,43],[945,0,809,2,"assert"],[945,4,809,2,"assert"],[945,10,809,8],[945,11,809,9],[945,23,809,8],[945,25,809,23,"node"],[945,29,809,8],[945,31,809,29,"opts"],[945,35,809,8],[945,36,809,2],[946,0,810,1],[948,0,812,0],[948,11,812,9,"assertJSXEmptyExpression"],[948,35,812,0],[948,36,812,34,"node"],[948,40,812,0],[948,42,812,51],[949,0,812,51],[949,8,812,40,"opts"],[949,12,812,51],[949,83,812,47],[949,85,812,51],[950,0,813,2,"assert"],[950,4,813,2,"assert"],[950,10,813,8],[950,11,813,9],[950,31,813,8],[950,33,813,31,"node"],[950,37,813,8],[950,39,813,37,"opts"],[950,43,813,8],[950,44,813,2],[951,0,814,1],[953,0,816,0],[953,11,816,9,"assertJSXExpressionContainer"],[953,39,816,0],[953,40,816,38,"node"],[953,44,816,0],[953,46,816,55],[954,0,816,55],[954,8,816,44,"opts"],[954,12,816,55],[954,83,816,51],[954,85,816,55],[955,0,817,2,"assert"],[955,4,817,2,"assert"],[955,10,817,8],[955,11,817,9],[955,35,817,8],[955,37,817,35,"node"],[955,41,817,8],[955,43,817,41,"opts"],[955,47,817,8],[955,48,817,2],[956,0,818,1],[958,0,820,0],[958,11,820,9,"assertJSXSpreadChild"],[958,31,820,0],[958,32,820,30,"node"],[958,36,820,0],[958,38,820,47],[959,0,820,47],[959,8,820,36,"opts"],[959,12,820,47],[959,83,820,43],[959,85,820,47],[960,0,821,2,"assert"],[960,4,821,2,"assert"],[960,10,821,8],[960,11,821,9],[960,27,821,8],[960,29,821,27,"node"],[960,33,821,8],[960,35,821,33,"opts"],[960,39,821,8],[960,40,821,2],[961,0,822,1],[963,0,824,0],[963,11,824,9,"assertJSXIdentifier"],[963,30,824,0],[963,31,824,29,"node"],[963,35,824,0],[963,37,824,46],[964,0,824,46],[964,8,824,35,"opts"],[964,12,824,46],[964,83,824,42],[964,85,824,46],[965,0,825,2,"assert"],[965,4,825,2,"assert"],[965,10,825,8],[965,11,825,9],[965,26,825,8],[965,28,825,26,"node"],[965,32,825,8],[965,34,825,32,"opts"],[965,38,825,8],[965,39,825,2],[966,0,826,1],[968,0,828,0],[968,11,828,9,"assertJSXMemberExpression"],[968,36,828,0],[968,37,828,35,"node"],[968,41,828,0],[968,43,828,52],[969,0,828,52],[969,8,828,41,"opts"],[969,12,828,52],[969,83,828,48],[969,85,828,52],[970,0,829,2,"assert"],[970,4,829,2,"assert"],[970,10,829,8],[970,11,829,9],[970,32,829,8],[970,34,829,32,"node"],[970,38,829,8],[970,40,829,38,"opts"],[970,44,829,8],[970,45,829,2],[971,0,830,1],[973,0,832,0],[973,11,832,9,"assertJSXNamespacedName"],[973,34,832,0],[973,35,832,33,"node"],[973,39,832,0],[973,41,832,50],[974,0,832,50],[974,8,832,39,"opts"],[974,12,832,50],[974,83,832,46],[974,85,832,50],[975,0,833,2,"assert"],[975,4,833,2,"assert"],[975,10,833,8],[975,11,833,9],[975,30,833,8],[975,32,833,30,"node"],[975,36,833,8],[975,38,833,36,"opts"],[975,42,833,8],[975,43,833,2],[976,0,834,1],[978,0,836,0],[978,11,836,9,"assertJSXOpeningElement"],[978,34,836,0],[978,35,836,33,"node"],[978,39,836,0],[978,41,836,50],[979,0,836,50],[979,8,836,39,"opts"],[979,12,836,50],[979,83,836,46],[979,85,836,50],[980,0,837,2,"assert"],[980,4,837,2,"assert"],[980,10,837,8],[980,11,837,9],[980,30,837,8],[980,32,837,30,"node"],[980,36,837,8],[980,38,837,36,"opts"],[980,42,837,8],[980,43,837,2],[981,0,838,1],[983,0,840,0],[983,11,840,9,"assertJSXSpreadAttribute"],[983,35,840,0],[983,36,840,34,"node"],[983,40,840,0],[983,42,840,51],[984,0,840,51],[984,8,840,40,"opts"],[984,12,840,51],[984,83,840,47],[984,85,840,51],[985,0,841,2,"assert"],[985,4,841,2,"assert"],[985,10,841,8],[985,11,841,9],[985,31,841,8],[985,33,841,31,"node"],[985,37,841,8],[985,39,841,37,"opts"],[985,43,841,8],[985,44,841,2],[986,0,842,1],[988,0,844,0],[988,11,844,9,"assertJSXText"],[988,24,844,0],[988,25,844,23,"node"],[988,29,844,0],[988,31,844,40],[989,0,844,40],[989,8,844,29,"opts"],[989,12,844,40],[989,83,844,36],[989,85,844,40],[990,0,845,2,"assert"],[990,4,845,2,"assert"],[990,10,845,8],[990,11,845,9],[990,20,845,8],[990,22,845,20,"node"],[990,26,845,8],[990,28,845,26,"opts"],[990,32,845,8],[990,33,845,2],[991,0,846,1],[993,0,848,0],[993,11,848,9,"assertJSXFragment"],[993,28,848,0],[993,29,848,27,"node"],[993,33,848,0],[993,35,848,44],[994,0,848,44],[994,8,848,33,"opts"],[994,12,848,44],[994,83,848,40],[994,85,848,44],[995,0,849,2,"assert"],[995,4,849,2,"assert"],[995,10,849,8],[995,11,849,9],[995,24,849,8],[995,26,849,24,"node"],[995,30,849,8],[995,32,849,30,"opts"],[995,36,849,8],[995,37,849,2],[996,0,850,1],[998,0,852,0],[998,11,852,9,"assertJSXOpeningFragment"],[998,35,852,0],[998,36,852,34,"node"],[998,40,852,0],[998,42,852,51],[999,0,852,51],[999,8,852,40,"opts"],[999,12,852,51],[999,83,852,47],[999,85,852,51],[1000,0,853,2,"assert"],[1000,4,853,2,"assert"],[1000,10,853,8],[1000,11,853,9],[1000,31,853,8],[1000,33,853,31,"node"],[1000,37,853,8],[1000,39,853,37,"opts"],[1000,43,853,8],[1000,44,853,2],[1001,0,854,1],[1003,0,856,0],[1003,11,856,9,"assertJSXClosingFragment"],[1003,35,856,0],[1003,36,856,34,"node"],[1003,40,856,0],[1003,42,856,51],[1004,0,856,51],[1004,8,856,40,"opts"],[1004,12,856,51],[1004,83,856,47],[1004,85,856,51],[1005,0,857,2,"assert"],[1005,4,857,2,"assert"],[1005,10,857,8],[1005,11,857,9],[1005,31,857,8],[1005,33,857,31,"node"],[1005,37,857,8],[1005,39,857,37,"opts"],[1005,43,857,8],[1005,44,857,2],[1006,0,858,1],[1008,0,860,0],[1008,11,860,9,"assertNoop"],[1008,21,860,0],[1008,22,860,20,"node"],[1008,26,860,0],[1008,28,860,37],[1009,0,860,37],[1009,8,860,26,"opts"],[1009,12,860,37],[1009,83,860,33],[1009,85,860,37],[1010,0,861,2,"assert"],[1010,4,861,2,"assert"],[1010,10,861,8],[1010,11,861,9],[1010,17,861,8],[1010,19,861,17,"node"],[1010,23,861,8],[1010,25,861,23,"opts"],[1010,29,861,8],[1010,30,861,2],[1011,0,862,1],[1013,0,864,0],[1013,11,864,9,"assertPlaceholder"],[1013,28,864,0],[1013,29,864,27,"node"],[1013,33,864,0],[1013,35,864,44],[1014,0,864,44],[1014,8,864,33,"opts"],[1014,12,864,44],[1014,83,864,40],[1014,85,864,44],[1015,0,865,2,"assert"],[1015,4,865,2,"assert"],[1015,10,865,8],[1015,11,865,9],[1015,24,865,8],[1015,26,865,24,"node"],[1015,30,865,8],[1015,32,865,30,"opts"],[1015,36,865,8],[1015,37,865,2],[1016,0,866,1],[1018,0,868,0],[1018,11,868,9,"assertV8IntrinsicIdentifier"],[1018,38,868,0],[1018,39,868,37,"node"],[1018,43,868,0],[1018,45,868,54],[1019,0,868,54],[1019,8,868,43,"opts"],[1019,12,868,54],[1019,83,868,50],[1019,85,868,54],[1020,0,869,2,"assert"],[1020,4,869,2,"assert"],[1020,10,869,8],[1020,11,869,9],[1020,34,869,8],[1020,36,869,34,"node"],[1020,40,869,8],[1020,42,869,40,"opts"],[1020,46,869,8],[1020,47,869,2],[1021,0,870,1],[1023,0,872,0],[1023,11,872,9,"assertArgumentPlaceholder"],[1023,36,872,0],[1023,37,872,35,"node"],[1023,41,872,0],[1023,43,872,52],[1024,0,872,52],[1024,8,872,41,"opts"],[1024,12,872,52],[1024,83,872,48],[1024,85,872,52],[1025,0,873,2,"assert"],[1025,4,873,2,"assert"],[1025,10,873,8],[1025,11,873,9],[1025,32,873,8],[1025,34,873,32,"node"],[1025,38,873,8],[1025,40,873,38,"opts"],[1025,44,873,8],[1025,45,873,2],[1026,0,874,1],[1028,0,876,0],[1028,11,876,9,"assertAwaitExpression"],[1028,32,876,0],[1028,33,876,31,"node"],[1028,37,876,0],[1028,39,876,48],[1029,0,876,48],[1029,8,876,37,"opts"],[1029,12,876,48],[1029,83,876,44],[1029,85,876,48],[1030,0,877,2,"assert"],[1030,4,877,2,"assert"],[1030,10,877,8],[1030,11,877,9],[1030,28,877,8],[1030,30,877,28,"node"],[1030,34,877,8],[1030,36,877,34,"opts"],[1030,40,877,8],[1030,41,877,2],[1031,0,878,1],[1033,0,880,0],[1033,11,880,9,"assertBindExpression"],[1033,31,880,0],[1033,32,880,30,"node"],[1033,36,880,0],[1033,38,880,47],[1034,0,880,47],[1034,8,880,36,"opts"],[1034,12,880,47],[1034,83,880,43],[1034,85,880,47],[1035,0,881,2,"assert"],[1035,4,881,2,"assert"],[1035,10,881,8],[1035,11,881,9],[1035,27,881,8],[1035,29,881,27,"node"],[1035,33,881,8],[1035,35,881,33,"opts"],[1035,39,881,8],[1035,40,881,2],[1036,0,882,1],[1038,0,884,0],[1038,11,884,9,"assertClassProperty"],[1038,30,884,0],[1038,31,884,29,"node"],[1038,35,884,0],[1038,37,884,46],[1039,0,884,46],[1039,8,884,35,"opts"],[1039,12,884,46],[1039,83,884,42],[1039,85,884,46],[1040,0,885,2,"assert"],[1040,4,885,2,"assert"],[1040,10,885,8],[1040,11,885,9],[1040,26,885,8],[1040,28,885,26,"node"],[1040,32,885,8],[1040,34,885,32,"opts"],[1040,38,885,8],[1040,39,885,2],[1041,0,886,1],[1043,0,888,0],[1043,11,888,9,"assertOptionalMemberExpression"],[1043,41,888,0],[1043,42,888,40,"node"],[1043,46,888,0],[1043,48,888,57],[1044,0,888,57],[1044,8,888,46,"opts"],[1044,12,888,57],[1044,83,888,53],[1044,85,888,57],[1045,0,889,2,"assert"],[1045,4,889,2,"assert"],[1045,10,889,8],[1045,11,889,9],[1045,37,889,8],[1045,39,889,37,"node"],[1045,43,889,8],[1045,45,889,43,"opts"],[1045,49,889,8],[1045,50,889,2],[1046,0,890,1],[1048,0,892,0],[1048,11,892,9,"assertPipelineTopicExpression"],[1048,40,892,0],[1048,41,892,39,"node"],[1048,45,892,0],[1048,47,892,56],[1049,0,892,56],[1049,8,892,45,"opts"],[1049,12,892,56],[1049,83,892,52],[1049,85,892,56],[1050,0,893,2,"assert"],[1050,4,893,2,"assert"],[1050,10,893,8],[1050,11,893,9],[1050,36,893,8],[1050,38,893,36,"node"],[1050,42,893,8],[1050,44,893,42,"opts"],[1050,48,893,8],[1050,49,893,2],[1051,0,894,1],[1053,0,896,0],[1053,11,896,9,"assertPipelineBareFunction"],[1053,37,896,0],[1053,38,896,36,"node"],[1053,42,896,0],[1053,44,896,53],[1054,0,896,53],[1054,8,896,42,"opts"],[1054,12,896,53],[1054,83,896,49],[1054,85,896,53],[1055,0,897,2,"assert"],[1055,4,897,2,"assert"],[1055,10,897,8],[1055,11,897,9],[1055,33,897,8],[1055,35,897,33,"node"],[1055,39,897,8],[1055,41,897,39,"opts"],[1055,45,897,8],[1055,46,897,2],[1056,0,898,1],[1058,0,900,0],[1058,11,900,9,"assertPipelinePrimaryTopicReference"],[1058,46,900,0],[1058,47,900,45,"node"],[1058,51,900,0],[1058,53,900,62],[1059,0,900,62],[1059,8,900,51,"opts"],[1059,12,900,62],[1059,83,900,58],[1059,85,900,62],[1060,0,901,2,"assert"],[1060,4,901,2,"assert"],[1060,10,901,8],[1060,11,901,9],[1060,42,901,8],[1060,44,901,42,"node"],[1060,48,901,8],[1060,50,901,48,"opts"],[1060,54,901,8],[1060,55,901,2],[1061,0,902,1],[1063,0,904,0],[1063,11,904,9,"assertOptionalCallExpression"],[1063,39,904,0],[1063,40,904,38,"node"],[1063,44,904,0],[1063,46,904,55],[1064,0,904,55],[1064,8,904,44,"opts"],[1064,12,904,55],[1064,83,904,51],[1064,85,904,55],[1065,0,905,2,"assert"],[1065,4,905,2,"assert"],[1065,10,905,8],[1065,11,905,9],[1065,35,905,8],[1065,37,905,35,"node"],[1065,41,905,8],[1065,43,905,41,"opts"],[1065,47,905,8],[1065,48,905,2],[1066,0,906,1],[1068,0,908,0],[1068,11,908,9,"assertClassPrivateProperty"],[1068,37,908,0],[1068,38,908,36,"node"],[1068,42,908,0],[1068,44,908,53],[1069,0,908,53],[1069,8,908,42,"opts"],[1069,12,908,53],[1069,83,908,49],[1069,85,908,53],[1070,0,909,2,"assert"],[1070,4,909,2,"assert"],[1070,10,909,8],[1070,11,909,9],[1070,33,909,8],[1070,35,909,33,"node"],[1070,39,909,8],[1070,41,909,39,"opts"],[1070,45,909,8],[1070,46,909,2],[1071,0,910,1],[1073,0,912,0],[1073,11,912,9,"assertClassPrivateMethod"],[1073,35,912,0],[1073,36,912,34,"node"],[1073,40,912,0],[1073,42,912,51],[1074,0,912,51],[1074,8,912,40,"opts"],[1074,12,912,51],[1074,83,912,47],[1074,85,912,51],[1075,0,913,2,"assert"],[1075,4,913,2,"assert"],[1075,10,913,8],[1075,11,913,9],[1075,31,913,8],[1075,33,913,31,"node"],[1075,37,913,8],[1075,39,913,37,"opts"],[1075,43,913,8],[1075,44,913,2],[1076,0,914,1],[1078,0,916,0],[1078,11,916,9,"assertImport"],[1078,23,916,0],[1078,24,916,22,"node"],[1078,28,916,0],[1078,30,916,39],[1079,0,916,39],[1079,8,916,28,"opts"],[1079,12,916,39],[1079,83,916,35],[1079,85,916,39],[1080,0,917,2,"assert"],[1080,4,917,2,"assert"],[1080,10,917,8],[1080,11,917,9],[1080,19,917,8],[1080,21,917,19,"node"],[1080,25,917,8],[1080,27,917,25,"opts"],[1080,31,917,8],[1080,32,917,2],[1081,0,918,1],[1083,0,920,0],[1083,11,920,9,"assertDecorator"],[1083,26,920,0],[1083,27,920,25,"node"],[1083,31,920,0],[1083,33,920,42],[1084,0,920,42],[1084,8,920,31,"opts"],[1084,12,920,42],[1084,83,920,38],[1084,85,920,42],[1085,0,921,2,"assert"],[1085,4,921,2,"assert"],[1085,10,921,8],[1085,11,921,9],[1085,22,921,8],[1085,24,921,22,"node"],[1085,28,921,8],[1085,30,921,28,"opts"],[1085,34,921,8],[1085,35,921,2],[1086,0,922,1],[1088,0,924,0],[1088,11,924,9,"assertDoExpression"],[1088,29,924,0],[1088,30,924,28,"node"],[1088,34,924,0],[1088,36,924,45],[1089,0,924,45],[1089,8,924,34,"opts"],[1089,12,924,45],[1089,83,924,41],[1089,85,924,45],[1090,0,925,2,"assert"],[1090,4,925,2,"assert"],[1090,10,925,8],[1090,11,925,9],[1090,25,925,8],[1090,27,925,25,"node"],[1090,31,925,8],[1090,33,925,31,"opts"],[1090,37,925,8],[1090,38,925,2],[1091,0,926,1],[1093,0,928,0],[1093,11,928,9,"assertExportDefaultSpecifier"],[1093,39,928,0],[1093,40,928,38,"node"],[1093,44,928,0],[1093,46,928,55],[1094,0,928,55],[1094,8,928,44,"opts"],[1094,12,928,55],[1094,83,928,51],[1094,85,928,55],[1095,0,929,2,"assert"],[1095,4,929,2,"assert"],[1095,10,929,8],[1095,11,929,9],[1095,35,929,8],[1095,37,929,35,"node"],[1095,41,929,8],[1095,43,929,41,"opts"],[1095,47,929,8],[1095,48,929,2],[1096,0,930,1],[1098,0,932,0],[1098,11,932,9,"assertExportNamespaceSpecifier"],[1098,41,932,0],[1098,42,932,40,"node"],[1098,46,932,0],[1098,48,932,57],[1099,0,932,57],[1099,8,932,46,"opts"],[1099,12,932,57],[1099,83,932,53],[1099,85,932,57],[1100,0,933,2,"assert"],[1100,4,933,2,"assert"],[1100,10,933,8],[1100,11,933,9],[1100,37,933,8],[1100,39,933,37,"node"],[1100,43,933,8],[1100,45,933,43,"opts"],[1100,49,933,8],[1100,50,933,2],[1101,0,934,1],[1103,0,936,0],[1103,11,936,9,"assertPrivateName"],[1103,28,936,0],[1103,29,936,27,"node"],[1103,33,936,0],[1103,35,936,44],[1104,0,936,44],[1104,8,936,33,"opts"],[1104,12,936,44],[1104,83,936,40],[1104,85,936,44],[1105,0,937,2,"assert"],[1105,4,937,2,"assert"],[1105,10,937,8],[1105,11,937,9],[1105,24,937,8],[1105,26,937,24,"node"],[1105,30,937,8],[1105,32,937,30,"opts"],[1105,36,937,8],[1105,37,937,2],[1106,0,938,1],[1108,0,940,0],[1108,11,940,9,"assertBigIntLiteral"],[1108,30,940,0],[1108,31,940,29,"node"],[1108,35,940,0],[1108,37,940,46],[1109,0,940,46],[1109,8,940,35,"opts"],[1109,12,940,46],[1109,83,940,42],[1109,85,940,46],[1110,0,941,2,"assert"],[1110,4,941,2,"assert"],[1110,10,941,8],[1110,11,941,9],[1110,26,941,8],[1110,28,941,26,"node"],[1110,32,941,8],[1110,34,941,32,"opts"],[1110,38,941,8],[1110,39,941,2],[1111,0,942,1],[1113,0,944,0],[1113,11,944,9,"assertTSParameterProperty"],[1113,36,944,0],[1113,37,944,35,"node"],[1113,41,944,0],[1113,43,944,52],[1114,0,944,52],[1114,8,944,41,"opts"],[1114,12,944,52],[1114,83,944,48],[1114,85,944,52],[1115,0,945,2,"assert"],[1115,4,945,2,"assert"],[1115,10,945,8],[1115,11,945,9],[1115,32,945,8],[1115,34,945,32,"node"],[1115,38,945,8],[1115,40,945,38,"opts"],[1115,44,945,8],[1115,45,945,2],[1116,0,946,1],[1118,0,948,0],[1118,11,948,9,"assertTSDeclareFunction"],[1118,34,948,0],[1118,35,948,33,"node"],[1118,39,948,0],[1118,41,948,50],[1119,0,948,50],[1119,8,948,39,"opts"],[1119,12,948,50],[1119,83,948,46],[1119,85,948,50],[1120,0,949,2,"assert"],[1120,4,949,2,"assert"],[1120,10,949,8],[1120,11,949,9],[1120,30,949,8],[1120,32,949,30,"node"],[1120,36,949,8],[1120,38,949,36,"opts"],[1120,42,949,8],[1120,43,949,2],[1121,0,950,1],[1123,0,952,0],[1123,11,952,9,"assertTSDeclareMethod"],[1123,32,952,0],[1123,33,952,31,"node"],[1123,37,952,0],[1123,39,952,48],[1124,0,952,48],[1124,8,952,37,"opts"],[1124,12,952,48],[1124,83,952,44],[1124,85,952,48],[1125,0,953,2,"assert"],[1125,4,953,2,"assert"],[1125,10,953,8],[1125,11,953,9],[1125,28,953,8],[1125,30,953,28,"node"],[1125,34,953,8],[1125,36,953,34,"opts"],[1125,40,953,8],[1125,41,953,2],[1126,0,954,1],[1128,0,956,0],[1128,11,956,9,"assertTSQualifiedName"],[1128,32,956,0],[1128,33,956,31,"node"],[1128,37,956,0],[1128,39,956,48],[1129,0,956,48],[1129,8,956,37,"opts"],[1129,12,956,48],[1129,83,956,44],[1129,85,956,48],[1130,0,957,2,"assert"],[1130,4,957,2,"assert"],[1130,10,957,8],[1130,11,957,9],[1130,28,957,8],[1130,30,957,28,"node"],[1130,34,957,8],[1130,36,957,34,"opts"],[1130,40,957,8],[1130,41,957,2],[1131,0,958,1],[1133,0,960,0],[1133,11,960,9,"assertTSCallSignatureDeclaration"],[1133,43,960,0],[1133,44,960,42,"node"],[1133,48,960,0],[1133,50,960,59],[1134,0,960,59],[1134,8,960,48,"opts"],[1134,12,960,59],[1134,83,960,55],[1134,85,960,59],[1135,0,961,2,"assert"],[1135,4,961,2,"assert"],[1135,10,961,8],[1135,11,961,9],[1135,39,961,8],[1135,41,961,39,"node"],[1135,45,961,8],[1135,47,961,45,"opts"],[1135,51,961,8],[1135,52,961,2],[1136,0,962,1],[1138,0,964,0],[1138,11,964,9,"assertTSConstructSignatureDeclaration"],[1138,48,964,0],[1138,49,964,47,"node"],[1138,53,964,0],[1138,55,964,64],[1139,0,964,64],[1139,8,964,53,"opts"],[1139,12,964,64],[1139,83,964,60],[1139,85,964,64],[1140,0,965,2,"assert"],[1140,4,965,2,"assert"],[1140,10,965,8],[1140,11,965,9],[1140,44,965,8],[1140,46,965,44,"node"],[1140,50,965,8],[1140,52,965,50,"opts"],[1140,56,965,8],[1140,57,965,2],[1141,0,966,1],[1143,0,968,0],[1143,11,968,9,"assertTSPropertySignature"],[1143,36,968,0],[1143,37,968,35,"node"],[1143,41,968,0],[1143,43,968,52],[1144,0,968,52],[1144,8,968,41,"opts"],[1144,12,968,52],[1144,83,968,48],[1144,85,968,52],[1145,0,969,2,"assert"],[1145,4,969,2,"assert"],[1145,10,969,8],[1145,11,969,9],[1145,32,969,8],[1145,34,969,32,"node"],[1145,38,969,8],[1145,40,969,38,"opts"],[1145,44,969,8],[1145,45,969,2],[1146,0,970,1],[1148,0,972,0],[1148,11,972,9,"assertTSMethodSignature"],[1148,34,972,0],[1148,35,972,33,"node"],[1148,39,972,0],[1148,41,972,50],[1149,0,972,50],[1149,8,972,39,"opts"],[1149,12,972,50],[1149,83,972,46],[1149,85,972,50],[1150,0,973,2,"assert"],[1150,4,973,2,"assert"],[1150,10,973,8],[1150,11,973,9],[1150,30,973,8],[1150,32,973,30,"node"],[1150,36,973,8],[1150,38,973,36,"opts"],[1150,42,973,8],[1150,43,973,2],[1151,0,974,1],[1153,0,976,0],[1153,11,976,9,"assertTSIndexSignature"],[1153,33,976,0],[1153,34,976,32,"node"],[1153,38,976,0],[1153,40,976,49],[1154,0,976,49],[1154,8,976,38,"opts"],[1154,12,976,49],[1154,83,976,45],[1154,85,976,49],[1155,0,977,2,"assert"],[1155,4,977,2,"assert"],[1155,10,977,8],[1155,11,977,9],[1155,29,977,8],[1155,31,977,29,"node"],[1155,35,977,8],[1155,37,977,35,"opts"],[1155,41,977,8],[1155,42,977,2],[1156,0,978,1],[1158,0,980,0],[1158,11,980,9,"assertTSAnyKeyword"],[1158,29,980,0],[1158,30,980,28,"node"],[1158,34,980,0],[1158,36,980,45],[1159,0,980,45],[1159,8,980,34,"opts"],[1159,12,980,45],[1159,83,980,41],[1159,85,980,45],[1160,0,981,2,"assert"],[1160,4,981,2,"assert"],[1160,10,981,8],[1160,11,981,9],[1160,25,981,8],[1160,27,981,25,"node"],[1160,31,981,8],[1160,33,981,31,"opts"],[1160,37,981,8],[1160,38,981,2],[1161,0,982,1],[1163,0,984,0],[1163,11,984,9,"assertTSBooleanKeyword"],[1163,33,984,0],[1163,34,984,32,"node"],[1163,38,984,0],[1163,40,984,49],[1164,0,984,49],[1164,8,984,38,"opts"],[1164,12,984,49],[1164,83,984,45],[1164,85,984,49],[1165,0,985,2,"assert"],[1165,4,985,2,"assert"],[1165,10,985,8],[1165,11,985,9],[1165,29,985,8],[1165,31,985,29,"node"],[1165,35,985,8],[1165,37,985,35,"opts"],[1165,41,985,8],[1165,42,985,2],[1166,0,986,1],[1168,0,988,0],[1168,11,988,9,"assertTSBigIntKeyword"],[1168,32,988,0],[1168,33,988,31,"node"],[1168,37,988,0],[1168,39,988,48],[1169,0,988,48],[1169,8,988,37,"opts"],[1169,12,988,48],[1169,83,988,44],[1169,85,988,48],[1170,0,989,2,"assert"],[1170,4,989,2,"assert"],[1170,10,989,8],[1170,11,989,9],[1170,28,989,8],[1170,30,989,28,"node"],[1170,34,989,8],[1170,36,989,34,"opts"],[1170,40,989,8],[1170,41,989,2],[1171,0,990,1],[1173,0,992,0],[1173,11,992,9,"assertTSNeverKeyword"],[1173,31,992,0],[1173,32,992,30,"node"],[1173,36,992,0],[1173,38,992,47],[1174,0,992,47],[1174,8,992,36,"opts"],[1174,12,992,47],[1174,83,992,43],[1174,85,992,47],[1175,0,993,2,"assert"],[1175,4,993,2,"assert"],[1175,10,993,8],[1175,11,993,9],[1175,27,993,8],[1175,29,993,27,"node"],[1175,33,993,8],[1175,35,993,33,"opts"],[1175,39,993,8],[1175,40,993,2],[1176,0,994,1],[1178,0,996,0],[1178,11,996,9,"assertTSNullKeyword"],[1178,30,996,0],[1178,31,996,29,"node"],[1178,35,996,0],[1178,37,996,46],[1179,0,996,46],[1179,8,996,35,"opts"],[1179,12,996,46],[1179,83,996,42],[1179,85,996,46],[1180,0,997,2,"assert"],[1180,4,997,2,"assert"],[1180,10,997,8],[1180,11,997,9],[1180,26,997,8],[1180,28,997,26,"node"],[1180,32,997,8],[1180,34,997,32,"opts"],[1180,38,997,8],[1180,39,997,2],[1181,0,998,1],[1183,0,1000,0],[1183,11,1000,9,"assertTSNumberKeyword"],[1183,32,1000,0],[1183,33,1000,31,"node"],[1183,37,1000,0],[1183,39,1000,48],[1184,0,1000,48],[1184,8,1000,37,"opts"],[1184,12,1000,48],[1184,83,1000,44],[1184,85,1000,48],[1185,0,1001,2,"assert"],[1185,4,1001,2,"assert"],[1185,10,1001,8],[1185,11,1001,9],[1185,28,1001,8],[1185,30,1001,28,"node"],[1185,34,1001,8],[1185,36,1001,34,"opts"],[1185,40,1001,8],[1185,41,1001,2],[1186,0,1002,1],[1188,0,1004,0],[1188,11,1004,9,"assertTSObjectKeyword"],[1188,32,1004,0],[1188,33,1004,31,"node"],[1188,37,1004,0],[1188,39,1004,48],[1189,0,1004,48],[1189,8,1004,37,"opts"],[1189,12,1004,48],[1189,83,1004,44],[1189,85,1004,48],[1190,0,1005,2,"assert"],[1190,4,1005,2,"assert"],[1190,10,1005,8],[1190,11,1005,9],[1190,28,1005,8],[1190,30,1005,28,"node"],[1190,34,1005,8],[1190,36,1005,34,"opts"],[1190,40,1005,8],[1190,41,1005,2],[1191,0,1006,1],[1193,0,1008,0],[1193,11,1008,9,"assertTSStringKeyword"],[1193,32,1008,0],[1193,33,1008,31,"node"],[1193,37,1008,0],[1193,39,1008,48],[1194,0,1008,48],[1194,8,1008,37,"opts"],[1194,12,1008,48],[1194,83,1008,44],[1194,85,1008,48],[1195,0,1009,2,"assert"],[1195,4,1009,2,"assert"],[1195,10,1009,8],[1195,11,1009,9],[1195,28,1009,8],[1195,30,1009,28,"node"],[1195,34,1009,8],[1195,36,1009,34,"opts"],[1195,40,1009,8],[1195,41,1009,2],[1196,0,1010,1],[1198,0,1012,0],[1198,11,1012,9,"assertTSSymbolKeyword"],[1198,32,1012,0],[1198,33,1012,31,"node"],[1198,37,1012,0],[1198,39,1012,48],[1199,0,1012,48],[1199,8,1012,37,"opts"],[1199,12,1012,48],[1199,83,1012,44],[1199,85,1012,48],[1200,0,1013,2,"assert"],[1200,4,1013,2,"assert"],[1200,10,1013,8],[1200,11,1013,9],[1200,28,1013,8],[1200,30,1013,28,"node"],[1200,34,1013,8],[1200,36,1013,34,"opts"],[1200,40,1013,8],[1200,41,1013,2],[1201,0,1014,1],[1203,0,1016,0],[1203,11,1016,9,"assertTSUndefinedKeyword"],[1203,35,1016,0],[1203,36,1016,34,"node"],[1203,40,1016,0],[1203,42,1016,51],[1204,0,1016,51],[1204,8,1016,40,"opts"],[1204,12,1016,51],[1204,83,1016,47],[1204,85,1016,51],[1205,0,1017,2,"assert"],[1205,4,1017,2,"assert"],[1205,10,1017,8],[1205,11,1017,9],[1205,31,1017,8],[1205,33,1017,31,"node"],[1205,37,1017,8],[1205,39,1017,37,"opts"],[1205,43,1017,8],[1205,44,1017,2],[1206,0,1018,1],[1208,0,1020,0],[1208,11,1020,9,"assertTSUnknownKeyword"],[1208,33,1020,0],[1208,34,1020,32,"node"],[1208,38,1020,0],[1208,40,1020,49],[1209,0,1020,49],[1209,8,1020,38,"opts"],[1209,12,1020,49],[1209,83,1020,45],[1209,85,1020,49],[1210,0,1021,2,"assert"],[1210,4,1021,2,"assert"],[1210,10,1021,8],[1210,11,1021,9],[1210,29,1021,8],[1210,31,1021,29,"node"],[1210,35,1021,8],[1210,37,1021,35,"opts"],[1210,41,1021,8],[1210,42,1021,2],[1211,0,1022,1],[1213,0,1024,0],[1213,11,1024,9,"assertTSVoidKeyword"],[1213,30,1024,0],[1213,31,1024,29,"node"],[1213,35,1024,0],[1213,37,1024,46],[1214,0,1024,46],[1214,8,1024,35,"opts"],[1214,12,1024,46],[1214,83,1024,42],[1214,85,1024,46],[1215,0,1025,2,"assert"],[1215,4,1025,2,"assert"],[1215,10,1025,8],[1215,11,1025,9],[1215,26,1025,8],[1215,28,1025,26,"node"],[1215,32,1025,8],[1215,34,1025,32,"opts"],[1215,38,1025,8],[1215,39,1025,2],[1216,0,1026,1],[1218,0,1028,0],[1218,11,1028,9,"assertTSThisType"],[1218,27,1028,0],[1218,28,1028,26,"node"],[1218,32,1028,0],[1218,34,1028,43],[1219,0,1028,43],[1219,8,1028,32,"opts"],[1219,12,1028,43],[1219,83,1028,39],[1219,85,1028,43],[1220,0,1029,2,"assert"],[1220,4,1029,2,"assert"],[1220,10,1029,8],[1220,11,1029,9],[1220,23,1029,8],[1220,25,1029,23,"node"],[1220,29,1029,8],[1220,31,1029,29,"opts"],[1220,35,1029,8],[1220,36,1029,2],[1221,0,1030,1],[1223,0,1032,0],[1223,11,1032,9,"assertTSFunctionType"],[1223,31,1032,0],[1223,32,1032,30,"node"],[1223,36,1032,0],[1223,38,1032,47],[1224,0,1032,47],[1224,8,1032,36,"opts"],[1224,12,1032,47],[1224,83,1032,43],[1224,85,1032,47],[1225,0,1033,2,"assert"],[1225,4,1033,2,"assert"],[1225,10,1033,8],[1225,11,1033,9],[1225,27,1033,8],[1225,29,1033,27,"node"],[1225,33,1033,8],[1225,35,1033,33,"opts"],[1225,39,1033,8],[1225,40,1033,2],[1226,0,1034,1],[1228,0,1036,0],[1228,11,1036,9,"assertTSConstructorType"],[1228,34,1036,0],[1228,35,1036,33,"node"],[1228,39,1036,0],[1228,41,1036,50],[1229,0,1036,50],[1229,8,1036,39,"opts"],[1229,12,1036,50],[1229,83,1036,46],[1229,85,1036,50],[1230,0,1037,2,"assert"],[1230,4,1037,2,"assert"],[1230,10,1037,8],[1230,11,1037,9],[1230,30,1037,8],[1230,32,1037,30,"node"],[1230,36,1037,8],[1230,38,1037,36,"opts"],[1230,42,1037,8],[1230,43,1037,2],[1231,0,1038,1],[1233,0,1040,0],[1233,11,1040,9,"assertTSTypeReference"],[1233,32,1040,0],[1233,33,1040,31,"node"],[1233,37,1040,0],[1233,39,1040,48],[1234,0,1040,48],[1234,8,1040,37,"opts"],[1234,12,1040,48],[1234,83,1040,44],[1234,85,1040,48],[1235,0,1041,2,"assert"],[1235,4,1041,2,"assert"],[1235,10,1041,8],[1235,11,1041,9],[1235,28,1041,8],[1235,30,1041,28,"node"],[1235,34,1041,8],[1235,36,1041,34,"opts"],[1235,40,1041,8],[1235,41,1041,2],[1236,0,1042,1],[1238,0,1044,0],[1238,11,1044,9,"assertTSTypePredicate"],[1238,32,1044,0],[1238,33,1044,31,"node"],[1238,37,1044,0],[1238,39,1044,48],[1239,0,1044,48],[1239,8,1044,37,"opts"],[1239,12,1044,48],[1239,83,1044,44],[1239,85,1044,48],[1240,0,1045,2,"assert"],[1240,4,1045,2,"assert"],[1240,10,1045,8],[1240,11,1045,9],[1240,28,1045,8],[1240,30,1045,28,"node"],[1240,34,1045,8],[1240,36,1045,34,"opts"],[1240,40,1045,8],[1240,41,1045,2],[1241,0,1046,1],[1243,0,1048,0],[1243,11,1048,9,"assertTSTypeQuery"],[1243,28,1048,0],[1243,29,1048,27,"node"],[1243,33,1048,0],[1243,35,1048,44],[1244,0,1048,44],[1244,8,1048,33,"opts"],[1244,12,1048,44],[1244,83,1048,40],[1244,85,1048,44],[1245,0,1049,2,"assert"],[1245,4,1049,2,"assert"],[1245,10,1049,8],[1245,11,1049,9],[1245,24,1049,8],[1245,26,1049,24,"node"],[1245,30,1049,8],[1245,32,1049,30,"opts"],[1245,36,1049,8],[1245,37,1049,2],[1246,0,1050,1],[1248,0,1052,0],[1248,11,1052,9,"assertTSTypeLiteral"],[1248,30,1052,0],[1248,31,1052,29,"node"],[1248,35,1052,0],[1248,37,1052,46],[1249,0,1052,46],[1249,8,1052,35,"opts"],[1249,12,1052,46],[1249,83,1052,42],[1249,85,1052,46],[1250,0,1053,2,"assert"],[1250,4,1053,2,"assert"],[1250,10,1053,8],[1250,11,1053,9],[1250,26,1053,8],[1250,28,1053,26,"node"],[1250,32,1053,8],[1250,34,1053,32,"opts"],[1250,38,1053,8],[1250,39,1053,2],[1251,0,1054,1],[1253,0,1056,0],[1253,11,1056,9,"assertTSArrayType"],[1253,28,1056,0],[1253,29,1056,27,"node"],[1253,33,1056,0],[1253,35,1056,44],[1254,0,1056,44],[1254,8,1056,33,"opts"],[1254,12,1056,44],[1254,83,1056,40],[1254,85,1056,44],[1255,0,1057,2,"assert"],[1255,4,1057,2,"assert"],[1255,10,1057,8],[1255,11,1057,9],[1255,24,1057,8],[1255,26,1057,24,"node"],[1255,30,1057,8],[1255,32,1057,30,"opts"],[1255,36,1057,8],[1255,37,1057,2],[1256,0,1058,1],[1258,0,1060,0],[1258,11,1060,9,"assertTSTupleType"],[1258,28,1060,0],[1258,29,1060,27,"node"],[1258,33,1060,0],[1258,35,1060,44],[1259,0,1060,44],[1259,8,1060,33,"opts"],[1259,12,1060,44],[1259,83,1060,40],[1259,85,1060,44],[1260,0,1061,2,"assert"],[1260,4,1061,2,"assert"],[1260,10,1061,8],[1260,11,1061,9],[1260,24,1061,8],[1260,26,1061,24,"node"],[1260,30,1061,8],[1260,32,1061,30,"opts"],[1260,36,1061,8],[1260,37,1061,2],[1261,0,1062,1],[1263,0,1064,0],[1263,11,1064,9,"assertTSOptionalType"],[1263,31,1064,0],[1263,32,1064,30,"node"],[1263,36,1064,0],[1263,38,1064,47],[1264,0,1064,47],[1264,8,1064,36,"opts"],[1264,12,1064,47],[1264,83,1064,43],[1264,85,1064,47],[1265,0,1065,2,"assert"],[1265,4,1065,2,"assert"],[1265,10,1065,8],[1265,11,1065,9],[1265,27,1065,8],[1265,29,1065,27,"node"],[1265,33,1065,8],[1265,35,1065,33,"opts"],[1265,39,1065,8],[1265,40,1065,2],[1266,0,1066,1],[1268,0,1068,0],[1268,11,1068,9,"assertTSRestType"],[1268,27,1068,0],[1268,28,1068,26,"node"],[1268,32,1068,0],[1268,34,1068,43],[1269,0,1068,43],[1269,8,1068,32,"opts"],[1269,12,1068,43],[1269,83,1068,39],[1269,85,1068,43],[1270,0,1069,2,"assert"],[1270,4,1069,2,"assert"],[1270,10,1069,8],[1270,11,1069,9],[1270,23,1069,8],[1270,25,1069,23,"node"],[1270,29,1069,8],[1270,31,1069,29,"opts"],[1270,35,1069,8],[1270,36,1069,2],[1271,0,1070,1],[1273,0,1072,0],[1273,11,1072,9,"assertTSUnionType"],[1273,28,1072,0],[1273,29,1072,27,"node"],[1273,33,1072,0],[1273,35,1072,44],[1274,0,1072,44],[1274,8,1072,33,"opts"],[1274,12,1072,44],[1274,83,1072,40],[1274,85,1072,44],[1275,0,1073,2,"assert"],[1275,4,1073,2,"assert"],[1275,10,1073,8],[1275,11,1073,9],[1275,24,1073,8],[1275,26,1073,24,"node"],[1275,30,1073,8],[1275,32,1073,30,"opts"],[1275,36,1073,8],[1275,37,1073,2],[1276,0,1074,1],[1278,0,1076,0],[1278,11,1076,9,"assertTSIntersectionType"],[1278,35,1076,0],[1278,36,1076,34,"node"],[1278,40,1076,0],[1278,42,1076,51],[1279,0,1076,51],[1279,8,1076,40,"opts"],[1279,12,1076,51],[1279,83,1076,47],[1279,85,1076,51],[1280,0,1077,2,"assert"],[1280,4,1077,2,"assert"],[1280,10,1077,8],[1280,11,1077,9],[1280,31,1077,8],[1280,33,1077,31,"node"],[1280,37,1077,8],[1280,39,1077,37,"opts"],[1280,43,1077,8],[1280,44,1077,2],[1281,0,1078,1],[1283,0,1080,0],[1283,11,1080,9,"assertTSConditionalType"],[1283,34,1080,0],[1283,35,1080,33,"node"],[1283,39,1080,0],[1283,41,1080,50],[1284,0,1080,50],[1284,8,1080,39,"opts"],[1284,12,1080,50],[1284,83,1080,46],[1284,85,1080,50],[1285,0,1081,2,"assert"],[1285,4,1081,2,"assert"],[1285,10,1081,8],[1285,11,1081,9],[1285,30,1081,8],[1285,32,1081,30,"node"],[1285,36,1081,8],[1285,38,1081,36,"opts"],[1285,42,1081,8],[1285,43,1081,2],[1286,0,1082,1],[1288,0,1084,0],[1288,11,1084,9,"assertTSInferType"],[1288,28,1084,0],[1288,29,1084,27,"node"],[1288,33,1084,0],[1288,35,1084,44],[1289,0,1084,44],[1289,8,1084,33,"opts"],[1289,12,1084,44],[1289,83,1084,40],[1289,85,1084,44],[1290,0,1085,2,"assert"],[1290,4,1085,2,"assert"],[1290,10,1085,8],[1290,11,1085,9],[1290,24,1085,8],[1290,26,1085,24,"node"],[1290,30,1085,8],[1290,32,1085,30,"opts"],[1290,36,1085,8],[1290,37,1085,2],[1291,0,1086,1],[1293,0,1088,0],[1293,11,1088,9,"assertTSParenthesizedType"],[1293,36,1088,0],[1293,37,1088,35,"node"],[1293,41,1088,0],[1293,43,1088,52],[1294,0,1088,52],[1294,8,1088,41,"opts"],[1294,12,1088,52],[1294,83,1088,48],[1294,85,1088,52],[1295,0,1089,2,"assert"],[1295,4,1089,2,"assert"],[1295,10,1089,8],[1295,11,1089,9],[1295,32,1089,8],[1295,34,1089,32,"node"],[1295,38,1089,8],[1295,40,1089,38,"opts"],[1295,44,1089,8],[1295,45,1089,2],[1296,0,1090,1],[1298,0,1092,0],[1298,11,1092,9,"assertTSTypeOperator"],[1298,31,1092,0],[1298,32,1092,30,"node"],[1298,36,1092,0],[1298,38,1092,47],[1299,0,1092,47],[1299,8,1092,36,"opts"],[1299,12,1092,47],[1299,83,1092,43],[1299,85,1092,47],[1300,0,1093,2,"assert"],[1300,4,1093,2,"assert"],[1300,10,1093,8],[1300,11,1093,9],[1300,27,1093,8],[1300,29,1093,27,"node"],[1300,33,1093,8],[1300,35,1093,33,"opts"],[1300,39,1093,8],[1300,40,1093,2],[1301,0,1094,1],[1303,0,1096,0],[1303,11,1096,9,"assertTSIndexedAccessType"],[1303,36,1096,0],[1303,37,1096,35,"node"],[1303,41,1096,0],[1303,43,1096,52],[1304,0,1096,52],[1304,8,1096,41,"opts"],[1304,12,1096,52],[1304,83,1096,48],[1304,85,1096,52],[1305,0,1097,2,"assert"],[1305,4,1097,2,"assert"],[1305,10,1097,8],[1305,11,1097,9],[1305,32,1097,8],[1305,34,1097,32,"node"],[1305,38,1097,8],[1305,40,1097,38,"opts"],[1305,44,1097,8],[1305,45,1097,2],[1306,0,1098,1],[1308,0,1100,0],[1308,11,1100,9,"assertTSMappedType"],[1308,29,1100,0],[1308,30,1100,28,"node"],[1308,34,1100,0],[1308,36,1100,45],[1309,0,1100,45],[1309,8,1100,34,"opts"],[1309,12,1100,45],[1309,83,1100,41],[1309,85,1100,45],[1310,0,1101,2,"assert"],[1310,4,1101,2,"assert"],[1310,10,1101,8],[1310,11,1101,9],[1310,25,1101,8],[1310,27,1101,25,"node"],[1310,31,1101,8],[1310,33,1101,31,"opts"],[1310,37,1101,8],[1310,38,1101,2],[1311,0,1102,1],[1313,0,1104,0],[1313,11,1104,9,"assertTSLiteralType"],[1313,30,1104,0],[1313,31,1104,29,"node"],[1313,35,1104,0],[1313,37,1104,46],[1314,0,1104,46],[1314,8,1104,35,"opts"],[1314,12,1104,46],[1314,83,1104,42],[1314,85,1104,46],[1315,0,1105,2,"assert"],[1315,4,1105,2,"assert"],[1315,10,1105,8],[1315,11,1105,9],[1315,26,1105,8],[1315,28,1105,26,"node"],[1315,32,1105,8],[1315,34,1105,32,"opts"],[1315,38,1105,8],[1315,39,1105,2],[1316,0,1106,1],[1318,0,1108,0],[1318,11,1108,9,"assertTSExpressionWithTypeArguments"],[1318,46,1108,0],[1318,47,1108,45,"node"],[1318,51,1108,0],[1318,53,1108,62],[1319,0,1108,62],[1319,8,1108,51,"opts"],[1319,12,1108,62],[1319,83,1108,58],[1319,85,1108,62],[1320,0,1109,2,"assert"],[1320,4,1109,2,"assert"],[1320,10,1109,8],[1320,11,1109,9],[1320,42,1109,8],[1320,44,1109,42,"node"],[1320,48,1109,8],[1320,50,1109,48,"opts"],[1320,54,1109,8],[1320,55,1109,2],[1321,0,1110,1],[1323,0,1112,0],[1323,11,1112,9,"assertTSInterfaceDeclaration"],[1323,39,1112,0],[1323,40,1112,38,"node"],[1323,44,1112,0],[1323,46,1112,55],[1324,0,1112,55],[1324,8,1112,44,"opts"],[1324,12,1112,55],[1324,83,1112,51],[1324,85,1112,55],[1325,0,1113,2,"assert"],[1325,4,1113,2,"assert"],[1325,10,1113,8],[1325,11,1113,9],[1325,35,1113,8],[1325,37,1113,35,"node"],[1325,41,1113,8],[1325,43,1113,41,"opts"],[1325,47,1113,8],[1325,48,1113,2],[1326,0,1114,1],[1328,0,1116,0],[1328,11,1116,9,"assertTSInterfaceBody"],[1328,32,1116,0],[1328,33,1116,31,"node"],[1328,37,1116,0],[1328,39,1116,48],[1329,0,1116,48],[1329,8,1116,37,"opts"],[1329,12,1116,48],[1329,83,1116,44],[1329,85,1116,48],[1330,0,1117,2,"assert"],[1330,4,1117,2,"assert"],[1330,10,1117,8],[1330,11,1117,9],[1330,28,1117,8],[1330,30,1117,28,"node"],[1330,34,1117,8],[1330,36,1117,34,"opts"],[1330,40,1117,8],[1330,41,1117,2],[1331,0,1118,1],[1333,0,1120,0],[1333,11,1120,9,"assertTSTypeAliasDeclaration"],[1333,39,1120,0],[1333,40,1120,38,"node"],[1333,44,1120,0],[1333,46,1120,55],[1334,0,1120,55],[1334,8,1120,44,"opts"],[1334,12,1120,55],[1334,83,1120,51],[1334,85,1120,55],[1335,0,1121,2,"assert"],[1335,4,1121,2,"assert"],[1335,10,1121,8],[1335,11,1121,9],[1335,35,1121,8],[1335,37,1121,35,"node"],[1335,41,1121,8],[1335,43,1121,41,"opts"],[1335,47,1121,8],[1335,48,1121,2],[1336,0,1122,1],[1338,0,1124,0],[1338,11,1124,9,"assertTSAsExpression"],[1338,31,1124,0],[1338,32,1124,30,"node"],[1338,36,1124,0],[1338,38,1124,47],[1339,0,1124,47],[1339,8,1124,36,"opts"],[1339,12,1124,47],[1339,83,1124,43],[1339,85,1124,47],[1340,0,1125,2,"assert"],[1340,4,1125,2,"assert"],[1340,10,1125,8],[1340,11,1125,9],[1340,27,1125,8],[1340,29,1125,27,"node"],[1340,33,1125,8],[1340,35,1125,33,"opts"],[1340,39,1125,8],[1340,40,1125,2],[1341,0,1126,1],[1343,0,1128,0],[1343,11,1128,9,"assertTSTypeAssertion"],[1343,32,1128,0],[1343,33,1128,31,"node"],[1343,37,1128,0],[1343,39,1128,48],[1344,0,1128,48],[1344,8,1128,37,"opts"],[1344,12,1128,48],[1344,83,1128,44],[1344,85,1128,48],[1345,0,1129,2,"assert"],[1345,4,1129,2,"assert"],[1345,10,1129,8],[1345,11,1129,9],[1345,28,1129,8],[1345,30,1129,28,"node"],[1345,34,1129,8],[1345,36,1129,34,"opts"],[1345,40,1129,8],[1345,41,1129,2],[1346,0,1130,1],[1348,0,1132,0],[1348,11,1132,9,"assertTSEnumDeclaration"],[1348,34,1132,0],[1348,35,1132,33,"node"],[1348,39,1132,0],[1348,41,1132,50],[1349,0,1132,50],[1349,8,1132,39,"opts"],[1349,12,1132,50],[1349,83,1132,46],[1349,85,1132,50],[1350,0,1133,2,"assert"],[1350,4,1133,2,"assert"],[1350,10,1133,8],[1350,11,1133,9],[1350,30,1133,8],[1350,32,1133,30,"node"],[1350,36,1133,8],[1350,38,1133,36,"opts"],[1350,42,1133,8],[1350,43,1133,2],[1351,0,1134,1],[1353,0,1136,0],[1353,11,1136,9,"assertTSEnumMember"],[1353,29,1136,0],[1353,30,1136,28,"node"],[1353,34,1136,0],[1353,36,1136,45],[1354,0,1136,45],[1354,8,1136,34,"opts"],[1354,12,1136,45],[1354,83,1136,41],[1354,85,1136,45],[1355,0,1137,2,"assert"],[1355,4,1137,2,"assert"],[1355,10,1137,8],[1355,11,1137,9],[1355,25,1137,8],[1355,27,1137,25,"node"],[1355,31,1137,8],[1355,33,1137,31,"opts"],[1355,37,1137,8],[1355,38,1137,2],[1356,0,1138,1],[1358,0,1140,0],[1358,11,1140,9,"assertTSModuleDeclaration"],[1358,36,1140,0],[1358,37,1140,35,"node"],[1358,41,1140,0],[1358,43,1140,52],[1359,0,1140,52],[1359,8,1140,41,"opts"],[1359,12,1140,52],[1359,83,1140,48],[1359,85,1140,52],[1360,0,1141,2,"assert"],[1360,4,1141,2,"assert"],[1360,10,1141,8],[1360,11,1141,9],[1360,32,1141,8],[1360,34,1141,32,"node"],[1360,38,1141,8],[1360,40,1141,38,"opts"],[1360,44,1141,8],[1360,45,1141,2],[1361,0,1142,1],[1363,0,1144,0],[1363,11,1144,9,"assertTSModuleBlock"],[1363,30,1144,0],[1363,31,1144,29,"node"],[1363,35,1144,0],[1363,37,1144,46],[1364,0,1144,46],[1364,8,1144,35,"opts"],[1364,12,1144,46],[1364,83,1144,42],[1364,85,1144,46],[1365,0,1145,2,"assert"],[1365,4,1145,2,"assert"],[1365,10,1145,8],[1365,11,1145,9],[1365,26,1145,8],[1365,28,1145,26,"node"],[1365,32,1145,8],[1365,34,1145,32,"opts"],[1365,38,1145,8],[1365,39,1145,2],[1366,0,1146,1],[1368,0,1148,0],[1368,11,1148,9,"assertTSImportType"],[1368,29,1148,0],[1368,30,1148,28,"node"],[1368,34,1148,0],[1368,36,1148,45],[1369,0,1148,45],[1369,8,1148,34,"opts"],[1369,12,1148,45],[1369,83,1148,41],[1369,85,1148,45],[1370,0,1149,2,"assert"],[1370,4,1149,2,"assert"],[1370,10,1149,8],[1370,11,1149,9],[1370,25,1149,8],[1370,27,1149,25,"node"],[1370,31,1149,8],[1370,33,1149,31,"opts"],[1370,37,1149,8],[1370,38,1149,2],[1371,0,1150,1],[1373,0,1152,0],[1373,11,1152,9,"assertTSImportEqualsDeclaration"],[1373,42,1152,0],[1373,43,1152,41,"node"],[1373,47,1152,0],[1373,49,1152,58],[1374,0,1152,58],[1374,8,1152,47,"opts"],[1374,12,1152,58],[1374,83,1152,54],[1374,85,1152,58],[1375,0,1153,2,"assert"],[1375,4,1153,2,"assert"],[1375,10,1153,8],[1375,11,1153,9],[1375,38,1153,8],[1375,40,1153,38,"node"],[1375,44,1153,8],[1375,46,1153,44,"opts"],[1375,50,1153,8],[1375,51,1153,2],[1376,0,1154,1],[1378,0,1156,0],[1378,11,1156,9,"assertTSExternalModuleReference"],[1378,42,1156,0],[1378,43,1156,41,"node"],[1378,47,1156,0],[1378,49,1156,58],[1379,0,1156,58],[1379,8,1156,47,"opts"],[1379,12,1156,58],[1379,83,1156,54],[1379,85,1156,58],[1380,0,1157,2,"assert"],[1380,4,1157,2,"assert"],[1380,10,1157,8],[1380,11,1157,9],[1380,38,1157,8],[1380,40,1157,38,"node"],[1380,44,1157,8],[1380,46,1157,44,"opts"],[1380,50,1157,8],[1380,51,1157,2],[1381,0,1158,1],[1383,0,1160,0],[1383,11,1160,9,"assertTSNonNullExpression"],[1383,36,1160,0],[1383,37,1160,35,"node"],[1383,41,1160,0],[1383,43,1160,52],[1384,0,1160,52],[1384,8,1160,41,"opts"],[1384,12,1160,52],[1384,83,1160,48],[1384,85,1160,52],[1385,0,1161,2,"assert"],[1385,4,1161,2,"assert"],[1385,10,1161,8],[1385,11,1161,9],[1385,32,1161,8],[1385,34,1161,32,"node"],[1385,38,1161,8],[1385,40,1161,38,"opts"],[1385,44,1161,8],[1385,45,1161,2],[1386,0,1162,1],[1388,0,1164,0],[1388,11,1164,9,"assertTSExportAssignment"],[1388,35,1164,0],[1388,36,1164,34,"node"],[1388,40,1164,0],[1388,42,1164,51],[1389,0,1164,51],[1389,8,1164,40,"opts"],[1389,12,1164,51],[1389,83,1164,47],[1389,85,1164,51],[1390,0,1165,2,"assert"],[1390,4,1165,2,"assert"],[1390,10,1165,8],[1390,11,1165,9],[1390,31,1165,8],[1390,33,1165,31,"node"],[1390,37,1165,8],[1390,39,1165,37,"opts"],[1390,43,1165,8],[1390,44,1165,2],[1391,0,1166,1],[1393,0,1168,0],[1393,11,1168,9,"assertTSNamespaceExportDeclaration"],[1393,45,1168,0],[1393,46,1168,44,"node"],[1393,50,1168,0],[1393,52,1168,61],[1394,0,1168,61],[1394,8,1168,50,"opts"],[1394,12,1168,61],[1394,83,1168,57],[1394,85,1168,61],[1395,0,1169,2,"assert"],[1395,4,1169,2,"assert"],[1395,10,1169,8],[1395,11,1169,9],[1395,41,1169,8],[1395,43,1169,41,"node"],[1395,47,1169,8],[1395,49,1169,47,"opts"],[1395,53,1169,8],[1395,54,1169,2],[1396,0,1170,1],[1398,0,1172,0],[1398,11,1172,9,"assertTSTypeAnnotation"],[1398,33,1172,0],[1398,34,1172,32,"node"],[1398,38,1172,0],[1398,40,1172,49],[1399,0,1172,49],[1399,8,1172,38,"opts"],[1399,12,1172,49],[1399,83,1172,45],[1399,85,1172,49],[1400,0,1173,2,"assert"],[1400,4,1173,2,"assert"],[1400,10,1173,8],[1400,11,1173,9],[1400,29,1173,8],[1400,31,1173,29,"node"],[1400,35,1173,8],[1400,37,1173,35,"opts"],[1400,41,1173,8],[1400,42,1173,2],[1401,0,1174,1],[1403,0,1176,0],[1403,11,1176,9,"assertTSTypeParameterInstantiation"],[1403,45,1176,0],[1403,46,1176,44,"node"],[1403,50,1176,0],[1403,52,1176,61],[1404,0,1176,61],[1404,8,1176,50,"opts"],[1404,12,1176,61],[1404,83,1176,57],[1404,85,1176,61],[1405,0,1177,2,"assert"],[1405,4,1177,2,"assert"],[1405,10,1177,8],[1405,11,1177,9],[1405,41,1177,8],[1405,43,1177,41,"node"],[1405,47,1177,8],[1405,49,1177,47,"opts"],[1405,53,1177,8],[1405,54,1177,2],[1406,0,1178,1],[1408,0,1180,0],[1408,11,1180,9,"assertTSTypeParameterDeclaration"],[1408,43,1180,0],[1408,44,1180,42,"node"],[1408,48,1180,0],[1408,50,1180,59],[1409,0,1180,59],[1409,8,1180,48,"opts"],[1409,12,1180,59],[1409,83,1180,55],[1409,85,1180,59],[1410,0,1181,2,"assert"],[1410,4,1181,2,"assert"],[1410,10,1181,8],[1410,11,1181,9],[1410,39,1181,8],[1410,41,1181,39,"node"],[1410,45,1181,8],[1410,47,1181,45,"opts"],[1410,51,1181,8],[1410,52,1181,2],[1411,0,1182,1],[1413,0,1184,0],[1413,11,1184,9,"assertTSTypeParameter"],[1413,32,1184,0],[1413,33,1184,31,"node"],[1413,37,1184,0],[1413,39,1184,48],[1414,0,1184,48],[1414,8,1184,37,"opts"],[1414,12,1184,48],[1414,83,1184,44],[1414,85,1184,48],[1415,0,1185,2,"assert"],[1415,4,1185,2,"assert"],[1415,10,1185,8],[1415,11,1185,9],[1415,28,1185,8],[1415,30,1185,28,"node"],[1415,34,1185,8],[1415,36,1185,34,"opts"],[1415,40,1185,8],[1415,41,1185,2],[1416,0,1186,1],[1418,0,1188,0],[1418,11,1188,9,"assertExpression"],[1418,27,1188,0],[1418,28,1188,26,"node"],[1418,32,1188,0],[1418,34,1188,43],[1419,0,1188,43],[1419,8,1188,32,"opts"],[1419,12,1188,43],[1419,83,1188,39],[1419,85,1188,43],[1420,0,1189,2,"assert"],[1420,4,1189,2,"assert"],[1420,10,1189,8],[1420,11,1189,9],[1420,23,1189,8],[1420,25,1189,23,"node"],[1420,29,1189,8],[1420,31,1189,29,"opts"],[1420,35,1189,8],[1420,36,1189,2],[1421,0,1190,1],[1423,0,1192,0],[1423,11,1192,9,"assertBinary"],[1423,23,1192,0],[1423,24,1192,22,"node"],[1423,28,1192,0],[1423,30,1192,39],[1424,0,1192,39],[1424,8,1192,28,"opts"],[1424,12,1192,39],[1424,83,1192,35],[1424,85,1192,39],[1425,0,1193,2,"assert"],[1425,4,1193,2,"assert"],[1425,10,1193,8],[1425,11,1193,9],[1425,19,1193,8],[1425,21,1193,19,"node"],[1425,25,1193,8],[1425,27,1193,25,"opts"],[1425,31,1193,8],[1425,32,1193,2],[1426,0,1194,1],[1428,0,1196,0],[1428,11,1196,9,"assertScopable"],[1428,25,1196,0],[1428,26,1196,24,"node"],[1428,30,1196,0],[1428,32,1196,41],[1429,0,1196,41],[1429,8,1196,30,"opts"],[1429,12,1196,41],[1429,83,1196,37],[1429,85,1196,41],[1430,0,1197,2,"assert"],[1430,4,1197,2,"assert"],[1430,10,1197,8],[1430,11,1197,9],[1430,21,1197,8],[1430,23,1197,21,"node"],[1430,27,1197,8],[1430,29,1197,27,"opts"],[1430,33,1197,8],[1430,34,1197,2],[1431,0,1198,1],[1433,0,1200,0],[1433,11,1200,9,"assertBlockParent"],[1433,28,1200,0],[1433,29,1200,27,"node"],[1433,33,1200,0],[1433,35,1200,44],[1434,0,1200,44],[1434,8,1200,33,"opts"],[1434,12,1200,44],[1434,83,1200,40],[1434,85,1200,44],[1435,0,1201,2,"assert"],[1435,4,1201,2,"assert"],[1435,10,1201,8],[1435,11,1201,9],[1435,24,1201,8],[1435,26,1201,24,"node"],[1435,30,1201,8],[1435,32,1201,30,"opts"],[1435,36,1201,8],[1435,37,1201,2],[1436,0,1202,1],[1438,0,1204,0],[1438,11,1204,9,"assertBlock"],[1438,22,1204,0],[1438,23,1204,21,"node"],[1438,27,1204,0],[1438,29,1204,38],[1439,0,1204,38],[1439,8,1204,27,"opts"],[1439,12,1204,38],[1439,83,1204,34],[1439,85,1204,38],[1440,0,1205,2,"assert"],[1440,4,1205,2,"assert"],[1440,10,1205,8],[1440,11,1205,9],[1440,18,1205,8],[1440,20,1205,18,"node"],[1440,24,1205,8],[1440,26,1205,24,"opts"],[1440,30,1205,8],[1440,31,1205,2],[1441,0,1206,1],[1443,0,1208,0],[1443,11,1208,9,"assertStatement"],[1443,26,1208,0],[1443,27,1208,25,"node"],[1443,31,1208,0],[1443,33,1208,42],[1444,0,1208,42],[1444,8,1208,31,"opts"],[1444,12,1208,42],[1444,83,1208,38],[1444,85,1208,42],[1445,0,1209,2,"assert"],[1445,4,1209,2,"assert"],[1445,10,1209,8],[1445,11,1209,9],[1445,22,1209,8],[1445,24,1209,22,"node"],[1445,28,1209,8],[1445,30,1209,28,"opts"],[1445,34,1209,8],[1445,35,1209,2],[1446,0,1210,1],[1448,0,1212,0],[1448,11,1212,9,"assertTerminatorless"],[1448,31,1212,0],[1448,32,1212,30,"node"],[1448,36,1212,0],[1448,38,1212,47],[1449,0,1212,47],[1449,8,1212,36,"opts"],[1449,12,1212,47],[1449,83,1212,43],[1449,85,1212,47],[1450,0,1213,2,"assert"],[1450,4,1213,2,"assert"],[1450,10,1213,8],[1450,11,1213,9],[1450,27,1213,8],[1450,29,1213,27,"node"],[1450,33,1213,8],[1450,35,1213,33,"opts"],[1450,39,1213,8],[1450,40,1213,2],[1451,0,1214,1],[1453,0,1216,0],[1453,11,1216,9,"assertCompletionStatement"],[1453,36,1216,0],[1453,37,1216,35,"node"],[1453,41,1216,0],[1453,43,1216,52],[1454,0,1216,52],[1454,8,1216,41,"opts"],[1454,12,1216,52],[1454,83,1216,48],[1454,85,1216,52],[1455,0,1217,2,"assert"],[1455,4,1217,2,"assert"],[1455,10,1217,8],[1455,11,1217,9],[1455,32,1217,8],[1455,34,1217,32,"node"],[1455,38,1217,8],[1455,40,1217,38,"opts"],[1455,44,1217,8],[1455,45,1217,2],[1456,0,1218,1],[1458,0,1220,0],[1458,11,1220,9,"assertConditional"],[1458,28,1220,0],[1458,29,1220,27,"node"],[1458,33,1220,0],[1458,35,1220,44],[1459,0,1220,44],[1459,8,1220,33,"opts"],[1459,12,1220,44],[1459,83,1220,40],[1459,85,1220,44],[1460,0,1221,2,"assert"],[1460,4,1221,2,"assert"],[1460,10,1221,8],[1460,11,1221,9],[1460,24,1221,8],[1460,26,1221,24,"node"],[1460,30,1221,8],[1460,32,1221,30,"opts"],[1460,36,1221,8],[1460,37,1221,2],[1461,0,1222,1],[1463,0,1224,0],[1463,11,1224,9,"assertLoop"],[1463,21,1224,0],[1463,22,1224,20,"node"],[1463,26,1224,0],[1463,28,1224,37],[1464,0,1224,37],[1464,8,1224,26,"opts"],[1464,12,1224,37],[1464,83,1224,33],[1464,85,1224,37],[1465,0,1225,2,"assert"],[1465,4,1225,2,"assert"],[1465,10,1225,8],[1465,11,1225,9],[1465,17,1225,8],[1465,19,1225,17,"node"],[1465,23,1225,8],[1465,25,1225,23,"opts"],[1465,29,1225,8],[1465,30,1225,2],[1466,0,1226,1],[1468,0,1228,0],[1468,11,1228,9,"assertWhile"],[1468,22,1228,0],[1468,23,1228,21,"node"],[1468,27,1228,0],[1468,29,1228,38],[1469,0,1228,38],[1469,8,1228,27,"opts"],[1469,12,1228,38],[1469,83,1228,34],[1469,85,1228,38],[1470,0,1229,2,"assert"],[1470,4,1229,2,"assert"],[1470,10,1229,8],[1470,11,1229,9],[1470,18,1229,8],[1470,20,1229,18,"node"],[1470,24,1229,8],[1470,26,1229,24,"opts"],[1470,30,1229,8],[1470,31,1229,2],[1471,0,1230,1],[1473,0,1232,0],[1473,11,1232,9,"assertExpressionWrapper"],[1473,34,1232,0],[1473,35,1232,33,"node"],[1473,39,1232,0],[1473,41,1232,50],[1474,0,1232,50],[1474,8,1232,39,"opts"],[1474,12,1232,50],[1474,83,1232,46],[1474,85,1232,50],[1475,0,1233,2,"assert"],[1475,4,1233,2,"assert"],[1475,10,1233,8],[1475,11,1233,9],[1475,30,1233,8],[1475,32,1233,30,"node"],[1475,36,1233,8],[1475,38,1233,36,"opts"],[1475,42,1233,8],[1475,43,1233,2],[1476,0,1234,1],[1478,0,1236,0],[1478,11,1236,9,"assertFor"],[1478,20,1236,0],[1478,21,1236,19,"node"],[1478,25,1236,0],[1478,27,1236,36],[1479,0,1236,36],[1479,8,1236,25,"opts"],[1479,12,1236,36],[1479,83,1236,32],[1479,85,1236,36],[1480,0,1237,2,"assert"],[1480,4,1237,2,"assert"],[1480,10,1237,8],[1480,11,1237,9],[1480,16,1237,8],[1480,18,1237,16,"node"],[1480,22,1237,8],[1480,24,1237,22,"opts"],[1480,28,1237,8],[1480,29,1237,2],[1481,0,1238,1],[1483,0,1240,0],[1483,11,1240,9,"assertForXStatement"],[1483,30,1240,0],[1483,31,1240,29,"node"],[1483,35,1240,0],[1483,37,1240,46],[1484,0,1240,46],[1484,8,1240,35,"opts"],[1484,12,1240,46],[1484,83,1240,42],[1484,85,1240,46],[1485,0,1241,2,"assert"],[1485,4,1241,2,"assert"],[1485,10,1241,8],[1485,11,1241,9],[1485,26,1241,8],[1485,28,1241,26,"node"],[1485,32,1241,8],[1485,34,1241,32,"opts"],[1485,38,1241,8],[1485,39,1241,2],[1486,0,1242,1],[1488,0,1244,0],[1488,11,1244,9,"assertFunction"],[1488,25,1244,0],[1488,26,1244,24,"node"],[1488,30,1244,0],[1488,32,1244,41],[1489,0,1244,41],[1489,8,1244,30,"opts"],[1489,12,1244,41],[1489,83,1244,37],[1489,85,1244,41],[1490,0,1245,2,"assert"],[1490,4,1245,2,"assert"],[1490,10,1245,8],[1490,11,1245,9],[1490,21,1245,8],[1490,23,1245,21,"node"],[1490,27,1245,8],[1490,29,1245,27,"opts"],[1490,33,1245,8],[1490,34,1245,2],[1491,0,1246,1],[1493,0,1248,0],[1493,11,1248,9,"assertFunctionParent"],[1493,31,1248,0],[1493,32,1248,30,"node"],[1493,36,1248,0],[1493,38,1248,47],[1494,0,1248,47],[1494,8,1248,36,"opts"],[1494,12,1248,47],[1494,83,1248,43],[1494,85,1248,47],[1495,0,1249,2,"assert"],[1495,4,1249,2,"assert"],[1495,10,1249,8],[1495,11,1249,9],[1495,27,1249,8],[1495,29,1249,27,"node"],[1495,33,1249,8],[1495,35,1249,33,"opts"],[1495,39,1249,8],[1495,40,1249,2],[1496,0,1250,1],[1498,0,1252,0],[1498,11,1252,9,"assertPureish"],[1498,24,1252,0],[1498,25,1252,23,"node"],[1498,29,1252,0],[1498,31,1252,40],[1499,0,1252,40],[1499,8,1252,29,"opts"],[1499,12,1252,40],[1499,83,1252,36],[1499,85,1252,40],[1500,0,1253,2,"assert"],[1500,4,1253,2,"assert"],[1500,10,1253,8],[1500,11,1253,9],[1500,20,1253,8],[1500,22,1253,20,"node"],[1500,26,1253,8],[1500,28,1253,26,"opts"],[1500,32,1253,8],[1500,33,1253,2],[1501,0,1254,1],[1503,0,1256,0],[1503,11,1256,9,"assertDeclaration"],[1503,28,1256,0],[1503,29,1256,27,"node"],[1503,33,1256,0],[1503,35,1256,44],[1504,0,1256,44],[1504,8,1256,33,"opts"],[1504,12,1256,44],[1504,83,1256,40],[1504,85,1256,44],[1505,0,1257,2,"assert"],[1505,4,1257,2,"assert"],[1505,10,1257,8],[1505,11,1257,9],[1505,24,1257,8],[1505,26,1257,24,"node"],[1505,30,1257,8],[1505,32,1257,30,"opts"],[1505,36,1257,8],[1505,37,1257,2],[1506,0,1258,1],[1508,0,1260,0],[1508,11,1260,9,"assertPatternLike"],[1508,28,1260,0],[1508,29,1260,27,"node"],[1508,33,1260,0],[1508,35,1260,44],[1509,0,1260,44],[1509,8,1260,33,"opts"],[1509,12,1260,44],[1509,83,1260,40],[1509,85,1260,44],[1510,0,1261,2,"assert"],[1510,4,1261,2,"assert"],[1510,10,1261,8],[1510,11,1261,9],[1510,24,1261,8],[1510,26,1261,24,"node"],[1510,30,1261,8],[1510,32,1261,30,"opts"],[1510,36,1261,8],[1510,37,1261,2],[1511,0,1262,1],[1513,0,1264,0],[1513,11,1264,9,"assertLVal"],[1513,21,1264,0],[1513,22,1264,20,"node"],[1513,26,1264,0],[1513,28,1264,37],[1514,0,1264,37],[1514,8,1264,26,"opts"],[1514,12,1264,37],[1514,83,1264,33],[1514,85,1264,37],[1515,0,1265,2,"assert"],[1515,4,1265,2,"assert"],[1515,10,1265,8],[1515,11,1265,9],[1515,17,1265,8],[1515,19,1265,17,"node"],[1515,23,1265,8],[1515,25,1265,23,"opts"],[1515,29,1265,8],[1515,30,1265,2],[1516,0,1266,1],[1518,0,1268,0],[1518,11,1268,9,"assertTSEntityName"],[1518,29,1268,0],[1518,30,1268,28,"node"],[1518,34,1268,0],[1518,36,1268,45],[1519,0,1268,45],[1519,8,1268,34,"opts"],[1519,12,1268,45],[1519,83,1268,41],[1519,85,1268,45],[1520,0,1269,2,"assert"],[1520,4,1269,2,"assert"],[1520,10,1269,8],[1520,11,1269,9],[1520,25,1269,8],[1520,27,1269,25,"node"],[1520,31,1269,8],[1520,33,1269,31,"opts"],[1520,37,1269,8],[1520,38,1269,2],[1521,0,1270,1],[1523,0,1272,0],[1523,11,1272,9,"assertLiteral"],[1523,24,1272,0],[1523,25,1272,23,"node"],[1523,29,1272,0],[1523,31,1272,40],[1524,0,1272,40],[1524,8,1272,29,"opts"],[1524,12,1272,40],[1524,83,1272,36],[1524,85,1272,40],[1525,0,1273,2,"assert"],[1525,4,1273,2,"assert"],[1525,10,1273,8],[1525,11,1273,9],[1525,20,1273,8],[1525,22,1273,20,"node"],[1525,26,1273,8],[1525,28,1273,26,"opts"],[1525,32,1273,8],[1525,33,1273,2],[1526,0,1274,1],[1528,0,1276,0],[1528,11,1276,9,"assertImmutable"],[1528,26,1276,0],[1528,27,1276,25,"node"],[1528,31,1276,0],[1528,33,1276,42],[1529,0,1276,42],[1529,8,1276,31,"opts"],[1529,12,1276,42],[1529,83,1276,38],[1529,85,1276,42],[1530,0,1277,2,"assert"],[1530,4,1277,2,"assert"],[1530,10,1277,8],[1530,11,1277,9],[1530,22,1277,8],[1530,24,1277,22,"node"],[1530,28,1277,8],[1530,30,1277,28,"opts"],[1530,34,1277,8],[1530,35,1277,2],[1531,0,1278,1],[1533,0,1280,0],[1533,11,1280,9,"assertUserWhitespacable"],[1533,34,1280,0],[1533,35,1280,33,"node"],[1533,39,1280,0],[1533,41,1280,50],[1534,0,1280,50],[1534,8,1280,39,"opts"],[1534,12,1280,50],[1534,83,1280,46],[1534,85,1280,50],[1535,0,1281,2,"assert"],[1535,4,1281,2,"assert"],[1535,10,1281,8],[1535,11,1281,9],[1535,30,1281,8],[1535,32,1281,30,"node"],[1535,36,1281,8],[1535,38,1281,36,"opts"],[1535,42,1281,8],[1535,43,1281,2],[1536,0,1282,1],[1538,0,1284,0],[1538,11,1284,9,"assertMethod"],[1538,23,1284,0],[1538,24,1284,22,"node"],[1538,28,1284,0],[1538,30,1284,39],[1539,0,1284,39],[1539,8,1284,28,"opts"],[1539,12,1284,39],[1539,83,1284,35],[1539,85,1284,39],[1540,0,1285,2,"assert"],[1540,4,1285,2,"assert"],[1540,10,1285,8],[1540,11,1285,9],[1540,19,1285,8],[1540,21,1285,19,"node"],[1540,25,1285,8],[1540,27,1285,25,"opts"],[1540,31,1285,8],[1540,32,1285,2],[1541,0,1286,1],[1543,0,1288,0],[1543,11,1288,9,"assertObjectMember"],[1543,29,1288,0],[1543,30,1288,28,"node"],[1543,34,1288,0],[1543,36,1288,45],[1544,0,1288,45],[1544,8,1288,34,"opts"],[1544,12,1288,45],[1544,83,1288,41],[1544,85,1288,45],[1545,0,1289,2,"assert"],[1545,4,1289,2,"assert"],[1545,10,1289,8],[1545,11,1289,9],[1545,25,1289,8],[1545,27,1289,25,"node"],[1545,31,1289,8],[1545,33,1289,31,"opts"],[1545,37,1289,8],[1545,38,1289,2],[1546,0,1290,1],[1548,0,1292,0],[1548,11,1292,9,"assertProperty"],[1548,25,1292,0],[1548,26,1292,24,"node"],[1548,30,1292,0],[1548,32,1292,41],[1549,0,1292,41],[1549,8,1292,30,"opts"],[1549,12,1292,41],[1549,83,1292,37],[1549,85,1292,41],[1550,0,1293,2,"assert"],[1550,4,1293,2,"assert"],[1550,10,1293,8],[1550,11,1293,9],[1550,21,1293,8],[1550,23,1293,21,"node"],[1550,27,1293,8],[1550,29,1293,27,"opts"],[1550,33,1293,8],[1550,34,1293,2],[1551,0,1294,1],[1553,0,1296,0],[1553,11,1296,9,"assertUnaryLike"],[1553,26,1296,0],[1553,27,1296,25,"node"],[1553,31,1296,0],[1553,33,1296,42],[1554,0,1296,42],[1554,8,1296,31,"opts"],[1554,12,1296,42],[1554,83,1296,38],[1554,85,1296,42],[1555,0,1297,2,"assert"],[1555,4,1297,2,"assert"],[1555,10,1297,8],[1555,11,1297,9],[1555,22,1297,8],[1555,24,1297,22,"node"],[1555,28,1297,8],[1555,30,1297,28,"opts"],[1555,34,1297,8],[1555,35,1297,2],[1556,0,1298,1],[1558,0,1300,0],[1558,11,1300,9,"assertPattern"],[1558,24,1300,0],[1558,25,1300,23,"node"],[1558,29,1300,0],[1558,31,1300,40],[1559,0,1300,40],[1559,8,1300,29,"opts"],[1559,12,1300,40],[1559,83,1300,36],[1559,85,1300,40],[1560,0,1301,2,"assert"],[1560,4,1301,2,"assert"],[1560,10,1301,8],[1560,11,1301,9],[1560,20,1301,8],[1560,22,1301,20,"node"],[1560,26,1301,8],[1560,28,1301,26,"opts"],[1560,32,1301,8],[1560,33,1301,2],[1561,0,1302,1],[1563,0,1304,0],[1563,11,1304,9,"assertClass"],[1563,22,1304,0],[1563,23,1304,21,"node"],[1563,27,1304,0],[1563,29,1304,38],[1564,0,1304,38],[1564,8,1304,27,"opts"],[1564,12,1304,38],[1564,83,1304,34],[1564,85,1304,38],[1565,0,1305,2,"assert"],[1565,4,1305,2,"assert"],[1565,10,1305,8],[1565,11,1305,9],[1565,18,1305,8],[1565,20,1305,18,"node"],[1565,24,1305,8],[1565,26,1305,24,"opts"],[1565,30,1305,8],[1565,31,1305,2],[1566,0,1306,1],[1568,0,1308,0],[1568,11,1308,9,"assertModuleDeclaration"],[1568,34,1308,0],[1568,35,1308,33,"node"],[1568,39,1308,0],[1568,41,1308,50],[1569,0,1308,50],[1569,8,1308,39,"opts"],[1569,12,1308,50],[1569,83,1308,46],[1569,85,1308,50],[1570,0,1309,2,"assert"],[1570,4,1309,2,"assert"],[1570,10,1309,8],[1570,11,1309,9],[1570,30,1309,8],[1570,32,1309,30,"node"],[1570,36,1309,8],[1570,38,1309,36,"opts"],[1570,42,1309,8],[1570,43,1309,2],[1571,0,1310,1],[1573,0,1312,0],[1573,11,1312,9,"assertExportDeclaration"],[1573,34,1312,0],[1573,35,1312,33,"node"],[1573,39,1312,0],[1573,41,1312,50],[1574,0,1312,50],[1574,8,1312,39,"opts"],[1574,12,1312,50],[1574,83,1312,46],[1574,85,1312,50],[1575,0,1313,2,"assert"],[1575,4,1313,2,"assert"],[1575,10,1313,8],[1575,11,1313,9],[1575,30,1313,8],[1575,32,1313,30,"node"],[1575,36,1313,8],[1575,38,1313,36,"opts"],[1575,42,1313,8],[1575,43,1313,2],[1576,0,1314,1],[1578,0,1316,0],[1578,11,1316,9,"assertModuleSpecifier"],[1578,32,1316,0],[1578,33,1316,31,"node"],[1578,37,1316,0],[1578,39,1316,48],[1579,0,1316,48],[1579,8,1316,37,"opts"],[1579,12,1316,48],[1579,83,1316,44],[1579,85,1316,48],[1580,0,1317,2,"assert"],[1580,4,1317,2,"assert"],[1580,10,1317,8],[1580,11,1317,9],[1580,28,1317,8],[1580,30,1317,28,"node"],[1580,34,1317,8],[1580,36,1317,34,"opts"],[1580,40,1317,8],[1580,41,1317,2],[1581,0,1318,1],[1583,0,1320,0],[1583,11,1320,9,"assertFlow"],[1583,21,1320,0],[1583,22,1320,20,"node"],[1583,26,1320,0],[1583,28,1320,37],[1584,0,1320,37],[1584,8,1320,26,"opts"],[1584,12,1320,37],[1584,83,1320,33],[1584,85,1320,37],[1585,0,1321,2,"assert"],[1585,4,1321,2,"assert"],[1585,10,1321,8],[1585,11,1321,9],[1585,17,1321,8],[1585,19,1321,17,"node"],[1585,23,1321,8],[1585,25,1321,23,"opts"],[1585,29,1321,8],[1585,30,1321,2],[1586,0,1322,1],[1588,0,1324,0],[1588,11,1324,9,"assertFlowType"],[1588,25,1324,0],[1588,26,1324,24,"node"],[1588,30,1324,0],[1588,32,1324,41],[1589,0,1324,41],[1589,8,1324,30,"opts"],[1589,12,1324,41],[1589,83,1324,37],[1589,85,1324,41],[1590,0,1325,2,"assert"],[1590,4,1325,2,"assert"],[1590,10,1325,8],[1590,11,1325,9],[1590,21,1325,8],[1590,23,1325,21,"node"],[1590,27,1325,8],[1590,29,1325,27,"opts"],[1590,33,1325,8],[1590,34,1325,2],[1591,0,1326,1],[1593,0,1328,0],[1593,11,1328,9,"assertFlowBaseAnnotation"],[1593,35,1328,0],[1593,36,1328,34,"node"],[1593,40,1328,0],[1593,42,1328,51],[1594,0,1328,51],[1594,8,1328,40,"opts"],[1594,12,1328,51],[1594,83,1328,47],[1594,85,1328,51],[1595,0,1329,2,"assert"],[1595,4,1329,2,"assert"],[1595,10,1329,8],[1595,11,1329,9],[1595,31,1329,8],[1595,33,1329,31,"node"],[1595,37,1329,8],[1595,39,1329,37,"opts"],[1595,43,1329,8],[1595,44,1329,2],[1596,0,1330,1],[1598,0,1332,0],[1598,11,1332,9,"assertFlowDeclaration"],[1598,32,1332,0],[1598,33,1332,31,"node"],[1598,37,1332,0],[1598,39,1332,48],[1599,0,1332,48],[1599,8,1332,37,"opts"],[1599,12,1332,48],[1599,83,1332,44],[1599,85,1332,48],[1600,0,1333,2,"assert"],[1600,4,1333,2,"assert"],[1600,10,1333,8],[1600,11,1333,9],[1600,28,1333,8],[1600,30,1333,28,"node"],[1600,34,1333,8],[1600,36,1333,34,"opts"],[1600,40,1333,8],[1600,41,1333,2],[1601,0,1334,1],[1603,0,1336,0],[1603,11,1336,9,"assertFlowPredicate"],[1603,30,1336,0],[1603,31,1336,29,"node"],[1603,35,1336,0],[1603,37,1336,46],[1604,0,1336,46],[1604,8,1336,35,"opts"],[1604,12,1336,46],[1604,83,1336,42],[1604,85,1336,46],[1605,0,1337,2,"assert"],[1605,4,1337,2,"assert"],[1605,10,1337,8],[1605,11,1337,9],[1605,26,1337,8],[1605,28,1337,26,"node"],[1605,32,1337,8],[1605,34,1337,32,"opts"],[1605,38,1337,8],[1605,39,1337,2],[1606,0,1338,1],[1608,0,1340,0],[1608,11,1340,9,"assertJSX"],[1608,20,1340,0],[1608,21,1340,19,"node"],[1608,25,1340,0],[1608,27,1340,36],[1609,0,1340,36],[1609,8,1340,25,"opts"],[1609,12,1340,36],[1609,83,1340,32],[1609,85,1340,36],[1610,0,1341,2,"assert"],[1610,4,1341,2,"assert"],[1610,10,1341,8],[1610,11,1341,9],[1610,16,1341,8],[1610,18,1341,16,"node"],[1610,22,1341,8],[1610,24,1341,22,"opts"],[1610,28,1341,8],[1610,29,1341,2],[1611,0,1342,1],[1613,0,1344,0],[1613,11,1344,9,"assertPrivate"],[1613,24,1344,0],[1613,25,1344,23,"node"],[1613,29,1344,0],[1613,31,1344,40],[1614,0,1344,40],[1614,8,1344,29,"opts"],[1614,12,1344,40],[1614,83,1344,36],[1614,85,1344,40],[1615,0,1345,2,"assert"],[1615,4,1345,2,"assert"],[1615,10,1345,8],[1615,11,1345,9],[1615,20,1345,8],[1615,22,1345,20,"node"],[1615,26,1345,8],[1615,28,1345,26,"opts"],[1615,32,1345,8],[1615,33,1345,2],[1616,0,1346,1],[1618,0,1348,0],[1618,11,1348,9,"assertTSTypeElement"],[1618,30,1348,0],[1618,31,1348,29,"node"],[1618,35,1348,0],[1618,37,1348,46],[1619,0,1348,46],[1619,8,1348,35,"opts"],[1619,12,1348,46],[1619,83,1348,42],[1619,85,1348,46],[1620,0,1349,2,"assert"],[1620,4,1349,2,"assert"],[1620,10,1349,8],[1620,11,1349,9],[1620,26,1349,8],[1620,28,1349,26,"node"],[1620,32,1349,8],[1620,34,1349,32,"opts"],[1620,38,1349,8],[1620,39,1349,2],[1621,0,1350,1],[1623,0,1352,0],[1623,11,1352,9,"assertTSType"],[1623,23,1352,0],[1623,24,1352,22,"node"],[1623,28,1352,0],[1623,30,1352,39],[1624,0,1352,39],[1624,8,1352,28,"opts"],[1624,12,1352,39],[1624,83,1352,35],[1624,85,1352,39],[1625,0,1353,2,"assert"],[1625,4,1353,2,"assert"],[1625,10,1353,8],[1625,11,1353,9],[1625,19,1353,8],[1625,21,1353,19,"node"],[1625,25,1353,8],[1625,27,1353,25,"opts"],[1625,31,1353,8],[1625,32,1353,2],[1626,0,1354,1],[1628,0,1356,0],[1628,11,1356,9,"assertNumberLiteral"],[1628,30,1356,0],[1628,31,1356,29,"node"],[1628,35,1356,0],[1628,37,1356,35,"opts"],[1628,41,1356,0],[1628,43,1356,41],[1629,0,1357,2,"console"],[1629,4,1357,2,"console"],[1629,11,1357,9],[1629,12,1357,10,"trace"],[1629,17,1357,2],[1629,18,1357,16],[1629,82,1357,2],[1630,0,1358,2,"assert"],[1630,4,1358,2,"assert"],[1630,10,1358,8],[1630,11,1358,9],[1630,26,1358,8],[1630,28,1358,26,"node"],[1630,32,1358,8],[1630,34,1358,32,"opts"],[1630,38,1358,8],[1630,39,1358,2],[1631,0,1359,1],[1633,0,1361,0],[1633,11,1361,9,"assertRegexLiteral"],[1633,29,1361,0],[1633,30,1361,28,"node"],[1633,34,1361,0],[1633,36,1361,34,"opts"],[1633,40,1361,0],[1633,42,1361,40],[1634,0,1362,2,"console"],[1634,4,1362,2,"console"],[1634,11,1362,9],[1634,12,1362,10,"trace"],[1634,17,1362,2],[1634,18,1362,16],[1634,80,1362,2],[1635,0,1363,2,"assert"],[1635,4,1363,2,"assert"],[1635,10,1363,8],[1635,11,1363,9],[1635,25,1363,8],[1635,27,1363,25,"node"],[1635,31,1363,8],[1635,33,1363,31,"opts"],[1635,37,1363,8],[1635,38,1363,2],[1636,0,1364,1],[1638,0,1366,0],[1638,11,1366,9,"assertRestProperty"],[1638,29,1366,0],[1638,30,1366,28,"node"],[1638,34,1366,0],[1638,36,1366,34,"opts"],[1638,40,1366,0],[1638,42,1366,40],[1639,0,1367,2,"console"],[1639,4,1367,2,"console"],[1639,11,1367,9],[1639,12,1367,10,"trace"],[1639,17,1367,2],[1639,18,1367,16],[1639,78,1367,2],[1640,0,1368,2,"assert"],[1640,4,1368,2,"assert"],[1640,10,1368,8],[1640,11,1368,9],[1640,25,1368,8],[1640,27,1368,25,"node"],[1640,31,1368,8],[1640,33,1368,31,"opts"],[1640,37,1368,8],[1640,38,1368,2],[1641,0,1369,1],[1643,0,1371,0],[1643,11,1371,9,"assertSpreadProperty"],[1643,31,1371,0],[1643,32,1371,30,"node"],[1643,36,1371,0],[1643,38,1371,36,"opts"],[1643,42,1371,0],[1643,44,1371,42],[1644,0,1372,2,"console"],[1644,4,1372,2,"console"],[1644,11,1372,9],[1644,12,1372,10,"trace"],[1644,17,1372,2],[1644,18,1372,16],[1644,82,1372,2],[1645,0,1373,2,"assert"],[1645,4,1373,2,"assert"],[1645,10,1373,8],[1645,11,1373,9],[1645,27,1373,8],[1645,29,1373,27,"node"],[1645,33,1373,8],[1645,35,1373,33,"opts"],[1645,39,1373,8],[1645,40,1373,2],[1646,0,1374,1]]},"type":"js/module"}]}